// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1alpha1/service.proto

package svcv1alpha1connect

import (
	context "context"
	errors "errors"
	v1alpha1 "github.com/akuity/kargo/pkg/api/service/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KargoServiceName is the fully-qualified name of the KargoService service.
	KargoServiceName = "akuity.io.kargo.service.v1alpha1.KargoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KargoServiceListEnvironmentsProcedure is the fully-qualified name of the KargoService's
	// ListEnvironments RPC.
	KargoServiceListEnvironmentsProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ListEnvironments"
	// KargoServiceGetEnvironmentProcedure is the fully-qualified name of the KargoService's
	// GetEnvironment RPC.
	KargoServiceGetEnvironmentProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetEnvironment"
	// KargoServicePromoteEnvironmentProcedure is the fully-qualified name of the KargoService's
	// PromoteEnvironment RPC.
	KargoServicePromoteEnvironmentProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/PromoteEnvironment"
)

// KargoServiceClient is a client for the akuity.io.kargo.service.v1alpha1.KargoService service.
type KargoServiceClient interface {
	ListEnvironments(context.Context, *connect_go.Request[v1alpha1.ListEnvironmentsRequest]) (*connect_go.Response[v1alpha1.ListEnvironmentsResponse], error)
	GetEnvironment(context.Context, *connect_go.Request[v1alpha1.GetEnvironmentRequest]) (*connect_go.Response[v1alpha1.GetEnvironmentResponse], error)
	PromoteEnvironment(context.Context, *connect_go.Request[v1alpha1.PromoteEnvironmentRequest]) (*connect_go.Response[v1alpha1.PromoteEnvironmentResponse], error)
}

// NewKargoServiceClient constructs a client for the akuity.io.kargo.service.v1alpha1.KargoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKargoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KargoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kargoServiceClient{
		listEnvironments: connect_go.NewClient[v1alpha1.ListEnvironmentsRequest, v1alpha1.ListEnvironmentsResponse](
			httpClient,
			baseURL+KargoServiceListEnvironmentsProcedure,
			opts...,
		),
		getEnvironment: connect_go.NewClient[v1alpha1.GetEnvironmentRequest, v1alpha1.GetEnvironmentResponse](
			httpClient,
			baseURL+KargoServiceGetEnvironmentProcedure,
			opts...,
		),
		promoteEnvironment: connect_go.NewClient[v1alpha1.PromoteEnvironmentRequest, v1alpha1.PromoteEnvironmentResponse](
			httpClient,
			baseURL+KargoServicePromoteEnvironmentProcedure,
			opts...,
		),
	}
}

// kargoServiceClient implements KargoServiceClient.
type kargoServiceClient struct {
	listEnvironments   *connect_go.Client[v1alpha1.ListEnvironmentsRequest, v1alpha1.ListEnvironmentsResponse]
	getEnvironment     *connect_go.Client[v1alpha1.GetEnvironmentRequest, v1alpha1.GetEnvironmentResponse]
	promoteEnvironment *connect_go.Client[v1alpha1.PromoteEnvironmentRequest, v1alpha1.PromoteEnvironmentResponse]
}

// ListEnvironments calls akuity.io.kargo.service.v1alpha1.KargoService.ListEnvironments.
func (c *kargoServiceClient) ListEnvironments(ctx context.Context, req *connect_go.Request[v1alpha1.ListEnvironmentsRequest]) (*connect_go.Response[v1alpha1.ListEnvironmentsResponse], error) {
	return c.listEnvironments.CallUnary(ctx, req)
}

// GetEnvironment calls akuity.io.kargo.service.v1alpha1.KargoService.GetEnvironment.
func (c *kargoServiceClient) GetEnvironment(ctx context.Context, req *connect_go.Request[v1alpha1.GetEnvironmentRequest]) (*connect_go.Response[v1alpha1.GetEnvironmentResponse], error) {
	return c.getEnvironment.CallUnary(ctx, req)
}

// PromoteEnvironment calls akuity.io.kargo.service.v1alpha1.KargoService.PromoteEnvironment.
func (c *kargoServiceClient) PromoteEnvironment(ctx context.Context, req *connect_go.Request[v1alpha1.PromoteEnvironmentRequest]) (*connect_go.Response[v1alpha1.PromoteEnvironmentResponse], error) {
	return c.promoteEnvironment.CallUnary(ctx, req)
}

// KargoServiceHandler is an implementation of the akuity.io.kargo.service.v1alpha1.KargoService
// service.
type KargoServiceHandler interface {
	ListEnvironments(context.Context, *connect_go.Request[v1alpha1.ListEnvironmentsRequest]) (*connect_go.Response[v1alpha1.ListEnvironmentsResponse], error)
	GetEnvironment(context.Context, *connect_go.Request[v1alpha1.GetEnvironmentRequest]) (*connect_go.Response[v1alpha1.GetEnvironmentResponse], error)
	PromoteEnvironment(context.Context, *connect_go.Request[v1alpha1.PromoteEnvironmentRequest]) (*connect_go.Response[v1alpha1.PromoteEnvironmentResponse], error)
}

// NewKargoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKargoServiceHandler(svc KargoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(KargoServiceListEnvironmentsProcedure, connect_go.NewUnaryHandler(
		KargoServiceListEnvironmentsProcedure,
		svc.ListEnvironments,
		opts...,
	))
	mux.Handle(KargoServiceGetEnvironmentProcedure, connect_go.NewUnaryHandler(
		KargoServiceGetEnvironmentProcedure,
		svc.GetEnvironment,
		opts...,
	))
	mux.Handle(KargoServicePromoteEnvironmentProcedure, connect_go.NewUnaryHandler(
		KargoServicePromoteEnvironmentProcedure,
		svc.PromoteEnvironment,
		opts...,
	))
	return "/akuity.io.kargo.service.v1alpha1.KargoService/", mux
}

// UnimplementedKargoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKargoServiceHandler struct{}

func (UnimplementedKargoServiceHandler) ListEnvironments(context.Context, *connect_go.Request[v1alpha1.ListEnvironmentsRequest]) (*connect_go.Response[v1alpha1.ListEnvironmentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ListEnvironments is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetEnvironment(context.Context, *connect_go.Request[v1alpha1.GetEnvironmentRequest]) (*connect_go.Response[v1alpha1.GetEnvironmentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetEnvironment is not implemented"))
}

func (UnimplementedKargoServiceHandler) PromoteEnvironment(context.Context, *connect_go.Request[v1alpha1.PromoteEnvironmentRequest]) (*connect_go.Response[v1alpha1.PromoteEnvironmentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.PromoteEnvironment is not implemented"))
}
