// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1alpha1/service.proto

package svcv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/akuity/kargo/pkg/api/service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// KargoServiceName is the fully-qualified name of the KargoService service.
	KargoServiceName = "akuity.io.kargo.service.v1alpha1.KargoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KargoServiceGetVersionInfoProcedure is the fully-qualified name of the KargoService's
	// GetVersionInfo RPC.
	KargoServiceGetVersionInfoProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetVersionInfo"
	// KargoServiceGetConfigProcedure is the fully-qualified name of the KargoService's GetConfig RPC.
	KargoServiceGetConfigProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetConfig"
	// KargoServiceGetPublicConfigProcedure is the fully-qualified name of the KargoService's
	// GetPublicConfig RPC.
	KargoServiceGetPublicConfigProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetPublicConfig"
	// KargoServiceAdminLoginProcedure is the fully-qualified name of the KargoService's AdminLogin RPC.
	KargoServiceAdminLoginProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/AdminLogin"
	// KargoServiceCreateResourceProcedure is the fully-qualified name of the KargoService's
	// CreateResource RPC.
	KargoServiceCreateResourceProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/CreateResource"
	// KargoServiceCreateOrUpdateResourceProcedure is the fully-qualified name of the KargoService's
	// CreateOrUpdateResource RPC.
	KargoServiceCreateOrUpdateResourceProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/CreateOrUpdateResource"
	// KargoServiceUpdateResourceProcedure is the fully-qualified name of the KargoService's
	// UpdateResource RPC.
	KargoServiceUpdateResourceProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/UpdateResource"
	// KargoServiceDeleteResourceProcedure is the fully-qualified name of the KargoService's
	// DeleteResource RPC.
	KargoServiceDeleteResourceProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/DeleteResource"
	// KargoServiceCreateStageProcedure is the fully-qualified name of the KargoService's CreateStage
	// RPC.
	KargoServiceCreateStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/CreateStage"
	// KargoServiceListStagesProcedure is the fully-qualified name of the KargoService's ListStages RPC.
	KargoServiceListStagesProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ListStages"
	// KargoServiceGetStageProcedure is the fully-qualified name of the KargoService's GetStage RPC.
	KargoServiceGetStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetStage"
	// KargoServiceWatchStagesProcedure is the fully-qualified name of the KargoService's WatchStages
	// RPC.
	KargoServiceWatchStagesProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/WatchStages"
	// KargoServiceUpdateStageProcedure is the fully-qualified name of the KargoService's UpdateStage
	// RPC.
	KargoServiceUpdateStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/UpdateStage"
	// KargoServiceDeleteStageProcedure is the fully-qualified name of the KargoService's DeleteStage
	// RPC.
	KargoServiceDeleteStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/DeleteStage"
	// KargoServicePromoteStageProcedure is the fully-qualified name of the KargoService's PromoteStage
	// RPC.
	KargoServicePromoteStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/PromoteStage"
	// KargoServicePromoteSubscribersProcedure is the fully-qualified name of the KargoService's
	// PromoteSubscribers RPC.
	KargoServicePromoteSubscribersProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/PromoteSubscribers"
	// KargoServiceRefreshStageProcedure is the fully-qualified name of the KargoService's RefreshStage
	// RPC.
	KargoServiceRefreshStageProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/RefreshStage"
	// KargoServiceListPromotionsProcedure is the fully-qualified name of the KargoService's
	// ListPromotions RPC.
	KargoServiceListPromotionsProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ListPromotions"
	// KargoServiceWatchPromotionsProcedure is the fully-qualified name of the KargoService's
	// WatchPromotions RPC.
	KargoServiceWatchPromotionsProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/WatchPromotions"
	// KargoServiceGetPromotionProcedure is the fully-qualified name of the KargoService's GetPromotion
	// RPC.
	KargoServiceGetPromotionProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetPromotion"
	// KargoServiceWatchPromotionProcedure is the fully-qualified name of the KargoService's
	// WatchPromotion RPC.
	KargoServiceWatchPromotionProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/WatchPromotion"
	// KargoServiceCreateProjectProcedure is the fully-qualified name of the KargoService's
	// CreateProject RPC.
	KargoServiceCreateProjectProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/CreateProject"
	// KargoServiceListProjectsProcedure is the fully-qualified name of the KargoService's ListProjects
	// RPC.
	KargoServiceListProjectsProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ListProjects"
	// KargoServiceDeleteProjectProcedure is the fully-qualified name of the KargoService's
	// DeleteProject RPC.
	KargoServiceDeleteProjectProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/DeleteProject"
	// KargoServiceQueryFreightProcedure is the fully-qualified name of the KargoService's QueryFreight
	// RPC.
	KargoServiceQueryFreightProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/QueryFreight"
	// KargoServiceDeleteFreightProcedure is the fully-qualified name of the KargoService's
	// DeleteFreight RPC.
	KargoServiceDeleteFreightProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/DeleteFreight"
	// KargoServiceApproveFreightProcedure is the fully-qualified name of the KargoService's
	// ApproveFreight RPC.
	KargoServiceApproveFreightProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ApproveFreight"
	// KargoServiceUpdateFreightAliasProcedure is the fully-qualified name of the KargoService's
	// UpdateFreightAlias RPC.
	KargoServiceUpdateFreightAliasProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/UpdateFreightAlias"
	// KargoServiceListWarehousesProcedure is the fully-qualified name of the KargoService's
	// ListWarehouses RPC.
	KargoServiceListWarehousesProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/ListWarehouses"
	// KargoServiceGetWarehouseProcedure is the fully-qualified name of the KargoService's GetWarehouse
	// RPC.
	KargoServiceGetWarehouseProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/GetWarehouse"
	// KargoServiceWatchWarehousesProcedure is the fully-qualified name of the KargoService's
	// WatchWarehouses RPC.
	KargoServiceWatchWarehousesProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/WatchWarehouses"
	// KargoServiceCreateWarehouseProcedure is the fully-qualified name of the KargoService's
	// CreateWarehouse RPC.
	KargoServiceCreateWarehouseProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/CreateWarehouse"
	// KargoServiceUpdateWarehouseProcedure is the fully-qualified name of the KargoService's
	// UpdateWarehouse RPC.
	KargoServiceUpdateWarehouseProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/UpdateWarehouse"
	// KargoServiceDeleteWarehouseProcedure is the fully-qualified name of the KargoService's
	// DeleteWarehouse RPC.
	KargoServiceDeleteWarehouseProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/DeleteWarehouse"
	// KargoServiceRefreshWarehouseProcedure is the fully-qualified name of the KargoService's
	// RefreshWarehouse RPC.
	KargoServiceRefreshWarehouseProcedure = "/akuity.io.kargo.service.v1alpha1.KargoService/RefreshWarehouse"
)

// KargoServiceClient is a client for the akuity.io.kargo.service.v1alpha1.KargoService service.
type KargoServiceClient interface {
	GetVersionInfo(context.Context, *connect.Request[v1alpha1.GetVersionInfoRequest]) (*connect.Response[v1alpha1.GetVersionInfoResponse], error)
	GetConfig(context.Context, *connect.Request[v1alpha1.GetConfigRequest]) (*connect.Response[v1alpha1.GetConfigResponse], error)
	GetPublicConfig(context.Context, *connect.Request[v1alpha1.GetPublicConfigRequest]) (*connect.Response[v1alpha1.GetPublicConfigResponse], error)
	AdminLogin(context.Context, *connect.Request[v1alpha1.AdminLoginRequest]) (*connect.Response[v1alpha1.AdminLoginResponse], error)
	// TODO(devholic): Add ApplyResource API
	// rpc ApplyResource(ApplyResourceRequest) returns (ApplyResourceRequest);
	CreateResource(context.Context, *connect.Request[v1alpha1.CreateResourceRequest]) (*connect.Response[v1alpha1.CreateResourceResponse], error)
	CreateOrUpdateResource(context.Context, *connect.Request[v1alpha1.CreateOrUpdateResourceRequest]) (*connect.Response[v1alpha1.CreateOrUpdateResourceResponse], error)
	UpdateResource(context.Context, *connect.Request[v1alpha1.UpdateResourceRequest]) (*connect.Response[v1alpha1.UpdateResourceResponse], error)
	DeleteResource(context.Context, *connect.Request[v1alpha1.DeleteResourceRequest]) (*connect.Response[v1alpha1.DeleteResourceResponse], error)
	CreateStage(context.Context, *connect.Request[v1alpha1.CreateStageRequest]) (*connect.Response[v1alpha1.CreateStageResponse], error)
	ListStages(context.Context, *connect.Request[v1alpha1.ListStagesRequest]) (*connect.Response[v1alpha1.ListStagesResponse], error)
	GetStage(context.Context, *connect.Request[v1alpha1.GetStageRequest]) (*connect.Response[v1alpha1.GetStageResponse], error)
	WatchStages(context.Context, *connect.Request[v1alpha1.WatchStagesRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchStagesResponse], error)
	UpdateStage(context.Context, *connect.Request[v1alpha1.UpdateStageRequest]) (*connect.Response[v1alpha1.UpdateStageResponse], error)
	DeleteStage(context.Context, *connect.Request[v1alpha1.DeleteStageRequest]) (*connect.Response[v1alpha1.DeleteStageResponse], error)
	PromoteStage(context.Context, *connect.Request[v1alpha1.PromoteStageRequest]) (*connect.Response[v1alpha1.PromoteStageResponse], error)
	PromoteSubscribers(context.Context, *connect.Request[v1alpha1.PromoteSubscribersRequest]) (*connect.Response[v1alpha1.PromoteSubscribersResponse], error)
	RefreshStage(context.Context, *connect.Request[v1alpha1.RefreshStageRequest]) (*connect.Response[v1alpha1.RefreshStageResponse], error)
	// Promotion APIs
	ListPromotions(context.Context, *connect.Request[v1alpha1.ListPromotionsRequest]) (*connect.Response[v1alpha1.ListPromotionsResponse], error)
	WatchPromotions(context.Context, *connect.Request[v1alpha1.WatchPromotionsRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchPromotionsResponse], error)
	GetPromotion(context.Context, *connect.Request[v1alpha1.GetPromotionRequest]) (*connect.Response[v1alpha1.GetPromotionResponse], error)
	WatchPromotion(context.Context, *connect.Request[v1alpha1.WatchPromotionRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchPromotionResponse], error)
	CreateProject(context.Context, *connect.Request[v1alpha1.CreateProjectRequest]) (*connect.Response[v1alpha1.CreateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1alpha1.ListProjectsRequest]) (*connect.Response[v1alpha1.ListProjectsResponse], error)
	DeleteProject(context.Context, *connect.Request[v1alpha1.DeleteProjectRequest]) (*connect.Response[v1alpha1.DeleteProjectResponse], error)
	QueryFreight(context.Context, *connect.Request[v1alpha1.QueryFreightRequest]) (*connect.Response[v1alpha1.QueryFreightResponse], error)
	DeleteFreight(context.Context, *connect.Request[v1alpha1.DeleteFreightRequest]) (*connect.Response[v1alpha1.DeleteFreightResponse], error)
	ApproveFreight(context.Context, *connect.Request[v1alpha1.ApproveFreightRequest]) (*connect.Response[v1alpha1.ApproveFreightResponse], error)
	UpdateFreightAlias(context.Context, *connect.Request[v1alpha1.UpdateFreightAliasRequest]) (*connect.Response[v1alpha1.UpdateFreightAliasResponse], error)
	ListWarehouses(context.Context, *connect.Request[v1alpha1.ListWarehousesRequest]) (*connect.Response[v1alpha1.ListWarehousesResponse], error)
	GetWarehouse(context.Context, *connect.Request[v1alpha1.GetWarehouseRequest]) (*connect.Response[v1alpha1.GetWarehouseResponse], error)
	WatchWarehouses(context.Context, *connect.Request[v1alpha1.WatchWarehousesRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchWarehousesResponse], error)
	CreateWarehouse(context.Context, *connect.Request[v1alpha1.CreateWarehouseRequest]) (*connect.Response[v1alpha1.CreateWarehouseResponse], error)
	UpdateWarehouse(context.Context, *connect.Request[v1alpha1.UpdateWarehouseRequest]) (*connect.Response[v1alpha1.UpdateWarehouseResponse], error)
	DeleteWarehouse(context.Context, *connect.Request[v1alpha1.DeleteWarehouseRequest]) (*connect.Response[v1alpha1.DeleteWarehouseResponse], error)
	RefreshWarehouse(context.Context, *connect.Request[v1alpha1.RefreshWarehouseRequest]) (*connect.Response[v1alpha1.RefreshWarehouseResponse], error)
}

// NewKargoServiceClient constructs a client for the akuity.io.kargo.service.v1alpha1.KargoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKargoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KargoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kargoServiceClient{
		getVersionInfo: connect.NewClient[v1alpha1.GetVersionInfoRequest, v1alpha1.GetVersionInfoResponse](
			httpClient,
			baseURL+KargoServiceGetVersionInfoProcedure,
			opts...,
		),
		getConfig: connect.NewClient[v1alpha1.GetConfigRequest, v1alpha1.GetConfigResponse](
			httpClient,
			baseURL+KargoServiceGetConfigProcedure,
			opts...,
		),
		getPublicConfig: connect.NewClient[v1alpha1.GetPublicConfigRequest, v1alpha1.GetPublicConfigResponse](
			httpClient,
			baseURL+KargoServiceGetPublicConfigProcedure,
			opts...,
		),
		adminLogin: connect.NewClient[v1alpha1.AdminLoginRequest, v1alpha1.AdminLoginResponse](
			httpClient,
			baseURL+KargoServiceAdminLoginProcedure,
			opts...,
		),
		createResource: connect.NewClient[v1alpha1.CreateResourceRequest, v1alpha1.CreateResourceResponse](
			httpClient,
			baseURL+KargoServiceCreateResourceProcedure,
			opts...,
		),
		createOrUpdateResource: connect.NewClient[v1alpha1.CreateOrUpdateResourceRequest, v1alpha1.CreateOrUpdateResourceResponse](
			httpClient,
			baseURL+KargoServiceCreateOrUpdateResourceProcedure,
			opts...,
		),
		updateResource: connect.NewClient[v1alpha1.UpdateResourceRequest, v1alpha1.UpdateResourceResponse](
			httpClient,
			baseURL+KargoServiceUpdateResourceProcedure,
			opts...,
		),
		deleteResource: connect.NewClient[v1alpha1.DeleteResourceRequest, v1alpha1.DeleteResourceResponse](
			httpClient,
			baseURL+KargoServiceDeleteResourceProcedure,
			opts...,
		),
		createStage: connect.NewClient[v1alpha1.CreateStageRequest, v1alpha1.CreateStageResponse](
			httpClient,
			baseURL+KargoServiceCreateStageProcedure,
			opts...,
		),
		listStages: connect.NewClient[v1alpha1.ListStagesRequest, v1alpha1.ListStagesResponse](
			httpClient,
			baseURL+KargoServiceListStagesProcedure,
			opts...,
		),
		getStage: connect.NewClient[v1alpha1.GetStageRequest, v1alpha1.GetStageResponse](
			httpClient,
			baseURL+KargoServiceGetStageProcedure,
			opts...,
		),
		watchStages: connect.NewClient[v1alpha1.WatchStagesRequest, v1alpha1.WatchStagesResponse](
			httpClient,
			baseURL+KargoServiceWatchStagesProcedure,
			opts...,
		),
		updateStage: connect.NewClient[v1alpha1.UpdateStageRequest, v1alpha1.UpdateStageResponse](
			httpClient,
			baseURL+KargoServiceUpdateStageProcedure,
			opts...,
		),
		deleteStage: connect.NewClient[v1alpha1.DeleteStageRequest, v1alpha1.DeleteStageResponse](
			httpClient,
			baseURL+KargoServiceDeleteStageProcedure,
			opts...,
		),
		promoteStage: connect.NewClient[v1alpha1.PromoteStageRequest, v1alpha1.PromoteStageResponse](
			httpClient,
			baseURL+KargoServicePromoteStageProcedure,
			opts...,
		),
		promoteSubscribers: connect.NewClient[v1alpha1.PromoteSubscribersRequest, v1alpha1.PromoteSubscribersResponse](
			httpClient,
			baseURL+KargoServicePromoteSubscribersProcedure,
			opts...,
		),
		refreshStage: connect.NewClient[v1alpha1.RefreshStageRequest, v1alpha1.RefreshStageResponse](
			httpClient,
			baseURL+KargoServiceRefreshStageProcedure,
			opts...,
		),
		listPromotions: connect.NewClient[v1alpha1.ListPromotionsRequest, v1alpha1.ListPromotionsResponse](
			httpClient,
			baseURL+KargoServiceListPromotionsProcedure,
			opts...,
		),
		watchPromotions: connect.NewClient[v1alpha1.WatchPromotionsRequest, v1alpha1.WatchPromotionsResponse](
			httpClient,
			baseURL+KargoServiceWatchPromotionsProcedure,
			opts...,
		),
		getPromotion: connect.NewClient[v1alpha1.GetPromotionRequest, v1alpha1.GetPromotionResponse](
			httpClient,
			baseURL+KargoServiceGetPromotionProcedure,
			opts...,
		),
		watchPromotion: connect.NewClient[v1alpha1.WatchPromotionRequest, v1alpha1.WatchPromotionResponse](
			httpClient,
			baseURL+KargoServiceWatchPromotionProcedure,
			opts...,
		),
		createProject: connect.NewClient[v1alpha1.CreateProjectRequest, v1alpha1.CreateProjectResponse](
			httpClient,
			baseURL+KargoServiceCreateProjectProcedure,
			opts...,
		),
		listProjects: connect.NewClient[v1alpha1.ListProjectsRequest, v1alpha1.ListProjectsResponse](
			httpClient,
			baseURL+KargoServiceListProjectsProcedure,
			opts...,
		),
		deleteProject: connect.NewClient[v1alpha1.DeleteProjectRequest, v1alpha1.DeleteProjectResponse](
			httpClient,
			baseURL+KargoServiceDeleteProjectProcedure,
			opts...,
		),
		queryFreight: connect.NewClient[v1alpha1.QueryFreightRequest, v1alpha1.QueryFreightResponse](
			httpClient,
			baseURL+KargoServiceQueryFreightProcedure,
			opts...,
		),
		deleteFreight: connect.NewClient[v1alpha1.DeleteFreightRequest, v1alpha1.DeleteFreightResponse](
			httpClient,
			baseURL+KargoServiceDeleteFreightProcedure,
			opts...,
		),
		approveFreight: connect.NewClient[v1alpha1.ApproveFreightRequest, v1alpha1.ApproveFreightResponse](
			httpClient,
			baseURL+KargoServiceApproveFreightProcedure,
			opts...,
		),
		updateFreightAlias: connect.NewClient[v1alpha1.UpdateFreightAliasRequest, v1alpha1.UpdateFreightAliasResponse](
			httpClient,
			baseURL+KargoServiceUpdateFreightAliasProcedure,
			opts...,
		),
		listWarehouses: connect.NewClient[v1alpha1.ListWarehousesRequest, v1alpha1.ListWarehousesResponse](
			httpClient,
			baseURL+KargoServiceListWarehousesProcedure,
			opts...,
		),
		getWarehouse: connect.NewClient[v1alpha1.GetWarehouseRequest, v1alpha1.GetWarehouseResponse](
			httpClient,
			baseURL+KargoServiceGetWarehouseProcedure,
			opts...,
		),
		watchWarehouses: connect.NewClient[v1alpha1.WatchWarehousesRequest, v1alpha1.WatchWarehousesResponse](
			httpClient,
			baseURL+KargoServiceWatchWarehousesProcedure,
			opts...,
		),
		createWarehouse: connect.NewClient[v1alpha1.CreateWarehouseRequest, v1alpha1.CreateWarehouseResponse](
			httpClient,
			baseURL+KargoServiceCreateWarehouseProcedure,
			opts...,
		),
		updateWarehouse: connect.NewClient[v1alpha1.UpdateWarehouseRequest, v1alpha1.UpdateWarehouseResponse](
			httpClient,
			baseURL+KargoServiceUpdateWarehouseProcedure,
			opts...,
		),
		deleteWarehouse: connect.NewClient[v1alpha1.DeleteWarehouseRequest, v1alpha1.DeleteWarehouseResponse](
			httpClient,
			baseURL+KargoServiceDeleteWarehouseProcedure,
			opts...,
		),
		refreshWarehouse: connect.NewClient[v1alpha1.RefreshWarehouseRequest, v1alpha1.RefreshWarehouseResponse](
			httpClient,
			baseURL+KargoServiceRefreshWarehouseProcedure,
			opts...,
		),
	}
}

// kargoServiceClient implements KargoServiceClient.
type kargoServiceClient struct {
	getVersionInfo         *connect.Client[v1alpha1.GetVersionInfoRequest, v1alpha1.GetVersionInfoResponse]
	getConfig              *connect.Client[v1alpha1.GetConfigRequest, v1alpha1.GetConfigResponse]
	getPublicConfig        *connect.Client[v1alpha1.GetPublicConfigRequest, v1alpha1.GetPublicConfigResponse]
	adminLogin             *connect.Client[v1alpha1.AdminLoginRequest, v1alpha1.AdminLoginResponse]
	createResource         *connect.Client[v1alpha1.CreateResourceRequest, v1alpha1.CreateResourceResponse]
	createOrUpdateResource *connect.Client[v1alpha1.CreateOrUpdateResourceRequest, v1alpha1.CreateOrUpdateResourceResponse]
	updateResource         *connect.Client[v1alpha1.UpdateResourceRequest, v1alpha1.UpdateResourceResponse]
	deleteResource         *connect.Client[v1alpha1.DeleteResourceRequest, v1alpha1.DeleteResourceResponse]
	createStage            *connect.Client[v1alpha1.CreateStageRequest, v1alpha1.CreateStageResponse]
	listStages             *connect.Client[v1alpha1.ListStagesRequest, v1alpha1.ListStagesResponse]
	getStage               *connect.Client[v1alpha1.GetStageRequest, v1alpha1.GetStageResponse]
	watchStages            *connect.Client[v1alpha1.WatchStagesRequest, v1alpha1.WatchStagesResponse]
	updateStage            *connect.Client[v1alpha1.UpdateStageRequest, v1alpha1.UpdateStageResponse]
	deleteStage            *connect.Client[v1alpha1.DeleteStageRequest, v1alpha1.DeleteStageResponse]
	promoteStage           *connect.Client[v1alpha1.PromoteStageRequest, v1alpha1.PromoteStageResponse]
	promoteSubscribers     *connect.Client[v1alpha1.PromoteSubscribersRequest, v1alpha1.PromoteSubscribersResponse]
	refreshStage           *connect.Client[v1alpha1.RefreshStageRequest, v1alpha1.RefreshStageResponse]
	listPromotions         *connect.Client[v1alpha1.ListPromotionsRequest, v1alpha1.ListPromotionsResponse]
	watchPromotions        *connect.Client[v1alpha1.WatchPromotionsRequest, v1alpha1.WatchPromotionsResponse]
	getPromotion           *connect.Client[v1alpha1.GetPromotionRequest, v1alpha1.GetPromotionResponse]
	watchPromotion         *connect.Client[v1alpha1.WatchPromotionRequest, v1alpha1.WatchPromotionResponse]
	createProject          *connect.Client[v1alpha1.CreateProjectRequest, v1alpha1.CreateProjectResponse]
	listProjects           *connect.Client[v1alpha1.ListProjectsRequest, v1alpha1.ListProjectsResponse]
	deleteProject          *connect.Client[v1alpha1.DeleteProjectRequest, v1alpha1.DeleteProjectResponse]
	queryFreight           *connect.Client[v1alpha1.QueryFreightRequest, v1alpha1.QueryFreightResponse]
	deleteFreight          *connect.Client[v1alpha1.DeleteFreightRequest, v1alpha1.DeleteFreightResponse]
	approveFreight         *connect.Client[v1alpha1.ApproveFreightRequest, v1alpha1.ApproveFreightResponse]
	updateFreightAlias     *connect.Client[v1alpha1.UpdateFreightAliasRequest, v1alpha1.UpdateFreightAliasResponse]
	listWarehouses         *connect.Client[v1alpha1.ListWarehousesRequest, v1alpha1.ListWarehousesResponse]
	getWarehouse           *connect.Client[v1alpha1.GetWarehouseRequest, v1alpha1.GetWarehouseResponse]
	watchWarehouses        *connect.Client[v1alpha1.WatchWarehousesRequest, v1alpha1.WatchWarehousesResponse]
	createWarehouse        *connect.Client[v1alpha1.CreateWarehouseRequest, v1alpha1.CreateWarehouseResponse]
	updateWarehouse        *connect.Client[v1alpha1.UpdateWarehouseRequest, v1alpha1.UpdateWarehouseResponse]
	deleteWarehouse        *connect.Client[v1alpha1.DeleteWarehouseRequest, v1alpha1.DeleteWarehouseResponse]
	refreshWarehouse       *connect.Client[v1alpha1.RefreshWarehouseRequest, v1alpha1.RefreshWarehouseResponse]
}

// GetVersionInfo calls akuity.io.kargo.service.v1alpha1.KargoService.GetVersionInfo.
func (c *kargoServiceClient) GetVersionInfo(ctx context.Context, req *connect.Request[v1alpha1.GetVersionInfoRequest]) (*connect.Response[v1alpha1.GetVersionInfoResponse], error) {
	return c.getVersionInfo.CallUnary(ctx, req)
}

// GetConfig calls akuity.io.kargo.service.v1alpha1.KargoService.GetConfig.
func (c *kargoServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1alpha1.GetConfigRequest]) (*connect.Response[v1alpha1.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetPublicConfig calls akuity.io.kargo.service.v1alpha1.KargoService.GetPublicConfig.
func (c *kargoServiceClient) GetPublicConfig(ctx context.Context, req *connect.Request[v1alpha1.GetPublicConfigRequest]) (*connect.Response[v1alpha1.GetPublicConfigResponse], error) {
	return c.getPublicConfig.CallUnary(ctx, req)
}

// AdminLogin calls akuity.io.kargo.service.v1alpha1.KargoService.AdminLogin.
func (c *kargoServiceClient) AdminLogin(ctx context.Context, req *connect.Request[v1alpha1.AdminLoginRequest]) (*connect.Response[v1alpha1.AdminLoginResponse], error) {
	return c.adminLogin.CallUnary(ctx, req)
}

// CreateResource calls akuity.io.kargo.service.v1alpha1.KargoService.CreateResource.
func (c *kargoServiceClient) CreateResource(ctx context.Context, req *connect.Request[v1alpha1.CreateResourceRequest]) (*connect.Response[v1alpha1.CreateResourceResponse], error) {
	return c.createResource.CallUnary(ctx, req)
}

// CreateOrUpdateResource calls
// akuity.io.kargo.service.v1alpha1.KargoService.CreateOrUpdateResource.
func (c *kargoServiceClient) CreateOrUpdateResource(ctx context.Context, req *connect.Request[v1alpha1.CreateOrUpdateResourceRequest]) (*connect.Response[v1alpha1.CreateOrUpdateResourceResponse], error) {
	return c.createOrUpdateResource.CallUnary(ctx, req)
}

// UpdateResource calls akuity.io.kargo.service.v1alpha1.KargoService.UpdateResource.
func (c *kargoServiceClient) UpdateResource(ctx context.Context, req *connect.Request[v1alpha1.UpdateResourceRequest]) (*connect.Response[v1alpha1.UpdateResourceResponse], error) {
	return c.updateResource.CallUnary(ctx, req)
}

// DeleteResource calls akuity.io.kargo.service.v1alpha1.KargoService.DeleteResource.
func (c *kargoServiceClient) DeleteResource(ctx context.Context, req *connect.Request[v1alpha1.DeleteResourceRequest]) (*connect.Response[v1alpha1.DeleteResourceResponse], error) {
	return c.deleteResource.CallUnary(ctx, req)
}

// CreateStage calls akuity.io.kargo.service.v1alpha1.KargoService.CreateStage.
func (c *kargoServiceClient) CreateStage(ctx context.Context, req *connect.Request[v1alpha1.CreateStageRequest]) (*connect.Response[v1alpha1.CreateStageResponse], error) {
	return c.createStage.CallUnary(ctx, req)
}

// ListStages calls akuity.io.kargo.service.v1alpha1.KargoService.ListStages.
func (c *kargoServiceClient) ListStages(ctx context.Context, req *connect.Request[v1alpha1.ListStagesRequest]) (*connect.Response[v1alpha1.ListStagesResponse], error) {
	return c.listStages.CallUnary(ctx, req)
}

// GetStage calls akuity.io.kargo.service.v1alpha1.KargoService.GetStage.
func (c *kargoServiceClient) GetStage(ctx context.Context, req *connect.Request[v1alpha1.GetStageRequest]) (*connect.Response[v1alpha1.GetStageResponse], error) {
	return c.getStage.CallUnary(ctx, req)
}

// WatchStages calls akuity.io.kargo.service.v1alpha1.KargoService.WatchStages.
func (c *kargoServiceClient) WatchStages(ctx context.Context, req *connect.Request[v1alpha1.WatchStagesRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchStagesResponse], error) {
	return c.watchStages.CallServerStream(ctx, req)
}

// UpdateStage calls akuity.io.kargo.service.v1alpha1.KargoService.UpdateStage.
func (c *kargoServiceClient) UpdateStage(ctx context.Context, req *connect.Request[v1alpha1.UpdateStageRequest]) (*connect.Response[v1alpha1.UpdateStageResponse], error) {
	return c.updateStage.CallUnary(ctx, req)
}

// DeleteStage calls akuity.io.kargo.service.v1alpha1.KargoService.DeleteStage.
func (c *kargoServiceClient) DeleteStage(ctx context.Context, req *connect.Request[v1alpha1.DeleteStageRequest]) (*connect.Response[v1alpha1.DeleteStageResponse], error) {
	return c.deleteStage.CallUnary(ctx, req)
}

// PromoteStage calls akuity.io.kargo.service.v1alpha1.KargoService.PromoteStage.
func (c *kargoServiceClient) PromoteStage(ctx context.Context, req *connect.Request[v1alpha1.PromoteStageRequest]) (*connect.Response[v1alpha1.PromoteStageResponse], error) {
	return c.promoteStage.CallUnary(ctx, req)
}

// PromoteSubscribers calls akuity.io.kargo.service.v1alpha1.KargoService.PromoteSubscribers.
func (c *kargoServiceClient) PromoteSubscribers(ctx context.Context, req *connect.Request[v1alpha1.PromoteSubscribersRequest]) (*connect.Response[v1alpha1.PromoteSubscribersResponse], error) {
	return c.promoteSubscribers.CallUnary(ctx, req)
}

// RefreshStage calls akuity.io.kargo.service.v1alpha1.KargoService.RefreshStage.
func (c *kargoServiceClient) RefreshStage(ctx context.Context, req *connect.Request[v1alpha1.RefreshStageRequest]) (*connect.Response[v1alpha1.RefreshStageResponse], error) {
	return c.refreshStage.CallUnary(ctx, req)
}

// ListPromotions calls akuity.io.kargo.service.v1alpha1.KargoService.ListPromotions.
func (c *kargoServiceClient) ListPromotions(ctx context.Context, req *connect.Request[v1alpha1.ListPromotionsRequest]) (*connect.Response[v1alpha1.ListPromotionsResponse], error) {
	return c.listPromotions.CallUnary(ctx, req)
}

// WatchPromotions calls akuity.io.kargo.service.v1alpha1.KargoService.WatchPromotions.
func (c *kargoServiceClient) WatchPromotions(ctx context.Context, req *connect.Request[v1alpha1.WatchPromotionsRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchPromotionsResponse], error) {
	return c.watchPromotions.CallServerStream(ctx, req)
}

// GetPromotion calls akuity.io.kargo.service.v1alpha1.KargoService.GetPromotion.
func (c *kargoServiceClient) GetPromotion(ctx context.Context, req *connect.Request[v1alpha1.GetPromotionRequest]) (*connect.Response[v1alpha1.GetPromotionResponse], error) {
	return c.getPromotion.CallUnary(ctx, req)
}

// WatchPromotion calls akuity.io.kargo.service.v1alpha1.KargoService.WatchPromotion.
func (c *kargoServiceClient) WatchPromotion(ctx context.Context, req *connect.Request[v1alpha1.WatchPromotionRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchPromotionResponse], error) {
	return c.watchPromotion.CallServerStream(ctx, req)
}

// CreateProject calls akuity.io.kargo.service.v1alpha1.KargoService.CreateProject.
func (c *kargoServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1alpha1.CreateProjectRequest]) (*connect.Response[v1alpha1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ListProjects calls akuity.io.kargo.service.v1alpha1.KargoService.ListProjects.
func (c *kargoServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1alpha1.ListProjectsRequest]) (*connect.Response[v1alpha1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// DeleteProject calls akuity.io.kargo.service.v1alpha1.KargoService.DeleteProject.
func (c *kargoServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1alpha1.DeleteProjectRequest]) (*connect.Response[v1alpha1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// QueryFreight calls akuity.io.kargo.service.v1alpha1.KargoService.QueryFreight.
func (c *kargoServiceClient) QueryFreight(ctx context.Context, req *connect.Request[v1alpha1.QueryFreightRequest]) (*connect.Response[v1alpha1.QueryFreightResponse], error) {
	return c.queryFreight.CallUnary(ctx, req)
}

// DeleteFreight calls akuity.io.kargo.service.v1alpha1.KargoService.DeleteFreight.
func (c *kargoServiceClient) DeleteFreight(ctx context.Context, req *connect.Request[v1alpha1.DeleteFreightRequest]) (*connect.Response[v1alpha1.DeleteFreightResponse], error) {
	return c.deleteFreight.CallUnary(ctx, req)
}

// ApproveFreight calls akuity.io.kargo.service.v1alpha1.KargoService.ApproveFreight.
func (c *kargoServiceClient) ApproveFreight(ctx context.Context, req *connect.Request[v1alpha1.ApproveFreightRequest]) (*connect.Response[v1alpha1.ApproveFreightResponse], error) {
	return c.approveFreight.CallUnary(ctx, req)
}

// UpdateFreightAlias calls akuity.io.kargo.service.v1alpha1.KargoService.UpdateFreightAlias.
func (c *kargoServiceClient) UpdateFreightAlias(ctx context.Context, req *connect.Request[v1alpha1.UpdateFreightAliasRequest]) (*connect.Response[v1alpha1.UpdateFreightAliasResponse], error) {
	return c.updateFreightAlias.CallUnary(ctx, req)
}

// ListWarehouses calls akuity.io.kargo.service.v1alpha1.KargoService.ListWarehouses.
func (c *kargoServiceClient) ListWarehouses(ctx context.Context, req *connect.Request[v1alpha1.ListWarehousesRequest]) (*connect.Response[v1alpha1.ListWarehousesResponse], error) {
	return c.listWarehouses.CallUnary(ctx, req)
}

// GetWarehouse calls akuity.io.kargo.service.v1alpha1.KargoService.GetWarehouse.
func (c *kargoServiceClient) GetWarehouse(ctx context.Context, req *connect.Request[v1alpha1.GetWarehouseRequest]) (*connect.Response[v1alpha1.GetWarehouseResponse], error) {
	return c.getWarehouse.CallUnary(ctx, req)
}

// WatchWarehouses calls akuity.io.kargo.service.v1alpha1.KargoService.WatchWarehouses.
func (c *kargoServiceClient) WatchWarehouses(ctx context.Context, req *connect.Request[v1alpha1.WatchWarehousesRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchWarehousesResponse], error) {
	return c.watchWarehouses.CallServerStream(ctx, req)
}

// CreateWarehouse calls akuity.io.kargo.service.v1alpha1.KargoService.CreateWarehouse.
func (c *kargoServiceClient) CreateWarehouse(ctx context.Context, req *connect.Request[v1alpha1.CreateWarehouseRequest]) (*connect.Response[v1alpha1.CreateWarehouseResponse], error) {
	return c.createWarehouse.CallUnary(ctx, req)
}

// UpdateWarehouse calls akuity.io.kargo.service.v1alpha1.KargoService.UpdateWarehouse.
func (c *kargoServiceClient) UpdateWarehouse(ctx context.Context, req *connect.Request[v1alpha1.UpdateWarehouseRequest]) (*connect.Response[v1alpha1.UpdateWarehouseResponse], error) {
	return c.updateWarehouse.CallUnary(ctx, req)
}

// DeleteWarehouse calls akuity.io.kargo.service.v1alpha1.KargoService.DeleteWarehouse.
func (c *kargoServiceClient) DeleteWarehouse(ctx context.Context, req *connect.Request[v1alpha1.DeleteWarehouseRequest]) (*connect.Response[v1alpha1.DeleteWarehouseResponse], error) {
	return c.deleteWarehouse.CallUnary(ctx, req)
}

// RefreshWarehouse calls akuity.io.kargo.service.v1alpha1.KargoService.RefreshWarehouse.
func (c *kargoServiceClient) RefreshWarehouse(ctx context.Context, req *connect.Request[v1alpha1.RefreshWarehouseRequest]) (*connect.Response[v1alpha1.RefreshWarehouseResponse], error) {
	return c.refreshWarehouse.CallUnary(ctx, req)
}

// KargoServiceHandler is an implementation of the akuity.io.kargo.service.v1alpha1.KargoService
// service.
type KargoServiceHandler interface {
	GetVersionInfo(context.Context, *connect.Request[v1alpha1.GetVersionInfoRequest]) (*connect.Response[v1alpha1.GetVersionInfoResponse], error)
	GetConfig(context.Context, *connect.Request[v1alpha1.GetConfigRequest]) (*connect.Response[v1alpha1.GetConfigResponse], error)
	GetPublicConfig(context.Context, *connect.Request[v1alpha1.GetPublicConfigRequest]) (*connect.Response[v1alpha1.GetPublicConfigResponse], error)
	AdminLogin(context.Context, *connect.Request[v1alpha1.AdminLoginRequest]) (*connect.Response[v1alpha1.AdminLoginResponse], error)
	// TODO(devholic): Add ApplyResource API
	// rpc ApplyResource(ApplyResourceRequest) returns (ApplyResourceRequest);
	CreateResource(context.Context, *connect.Request[v1alpha1.CreateResourceRequest]) (*connect.Response[v1alpha1.CreateResourceResponse], error)
	CreateOrUpdateResource(context.Context, *connect.Request[v1alpha1.CreateOrUpdateResourceRequest]) (*connect.Response[v1alpha1.CreateOrUpdateResourceResponse], error)
	UpdateResource(context.Context, *connect.Request[v1alpha1.UpdateResourceRequest]) (*connect.Response[v1alpha1.UpdateResourceResponse], error)
	DeleteResource(context.Context, *connect.Request[v1alpha1.DeleteResourceRequest]) (*connect.Response[v1alpha1.DeleteResourceResponse], error)
	CreateStage(context.Context, *connect.Request[v1alpha1.CreateStageRequest]) (*connect.Response[v1alpha1.CreateStageResponse], error)
	ListStages(context.Context, *connect.Request[v1alpha1.ListStagesRequest]) (*connect.Response[v1alpha1.ListStagesResponse], error)
	GetStage(context.Context, *connect.Request[v1alpha1.GetStageRequest]) (*connect.Response[v1alpha1.GetStageResponse], error)
	WatchStages(context.Context, *connect.Request[v1alpha1.WatchStagesRequest], *connect.ServerStream[v1alpha1.WatchStagesResponse]) error
	UpdateStage(context.Context, *connect.Request[v1alpha1.UpdateStageRequest]) (*connect.Response[v1alpha1.UpdateStageResponse], error)
	DeleteStage(context.Context, *connect.Request[v1alpha1.DeleteStageRequest]) (*connect.Response[v1alpha1.DeleteStageResponse], error)
	PromoteStage(context.Context, *connect.Request[v1alpha1.PromoteStageRequest]) (*connect.Response[v1alpha1.PromoteStageResponse], error)
	PromoteSubscribers(context.Context, *connect.Request[v1alpha1.PromoteSubscribersRequest]) (*connect.Response[v1alpha1.PromoteSubscribersResponse], error)
	RefreshStage(context.Context, *connect.Request[v1alpha1.RefreshStageRequest]) (*connect.Response[v1alpha1.RefreshStageResponse], error)
	// Promotion APIs
	ListPromotions(context.Context, *connect.Request[v1alpha1.ListPromotionsRequest]) (*connect.Response[v1alpha1.ListPromotionsResponse], error)
	WatchPromotions(context.Context, *connect.Request[v1alpha1.WatchPromotionsRequest], *connect.ServerStream[v1alpha1.WatchPromotionsResponse]) error
	GetPromotion(context.Context, *connect.Request[v1alpha1.GetPromotionRequest]) (*connect.Response[v1alpha1.GetPromotionResponse], error)
	WatchPromotion(context.Context, *connect.Request[v1alpha1.WatchPromotionRequest], *connect.ServerStream[v1alpha1.WatchPromotionResponse]) error
	CreateProject(context.Context, *connect.Request[v1alpha1.CreateProjectRequest]) (*connect.Response[v1alpha1.CreateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1alpha1.ListProjectsRequest]) (*connect.Response[v1alpha1.ListProjectsResponse], error)
	DeleteProject(context.Context, *connect.Request[v1alpha1.DeleteProjectRequest]) (*connect.Response[v1alpha1.DeleteProjectResponse], error)
	QueryFreight(context.Context, *connect.Request[v1alpha1.QueryFreightRequest]) (*connect.Response[v1alpha1.QueryFreightResponse], error)
	DeleteFreight(context.Context, *connect.Request[v1alpha1.DeleteFreightRequest]) (*connect.Response[v1alpha1.DeleteFreightResponse], error)
	ApproveFreight(context.Context, *connect.Request[v1alpha1.ApproveFreightRequest]) (*connect.Response[v1alpha1.ApproveFreightResponse], error)
	UpdateFreightAlias(context.Context, *connect.Request[v1alpha1.UpdateFreightAliasRequest]) (*connect.Response[v1alpha1.UpdateFreightAliasResponse], error)
	ListWarehouses(context.Context, *connect.Request[v1alpha1.ListWarehousesRequest]) (*connect.Response[v1alpha1.ListWarehousesResponse], error)
	GetWarehouse(context.Context, *connect.Request[v1alpha1.GetWarehouseRequest]) (*connect.Response[v1alpha1.GetWarehouseResponse], error)
	WatchWarehouses(context.Context, *connect.Request[v1alpha1.WatchWarehousesRequest], *connect.ServerStream[v1alpha1.WatchWarehousesResponse]) error
	CreateWarehouse(context.Context, *connect.Request[v1alpha1.CreateWarehouseRequest]) (*connect.Response[v1alpha1.CreateWarehouseResponse], error)
	UpdateWarehouse(context.Context, *connect.Request[v1alpha1.UpdateWarehouseRequest]) (*connect.Response[v1alpha1.UpdateWarehouseResponse], error)
	DeleteWarehouse(context.Context, *connect.Request[v1alpha1.DeleteWarehouseRequest]) (*connect.Response[v1alpha1.DeleteWarehouseResponse], error)
	RefreshWarehouse(context.Context, *connect.Request[v1alpha1.RefreshWarehouseRequest]) (*connect.Response[v1alpha1.RefreshWarehouseResponse], error)
}

// NewKargoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKargoServiceHandler(svc KargoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kargoServiceGetVersionInfoHandler := connect.NewUnaryHandler(
		KargoServiceGetVersionInfoProcedure,
		svc.GetVersionInfo,
		opts...,
	)
	kargoServiceGetConfigHandler := connect.NewUnaryHandler(
		KargoServiceGetConfigProcedure,
		svc.GetConfig,
		opts...,
	)
	kargoServiceGetPublicConfigHandler := connect.NewUnaryHandler(
		KargoServiceGetPublicConfigProcedure,
		svc.GetPublicConfig,
		opts...,
	)
	kargoServiceAdminLoginHandler := connect.NewUnaryHandler(
		KargoServiceAdminLoginProcedure,
		svc.AdminLogin,
		opts...,
	)
	kargoServiceCreateResourceHandler := connect.NewUnaryHandler(
		KargoServiceCreateResourceProcedure,
		svc.CreateResource,
		opts...,
	)
	kargoServiceCreateOrUpdateResourceHandler := connect.NewUnaryHandler(
		KargoServiceCreateOrUpdateResourceProcedure,
		svc.CreateOrUpdateResource,
		opts...,
	)
	kargoServiceUpdateResourceHandler := connect.NewUnaryHandler(
		KargoServiceUpdateResourceProcedure,
		svc.UpdateResource,
		opts...,
	)
	kargoServiceDeleteResourceHandler := connect.NewUnaryHandler(
		KargoServiceDeleteResourceProcedure,
		svc.DeleteResource,
		opts...,
	)
	kargoServiceCreateStageHandler := connect.NewUnaryHandler(
		KargoServiceCreateStageProcedure,
		svc.CreateStage,
		opts...,
	)
	kargoServiceListStagesHandler := connect.NewUnaryHandler(
		KargoServiceListStagesProcedure,
		svc.ListStages,
		opts...,
	)
	kargoServiceGetStageHandler := connect.NewUnaryHandler(
		KargoServiceGetStageProcedure,
		svc.GetStage,
		opts...,
	)
	kargoServiceWatchStagesHandler := connect.NewServerStreamHandler(
		KargoServiceWatchStagesProcedure,
		svc.WatchStages,
		opts...,
	)
	kargoServiceUpdateStageHandler := connect.NewUnaryHandler(
		KargoServiceUpdateStageProcedure,
		svc.UpdateStage,
		opts...,
	)
	kargoServiceDeleteStageHandler := connect.NewUnaryHandler(
		KargoServiceDeleteStageProcedure,
		svc.DeleteStage,
		opts...,
	)
	kargoServicePromoteStageHandler := connect.NewUnaryHandler(
		KargoServicePromoteStageProcedure,
		svc.PromoteStage,
		opts...,
	)
	kargoServicePromoteSubscribersHandler := connect.NewUnaryHandler(
		KargoServicePromoteSubscribersProcedure,
		svc.PromoteSubscribers,
		opts...,
	)
	kargoServiceRefreshStageHandler := connect.NewUnaryHandler(
		KargoServiceRefreshStageProcedure,
		svc.RefreshStage,
		opts...,
	)
	kargoServiceListPromotionsHandler := connect.NewUnaryHandler(
		KargoServiceListPromotionsProcedure,
		svc.ListPromotions,
		opts...,
	)
	kargoServiceWatchPromotionsHandler := connect.NewServerStreamHandler(
		KargoServiceWatchPromotionsProcedure,
		svc.WatchPromotions,
		opts...,
	)
	kargoServiceGetPromotionHandler := connect.NewUnaryHandler(
		KargoServiceGetPromotionProcedure,
		svc.GetPromotion,
		opts...,
	)
	kargoServiceWatchPromotionHandler := connect.NewServerStreamHandler(
		KargoServiceWatchPromotionProcedure,
		svc.WatchPromotion,
		opts...,
	)
	kargoServiceCreateProjectHandler := connect.NewUnaryHandler(
		KargoServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	kargoServiceListProjectsHandler := connect.NewUnaryHandler(
		KargoServiceListProjectsProcedure,
		svc.ListProjects,
		opts...,
	)
	kargoServiceDeleteProjectHandler := connect.NewUnaryHandler(
		KargoServiceDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	kargoServiceQueryFreightHandler := connect.NewUnaryHandler(
		KargoServiceQueryFreightProcedure,
		svc.QueryFreight,
		opts...,
	)
	kargoServiceDeleteFreightHandler := connect.NewUnaryHandler(
		KargoServiceDeleteFreightProcedure,
		svc.DeleteFreight,
		opts...,
	)
	kargoServiceApproveFreightHandler := connect.NewUnaryHandler(
		KargoServiceApproveFreightProcedure,
		svc.ApproveFreight,
		opts...,
	)
	kargoServiceUpdateFreightAliasHandler := connect.NewUnaryHandler(
		KargoServiceUpdateFreightAliasProcedure,
		svc.UpdateFreightAlias,
		opts...,
	)
	kargoServiceListWarehousesHandler := connect.NewUnaryHandler(
		KargoServiceListWarehousesProcedure,
		svc.ListWarehouses,
		opts...,
	)
	kargoServiceGetWarehouseHandler := connect.NewUnaryHandler(
		KargoServiceGetWarehouseProcedure,
		svc.GetWarehouse,
		opts...,
	)
	kargoServiceWatchWarehousesHandler := connect.NewServerStreamHandler(
		KargoServiceWatchWarehousesProcedure,
		svc.WatchWarehouses,
		opts...,
	)
	kargoServiceCreateWarehouseHandler := connect.NewUnaryHandler(
		KargoServiceCreateWarehouseProcedure,
		svc.CreateWarehouse,
		opts...,
	)
	kargoServiceUpdateWarehouseHandler := connect.NewUnaryHandler(
		KargoServiceUpdateWarehouseProcedure,
		svc.UpdateWarehouse,
		opts...,
	)
	kargoServiceDeleteWarehouseHandler := connect.NewUnaryHandler(
		KargoServiceDeleteWarehouseProcedure,
		svc.DeleteWarehouse,
		opts...,
	)
	kargoServiceRefreshWarehouseHandler := connect.NewUnaryHandler(
		KargoServiceRefreshWarehouseProcedure,
		svc.RefreshWarehouse,
		opts...,
	)
	return "/akuity.io.kargo.service.v1alpha1.KargoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KargoServiceGetVersionInfoProcedure:
			kargoServiceGetVersionInfoHandler.ServeHTTP(w, r)
		case KargoServiceGetConfigProcedure:
			kargoServiceGetConfigHandler.ServeHTTP(w, r)
		case KargoServiceGetPublicConfigProcedure:
			kargoServiceGetPublicConfigHandler.ServeHTTP(w, r)
		case KargoServiceAdminLoginProcedure:
			kargoServiceAdminLoginHandler.ServeHTTP(w, r)
		case KargoServiceCreateResourceProcedure:
			kargoServiceCreateResourceHandler.ServeHTTP(w, r)
		case KargoServiceCreateOrUpdateResourceProcedure:
			kargoServiceCreateOrUpdateResourceHandler.ServeHTTP(w, r)
		case KargoServiceUpdateResourceProcedure:
			kargoServiceUpdateResourceHandler.ServeHTTP(w, r)
		case KargoServiceDeleteResourceProcedure:
			kargoServiceDeleteResourceHandler.ServeHTTP(w, r)
		case KargoServiceCreateStageProcedure:
			kargoServiceCreateStageHandler.ServeHTTP(w, r)
		case KargoServiceListStagesProcedure:
			kargoServiceListStagesHandler.ServeHTTP(w, r)
		case KargoServiceGetStageProcedure:
			kargoServiceGetStageHandler.ServeHTTP(w, r)
		case KargoServiceWatchStagesProcedure:
			kargoServiceWatchStagesHandler.ServeHTTP(w, r)
		case KargoServiceUpdateStageProcedure:
			kargoServiceUpdateStageHandler.ServeHTTP(w, r)
		case KargoServiceDeleteStageProcedure:
			kargoServiceDeleteStageHandler.ServeHTTP(w, r)
		case KargoServicePromoteStageProcedure:
			kargoServicePromoteStageHandler.ServeHTTP(w, r)
		case KargoServicePromoteSubscribersProcedure:
			kargoServicePromoteSubscribersHandler.ServeHTTP(w, r)
		case KargoServiceRefreshStageProcedure:
			kargoServiceRefreshStageHandler.ServeHTTP(w, r)
		case KargoServiceListPromotionsProcedure:
			kargoServiceListPromotionsHandler.ServeHTTP(w, r)
		case KargoServiceWatchPromotionsProcedure:
			kargoServiceWatchPromotionsHandler.ServeHTTP(w, r)
		case KargoServiceGetPromotionProcedure:
			kargoServiceGetPromotionHandler.ServeHTTP(w, r)
		case KargoServiceWatchPromotionProcedure:
			kargoServiceWatchPromotionHandler.ServeHTTP(w, r)
		case KargoServiceCreateProjectProcedure:
			kargoServiceCreateProjectHandler.ServeHTTP(w, r)
		case KargoServiceListProjectsProcedure:
			kargoServiceListProjectsHandler.ServeHTTP(w, r)
		case KargoServiceDeleteProjectProcedure:
			kargoServiceDeleteProjectHandler.ServeHTTP(w, r)
		case KargoServiceQueryFreightProcedure:
			kargoServiceQueryFreightHandler.ServeHTTP(w, r)
		case KargoServiceDeleteFreightProcedure:
			kargoServiceDeleteFreightHandler.ServeHTTP(w, r)
		case KargoServiceApproveFreightProcedure:
			kargoServiceApproveFreightHandler.ServeHTTP(w, r)
		case KargoServiceUpdateFreightAliasProcedure:
			kargoServiceUpdateFreightAliasHandler.ServeHTTP(w, r)
		case KargoServiceListWarehousesProcedure:
			kargoServiceListWarehousesHandler.ServeHTTP(w, r)
		case KargoServiceGetWarehouseProcedure:
			kargoServiceGetWarehouseHandler.ServeHTTP(w, r)
		case KargoServiceWatchWarehousesProcedure:
			kargoServiceWatchWarehousesHandler.ServeHTTP(w, r)
		case KargoServiceCreateWarehouseProcedure:
			kargoServiceCreateWarehouseHandler.ServeHTTP(w, r)
		case KargoServiceUpdateWarehouseProcedure:
			kargoServiceUpdateWarehouseHandler.ServeHTTP(w, r)
		case KargoServiceDeleteWarehouseProcedure:
			kargoServiceDeleteWarehouseHandler.ServeHTTP(w, r)
		case KargoServiceRefreshWarehouseProcedure:
			kargoServiceRefreshWarehouseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKargoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKargoServiceHandler struct{}

func (UnimplementedKargoServiceHandler) GetVersionInfo(context.Context, *connect.Request[v1alpha1.GetVersionInfoRequest]) (*connect.Response[v1alpha1.GetVersionInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetVersionInfo is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetConfig(context.Context, *connect.Request[v1alpha1.GetConfigRequest]) (*connect.Response[v1alpha1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetConfig is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetPublicConfig(context.Context, *connect.Request[v1alpha1.GetPublicConfigRequest]) (*connect.Response[v1alpha1.GetPublicConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetPublicConfig is not implemented"))
}

func (UnimplementedKargoServiceHandler) AdminLogin(context.Context, *connect.Request[v1alpha1.AdminLoginRequest]) (*connect.Response[v1alpha1.AdminLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.AdminLogin is not implemented"))
}

func (UnimplementedKargoServiceHandler) CreateResource(context.Context, *connect.Request[v1alpha1.CreateResourceRequest]) (*connect.Response[v1alpha1.CreateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.CreateResource is not implemented"))
}

func (UnimplementedKargoServiceHandler) CreateOrUpdateResource(context.Context, *connect.Request[v1alpha1.CreateOrUpdateResourceRequest]) (*connect.Response[v1alpha1.CreateOrUpdateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.CreateOrUpdateResource is not implemented"))
}

func (UnimplementedKargoServiceHandler) UpdateResource(context.Context, *connect.Request[v1alpha1.UpdateResourceRequest]) (*connect.Response[v1alpha1.UpdateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.UpdateResource is not implemented"))
}

func (UnimplementedKargoServiceHandler) DeleteResource(context.Context, *connect.Request[v1alpha1.DeleteResourceRequest]) (*connect.Response[v1alpha1.DeleteResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.DeleteResource is not implemented"))
}

func (UnimplementedKargoServiceHandler) CreateStage(context.Context, *connect.Request[v1alpha1.CreateStageRequest]) (*connect.Response[v1alpha1.CreateStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.CreateStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) ListStages(context.Context, *connect.Request[v1alpha1.ListStagesRequest]) (*connect.Response[v1alpha1.ListStagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ListStages is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetStage(context.Context, *connect.Request[v1alpha1.GetStageRequest]) (*connect.Response[v1alpha1.GetStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) WatchStages(context.Context, *connect.Request[v1alpha1.WatchStagesRequest], *connect.ServerStream[v1alpha1.WatchStagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.WatchStages is not implemented"))
}

func (UnimplementedKargoServiceHandler) UpdateStage(context.Context, *connect.Request[v1alpha1.UpdateStageRequest]) (*connect.Response[v1alpha1.UpdateStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.UpdateStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) DeleteStage(context.Context, *connect.Request[v1alpha1.DeleteStageRequest]) (*connect.Response[v1alpha1.DeleteStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.DeleteStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) PromoteStage(context.Context, *connect.Request[v1alpha1.PromoteStageRequest]) (*connect.Response[v1alpha1.PromoteStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.PromoteStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) PromoteSubscribers(context.Context, *connect.Request[v1alpha1.PromoteSubscribersRequest]) (*connect.Response[v1alpha1.PromoteSubscribersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.PromoteSubscribers is not implemented"))
}

func (UnimplementedKargoServiceHandler) RefreshStage(context.Context, *connect.Request[v1alpha1.RefreshStageRequest]) (*connect.Response[v1alpha1.RefreshStageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.RefreshStage is not implemented"))
}

func (UnimplementedKargoServiceHandler) ListPromotions(context.Context, *connect.Request[v1alpha1.ListPromotionsRequest]) (*connect.Response[v1alpha1.ListPromotionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ListPromotions is not implemented"))
}

func (UnimplementedKargoServiceHandler) WatchPromotions(context.Context, *connect.Request[v1alpha1.WatchPromotionsRequest], *connect.ServerStream[v1alpha1.WatchPromotionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.WatchPromotions is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetPromotion(context.Context, *connect.Request[v1alpha1.GetPromotionRequest]) (*connect.Response[v1alpha1.GetPromotionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetPromotion is not implemented"))
}

func (UnimplementedKargoServiceHandler) WatchPromotion(context.Context, *connect.Request[v1alpha1.WatchPromotionRequest], *connect.ServerStream[v1alpha1.WatchPromotionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.WatchPromotion is not implemented"))
}

func (UnimplementedKargoServiceHandler) CreateProject(context.Context, *connect.Request[v1alpha1.CreateProjectRequest]) (*connect.Response[v1alpha1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.CreateProject is not implemented"))
}

func (UnimplementedKargoServiceHandler) ListProjects(context.Context, *connect.Request[v1alpha1.ListProjectsRequest]) (*connect.Response[v1alpha1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ListProjects is not implemented"))
}

func (UnimplementedKargoServiceHandler) DeleteProject(context.Context, *connect.Request[v1alpha1.DeleteProjectRequest]) (*connect.Response[v1alpha1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.DeleteProject is not implemented"))
}

func (UnimplementedKargoServiceHandler) QueryFreight(context.Context, *connect.Request[v1alpha1.QueryFreightRequest]) (*connect.Response[v1alpha1.QueryFreightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.QueryFreight is not implemented"))
}

func (UnimplementedKargoServiceHandler) DeleteFreight(context.Context, *connect.Request[v1alpha1.DeleteFreightRequest]) (*connect.Response[v1alpha1.DeleteFreightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.DeleteFreight is not implemented"))
}

func (UnimplementedKargoServiceHandler) ApproveFreight(context.Context, *connect.Request[v1alpha1.ApproveFreightRequest]) (*connect.Response[v1alpha1.ApproveFreightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ApproveFreight is not implemented"))
}

func (UnimplementedKargoServiceHandler) UpdateFreightAlias(context.Context, *connect.Request[v1alpha1.UpdateFreightAliasRequest]) (*connect.Response[v1alpha1.UpdateFreightAliasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.UpdateFreightAlias is not implemented"))
}

func (UnimplementedKargoServiceHandler) ListWarehouses(context.Context, *connect.Request[v1alpha1.ListWarehousesRequest]) (*connect.Response[v1alpha1.ListWarehousesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.ListWarehouses is not implemented"))
}

func (UnimplementedKargoServiceHandler) GetWarehouse(context.Context, *connect.Request[v1alpha1.GetWarehouseRequest]) (*connect.Response[v1alpha1.GetWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.GetWarehouse is not implemented"))
}

func (UnimplementedKargoServiceHandler) WatchWarehouses(context.Context, *connect.Request[v1alpha1.WatchWarehousesRequest], *connect.ServerStream[v1alpha1.WatchWarehousesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.WatchWarehouses is not implemented"))
}

func (UnimplementedKargoServiceHandler) CreateWarehouse(context.Context, *connect.Request[v1alpha1.CreateWarehouseRequest]) (*connect.Response[v1alpha1.CreateWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.CreateWarehouse is not implemented"))
}

func (UnimplementedKargoServiceHandler) UpdateWarehouse(context.Context, *connect.Request[v1alpha1.UpdateWarehouseRequest]) (*connect.Response[v1alpha1.UpdateWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.UpdateWarehouse is not implemented"))
}

func (UnimplementedKargoServiceHandler) DeleteWarehouse(context.Context, *connect.Request[v1alpha1.DeleteWarehouseRequest]) (*connect.Response[v1alpha1.DeleteWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.DeleteWarehouse is not implemented"))
}

func (UnimplementedKargoServiceHandler) RefreshWarehouse(context.Context, *connect.Request[v1alpha1.RefreshWarehouseRequest]) (*connect.Response[v1alpha1.RefreshWarehouseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("akuity.io.kargo.service.v1alpha1.KargoService.RefreshWarehouse is not implemented"))
}
