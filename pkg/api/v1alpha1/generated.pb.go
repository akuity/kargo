// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: v1alpha1/generated.proto

package v1alpha1

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "k8s.io/apimachinery/pkg/runtime"
	_ "k8s.io/apimachinery/pkg/runtime/schema"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ArgoCDAppUpdate describes updates that should be applied to an Argo CD
// Application resources to incorporate newly observed materials into a Stage.
type ArgoCDAppUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppName specifies the name of an Argo CD Application resource to be
	// updated.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	AppName *string `protobuf:"bytes,1,opt,name=appName" json:"appName,omitempty"`
	// AppNamespace specifies the namespace of an Argo CD Application resource to
	// be updated. If left unspecified, the namespace of this Application resource
	// is defaulted to that of the Stage.
	//
	// TODO: This should default to Argo CD's namespace instead.
	//
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	AppNamespace *string `protobuf:"bytes,2,opt,name=appNamespace" json:"appNamespace,omitempty"`
	// SourceUpdates describes updates to be applied to various sources of the
	// specified Argo CD Application resource.
	SourceUpdates []*ArgoCDSourceUpdate `protobuf:"bytes,3,rep,name=sourceUpdates" json:"sourceUpdates,omitempty"`
}

func (x *ArgoCDAppUpdate) Reset() {
	*x = ArgoCDAppUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDAppUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDAppUpdate) ProtoMessage() {}

func (x *ArgoCDAppUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDAppUpdate.ProtoReflect.Descriptor instead.
func (*ArgoCDAppUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{0}
}

func (x *ArgoCDAppUpdate) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *ArgoCDAppUpdate) GetAppNamespace() string {
	if x != nil && x.AppNamespace != nil {
		return *x.AppNamespace
	}
	return ""
}

func (x *ArgoCDAppUpdate) GetSourceUpdates() []*ArgoCDSourceUpdate {
	if x != nil {
		return x.SourceUpdates
	}
	return nil
}

// ArgoCDHelm describes updates to an Argo CD Application source's Helm-specific
// attributes to incorporate newly observed materials into a Stage.
type ArgoCDHelm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Images describes how specific image versions can be incorporated into an
	// Argo CD Application's Helm parameters.
	//
	// +kubebuilder:validation:MinItems=1
	Images []*ArgoCDHelmImageUpdate `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (x *ArgoCDHelm) Reset() {
	*x = ArgoCDHelm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDHelm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDHelm) ProtoMessage() {}

func (x *ArgoCDHelm) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDHelm.ProtoReflect.Descriptor instead.
func (*ArgoCDHelm) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{1}
}

func (x *ArgoCDHelm) GetImages() []*ArgoCDHelmImageUpdate {
	if x != nil {
		return x.Images
	}
	return nil
}

// ArgoCDHelmImageUpdate describes how a specific image version can be
// incorporated into an Argo CD Application's Helm parameters.
type ArgoCDHelmImageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image specifies a container image (without tag). This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	Image *string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// Key specifies a key within an Argo CD Application's Helm parameters that is
	// to be updated. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Value specifies the new value for the specified key in the Argo CD
	// Application's Helm parameters. Valid values are "Image", which replaces the
	// value of the specified key with the entire <image name>:<tag>, or "Tag"
	// which replaces the value of the specified with just the new tag. This is a
	// required field.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *ArgoCDHelmImageUpdate) Reset() {
	*x = ArgoCDHelmImageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDHelmImageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDHelmImageUpdate) ProtoMessage() {}

func (x *ArgoCDHelmImageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDHelmImageUpdate.ProtoReflect.Descriptor instead.
func (*ArgoCDHelmImageUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{2}
}

func (x *ArgoCDHelmImageUpdate) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *ArgoCDHelmImageUpdate) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ArgoCDHelmImageUpdate) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// ArgoCDKustomize describes updates to an Argo CD Application source's
// Kustomize-specific attributes to incorporate newly observed materials into a
// Stage.
type ArgoCDKustomize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Images describes how specific image versions can be incorporated into an
	// Argo CD Application's Kustomize parameters.
	//
	// +kubebuilder:validation:MinItems=1
	Images []string `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (x *ArgoCDKustomize) Reset() {
	*x = ArgoCDKustomize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDKustomize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDKustomize) ProtoMessage() {}

func (x *ArgoCDKustomize) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDKustomize.ProtoReflect.Descriptor instead.
func (*ArgoCDKustomize) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{3}
}

func (x *ArgoCDKustomize) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

// ArgoCDSourceUpdate describes updates that should be applied to one of an Argo
// CD Application resource's sources.
type ArgoCDSourceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL identifies which of the Argo CD Application's sources this update
	// is intended for. Note: As of Argo CD 2.6, Application's can use multiple
	// sources.
	//
	// +kubebuilder:validation:MinLength=1
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// Chart specifies a chart within a Helm chart registry if RepoURL points to a
	// Helm chart registry. Application sources that point directly at a chart do
	// so through a combination of their own RepoURL (registry) and Chart fields,
	// so BOTH of those are used as criteria in selecting an Application source to
	// update. This field MUST always be used when RepoURL points at a Helm chart
	// registry. This field MUST never be used when RepoURL points at a Git
	// repository.
	//
	// +kubebuilder:validation:Optional
	Chart *string `protobuf:"bytes,2,opt,name=chart" json:"chart,omitempty"`
	// UpdateTargetRevision is a bool indicating whether the source should be
	// updated such that its TargetRevision field points at the most recently git
	// commit (if RepoURL references a git repository) or chart version (if
	// RepoURL references a chart repository).
	UpdateTargetRevision *bool `protobuf:"varint,3,opt,name=updateTargetRevision" json:"updateTargetRevision,omitempty"`
	// Kustomize describes updates to the source's Kustomize-specific attributes.
	Kustomize *ArgoCDKustomize `protobuf:"bytes,4,opt,name=kustomize" json:"kustomize,omitempty"`
	// Helm describes updates to the source's Helm-specific attributes.
	Helm *ArgoCDHelm `protobuf:"bytes,5,opt,name=helm" json:"helm,omitempty"`
}

func (x *ArgoCDSourceUpdate) Reset() {
	*x = ArgoCDSourceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgoCDSourceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgoCDSourceUpdate) ProtoMessage() {}

func (x *ArgoCDSourceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgoCDSourceUpdate.ProtoReflect.Descriptor instead.
func (*ArgoCDSourceUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{4}
}

func (x *ArgoCDSourceUpdate) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *ArgoCDSourceUpdate) GetChart() string {
	if x != nil && x.Chart != nil {
		return *x.Chart
	}
	return ""
}

func (x *ArgoCDSourceUpdate) GetUpdateTargetRevision() bool {
	if x != nil && x.UpdateTargetRevision != nil {
		return *x.UpdateTargetRevision
	}
	return false
}

func (x *ArgoCDSourceUpdate) GetKustomize() *ArgoCDKustomize {
	if x != nil {
		return x.Kustomize
	}
	return nil
}

func (x *ArgoCDSourceUpdate) GetHelm() *ArgoCDHelm {
	if x != nil {
		return x.Helm
	}
	return nil
}

// BookkeeperPromotionMechanism describes how to use Bookkeeper to incorporate
// newly observed materials into a Stage.
type BookkeeperPromotionMechanism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BookkeeperPromotionMechanism) Reset() {
	*x = BookkeeperPromotionMechanism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookkeeperPromotionMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookkeeperPromotionMechanism) ProtoMessage() {}

func (x *BookkeeperPromotionMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookkeeperPromotionMechanism.ProtoReflect.Descriptor instead.
func (*BookkeeperPromotionMechanism) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{5}
}

// Chart describes a specific version of a Helm chart.
type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL specifies the remote registry in which this chart is located.
	RegistryURL *string `protobuf:"bytes,1,opt,name=registryURL" json:"registryURL,omitempty"`
	// Name specifies the name of the chart.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Version specifies a particular version of the chart.
	Version *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{6}
}

func (x *Chart) GetRegistryURL() string {
	if x != nil && x.RegistryURL != nil {
		return *x.RegistryURL
	}
	return ""
}

func (x *Chart) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Chart) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// ChartSubscription defines a subscription to a Helm chart repository.
type ChartSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RegistryURL specifies the URL of a Helm chart registry. It may be a classic
	// chart registry (using HTTP/S) OR an OCI registry. This field is required.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.]+)(:[\d]+)?(/.*)*$`
	RegistryURL *string `protobuf:"bytes,1,opt,name=registryURL" json:"registryURL,omitempty"`
	// Name specifies a Helm chart to subscribe to within the Helm chart registry
	// specified by the RegistryURL field. This field is required.
	//
	// +kubebuilder:validation:MinLength=1
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// SemverConstraint specifies constraints on what new chart versions are
	// permissible. This field is optional. When left unspecified, there will be
	// no constraints, which means the latest version of the chart will always be
	// used. Care should be taken with leaving this field unspecified, as it can
	// lead to the unanticipated rollout of breaking changes.
	//
	// +kubebuilder:validation:Optional
	SemverConstraint *string `protobuf:"bytes,3,opt,name=semverConstraint" json:"semverConstraint,omitempty"`
}

func (x *ChartSubscription) Reset() {
	*x = ChartSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSubscription) ProtoMessage() {}

func (x *ChartSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSubscription.ProtoReflect.Descriptor instead.
func (*ChartSubscription) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{7}
}

func (x *ChartSubscription) GetRegistryURL() string {
	if x != nil && x.RegistryURL != nil {
		return *x.RegistryURL
	}
	return ""
}

func (x *ChartSubscription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChartSubscription) GetSemverConstraint() string {
	if x != nil && x.SemverConstraint != nil {
		return *x.SemverConstraint
	}
	return ""
}

// GitCommit describes a specific commit from a specific Git repository.
type GitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL is the URL of a Git repository.
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// ID is the ID of a specific commit in the Git repository specified by
	// RepoURL.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Branch denotes the branch of the repository where this commit was found.
	Branch *string `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	// HealthCheckCommit is the ID of a specific commit. When specified,
	// assessments of Stage health will used this value (instead of ID) when
	// determining if applicable sources of Argo CD Application resources
	// associated with the Stage are or are not synced to this commit. Note that
	// there are cases (as in that of Bookkeeper being utilized as a promotion
	// mechanism) wherein the value of this field may differ from the commit ID
	// found in the ID field.
	HealthCheckCommit *string `protobuf:"bytes,4,opt,name=healthCheckCommit" json:"healthCheckCommit,omitempty"`
}

func (x *GitCommit) Reset() {
	*x = GitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommit) ProtoMessage() {}

func (x *GitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommit.ProtoReflect.Descriptor instead.
func (*GitCommit) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{8}
}

func (x *GitCommit) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *GitCommit) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GitCommit) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *GitCommit) GetHealthCheckCommit() string {
	if x != nil && x.HealthCheckCommit != nil {
		return *x.HealthCheckCommit
	}
	return ""
}

// GitRepoUpdate describes updates that should be applied to a Git repository
// (using various configuration management tools) to incorporate newly observed
// materials into a Stage.
type GitRepoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL is the URL of the repository to update. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^((https?://)|([\w-]+@))([\w\d\.]+)(:[\d]+)?/(.*)$`
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// ReadBranch specifies a particular branch of the repository from which to
	// locate contents that will be written to the branch specified by the
	// WriteBranch field. This field is optional. In cases where a
	// StageStage includes a GitCommit, that commit's ID will supersede the
	// value of this field. Therefore, in practice, this field is only used to
	// clarify what branch of a repository can be treated as a source of manifests
	// or other configuration when a Stage has no subscription to that
	// repository.
	//
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Pattern=`^(\w+([-/]\w+)*)?$`
	ReadBranch *string `protobuf:"bytes,2,opt,name=readBranch" json:"readBranch,omitempty"`
	// WriteBranch specifies the particular branch of the repository to be
	// updated. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
	WriteBranch *string `protobuf:"bytes,3,opt,name=writeBranch" json:"writeBranch,omitempty"`
	// Bookkeeper describes how to use Bookkeeper to incorporate newly observed
	// materials into the Stage. This is mutually exclusive with the Kustomize and
	// Helm fields.
	Bookkeeper *BookkeeperPromotionMechanism `protobuf:"bytes,4,opt,name=bookkeeper" json:"bookkeeper,omitempty"`
	// Kustomize describes how to use Kustomize to incorporate newly observed
	// materials into the Stage. This is mutually exclusive with the Bookkeeper
	// and Helm fields.
	Kustomize *KustomizePromotionMechanism `protobuf:"bytes,5,opt,name=kustomize" json:"kustomize,omitempty"`
	// Helm describes how to use Helm to incorporate newly observed materials into
	// the Stage. This is mutually exclusive with the Bookkeeper and Kustomize
	// fields.
	Helm *HelmPromotionMechanism `protobuf:"bytes,6,opt,name=helm" json:"helm,omitempty"`
}

func (x *GitRepoUpdate) Reset() {
	*x = GitRepoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepoUpdate) ProtoMessage() {}

func (x *GitRepoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepoUpdate.ProtoReflect.Descriptor instead.
func (*GitRepoUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{9}
}

func (x *GitRepoUpdate) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *GitRepoUpdate) GetReadBranch() string {
	if x != nil && x.ReadBranch != nil {
		return *x.ReadBranch
	}
	return ""
}

func (x *GitRepoUpdate) GetWriteBranch() string {
	if x != nil && x.WriteBranch != nil {
		return *x.WriteBranch
	}
	return ""
}

func (x *GitRepoUpdate) GetBookkeeper() *BookkeeperPromotionMechanism {
	if x != nil {
		return x.Bookkeeper
	}
	return nil
}

func (x *GitRepoUpdate) GetKustomize() *KustomizePromotionMechanism {
	if x != nil {
		return x.Kustomize
	}
	return nil
}

func (x *GitRepoUpdate) GetHelm() *HelmPromotionMechanism {
	if x != nil {
		return x.Helm
	}
	return nil
}

// GitSubscription defines a subscription to a Git repository.
type GitSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL is the repository's URL. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^((https?://)|([\w-]+@))([\w\d\.]+)(:[\d]+)?/(.*)$`
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// Branch references a particular branch of the repository. This is a required
	// field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
	Branch *string `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
}

func (x *GitSubscription) Reset() {
	*x = GitSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSubscription) ProtoMessage() {}

func (x *GitSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSubscription.ProtoReflect.Descriptor instead.
func (*GitSubscription) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{10}
}

func (x *GitSubscription) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *GitSubscription) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

// Health describes the health of a Stage.
type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status describes the health of the Stage.
	Status *string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Issues clarifies why a Stage in any state other than Healthy is in that
	// state. This field will always be the empty when a Stage is Healthy.
	Issues []string `protobuf:"bytes,2,rep,name=issues" json:"issues,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{11}
}

func (x *Health) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Health) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

// HelmChartDependencyUpdate describes how a specific Helm chart that is used
// as a subchart of an umbrella chart can be updated.
type HelmChartDependencyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RegistryURL along with Name identify a subchart of the umbrella chart at
	// ChartPath whose version should be updated.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.]+)(:[\d]+)?(/.*)*$`
	RegistryURL *string `protobuf:"bytes,1,opt,name=registryURL" json:"registryURL,omitempty"`
	// Name along with RegistryURL identify a subchart of the umbrella chart at
	// ChartPath whose version should be updated.
	//
	// +kubebuilder:validation:MinLength=1
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// ChartPath is the path to an umbrella chart.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
	ChartPath *string `protobuf:"bytes,3,opt,name=chartPath" json:"chartPath,omitempty"`
}

func (x *HelmChartDependencyUpdate) Reset() {
	*x = HelmChartDependencyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmChartDependencyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmChartDependencyUpdate) ProtoMessage() {}

func (x *HelmChartDependencyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmChartDependencyUpdate.ProtoReflect.Descriptor instead.
func (*HelmChartDependencyUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{12}
}

func (x *HelmChartDependencyUpdate) GetRegistryURL() string {
	if x != nil && x.RegistryURL != nil {
		return *x.RegistryURL
	}
	return ""
}

func (x *HelmChartDependencyUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *HelmChartDependencyUpdate) GetChartPath() string {
	if x != nil && x.ChartPath != nil {
		return *x.ChartPath
	}
	return ""
}

// HelmImageUpdate describes how a specific image version can be incorporated
// into a specific Helm values file.
type HelmImageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image specifies a container image (without tag). This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^(([\w\d\.-]+)(:[\d]+)?/)?[a-z0-9-]+(/[a-z0-9-]+)*$`
	Image *string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// ValuesFilePath specifies a path to the Helm values file that is to be
	// updated. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
	ValuesFilePath *string `protobuf:"bytes,2,opt,name=valuesFilePath" json:"valuesFilePath,omitempty"`
	// Key specifies a key within the Helm values file that is to be updated. This
	// is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	Key *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// Value specifies the new value for the specified key in the specified Helm
	// values file. Valid values are "Image", which replaces the value of the
	// specified key with the entire <image name>:<tag>, or "Tag" which replaces
	// the value of the specified with just the new tag. This is a required field.
	Value *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *HelmImageUpdate) Reset() {
	*x = HelmImageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmImageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmImageUpdate) ProtoMessage() {}

func (x *HelmImageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmImageUpdate.ProtoReflect.Descriptor instead.
func (*HelmImageUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{13}
}

func (x *HelmImageUpdate) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *HelmImageUpdate) GetValuesFilePath() string {
	if x != nil && x.ValuesFilePath != nil {
		return *x.ValuesFilePath
	}
	return ""
}

func (x *HelmImageUpdate) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *HelmImageUpdate) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// HelmPromotionMechanism describes how to use Helm to incorporate newly
// observed materials into a Stage.
type HelmPromotionMechanism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Images describes how specific image versions can be incorporated into Helm
	// values files.
	Images []*HelmImageUpdate `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
	// Charts describes how specific chart versions can be incorporated into an
	// umbrella chart.
	Charts []*HelmChartDependencyUpdate `protobuf:"bytes,2,rep,name=charts" json:"charts,omitempty"`
}

func (x *HelmPromotionMechanism) Reset() {
	*x = HelmPromotionMechanism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmPromotionMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmPromotionMechanism) ProtoMessage() {}

func (x *HelmPromotionMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmPromotionMechanism.ProtoReflect.Descriptor instead.
func (*HelmPromotionMechanism) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{14}
}

func (x *HelmPromotionMechanism) GetImages() []*HelmImageUpdate {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *HelmPromotionMechanism) GetCharts() []*HelmChartDependencyUpdate {
	if x != nil {
		return x.Charts
	}
	return nil
}

// Image describes a specific version of a container image.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL describes the repository in which the image can be found.
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// Tag identifies a specific version of the image in the repository specified
	// by RepoURL.
	Tag *string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{15}
}

func (x *Image) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

// ImageSubscription defines a subscription to an image repository.
type ImageSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepoURL specifies the URL of the image repository to subscribe to. The
	// value in this field MUST NOT include an image tag. This field is required.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=`^(([\w\d\.-]+)(:[\d]+)?/)?[a-z0-9-]+(/[a-z0-9-]+)*$`
	RepoURL *string `protobuf:"bytes,1,opt,name=repoURL" json:"repoURL,omitempty"`
	// UpdateStrategy specifies the rules for how to identify the newest version
	// of the image specified by the RepoURL field. This field is optional. When
	// left unspecified, the field is implicitly treated as if its value were
	// "SemVer".
	//
	// +kubebuilder:default=SemVer
	UpdateStrategy *string `protobuf:"bytes,2,opt,name=updateStrategy" json:"updateStrategy,omitempty"`
	// SemverConstraint specifies constraints on what new image versions are
	// permissible. This value in this field only has any effect when the
	// UpdateStrategy is SemVer or left unspecified (which is implicitly the same
	// as SemVer). This field is also optional. When left unspecified, (and the
	// UpdateStrategy is SemVer or unspecified), there will be no constraints,
	// which means the latest semantically tagged version of an image will always
	// be used. Care should be taken with leaving this field unspecified, as it
	// can lead to the unanticipated rollout of breaking changes. Refer to Image
	// Updater documentation for more details.
	//
	// +kubebuilder:validation:Optional
	SemverConstraint *string `protobuf:"bytes,3,opt,name=semverConstraint" json:"semverConstraint,omitempty"`
	// AllowTags is a regular expression that can optionally be used to limit the
	// image tags that are considered in determining the newest version of an
	// image. This field is optional.
	//
	// +kubebuilder:validation:Optional
	AllowTags *string `protobuf:"bytes,4,opt,name=allowTags" json:"allowTags,omitempty"`
	// IgnoreTags is a list of tags that must be ignored when determining the
	// newest version of an image. No regular expressions or glob patterns are
	// supported yet. This field is optional.
	//
	// +kubebuilder:validation:Optional
	IgnoreTags []string `protobuf:"bytes,5,rep,name=ignoreTags" json:"ignoreTags,omitempty"`
	// Platform is a string of the form <os>/<arch> that limits the tags that can
	// be considered when searching for new versions of an image. This field is
	// optional. When left unspecified, it is implicitly equivalent to the
	// OS/architecture of the Kargo controller. Care should be taken to set this
	// value correctly in cases where the image referenced by this
	// ImageRepositorySubscription will run on a Kubernetes node with a different
	// OS/architecture than the Kargo controller. At present this is uncommon, but
	// not unheard of.
	//
	// +kubebuilder:validation:Optional
	Platform *string `protobuf:"bytes,6,opt,name=platform" json:"platform,omitempty"`
}

func (x *ImageSubscription) Reset() {
	*x = ImageSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSubscription) ProtoMessage() {}

func (x *ImageSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSubscription.ProtoReflect.Descriptor instead.
func (*ImageSubscription) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{16}
}

func (x *ImageSubscription) GetRepoURL() string {
	if x != nil && x.RepoURL != nil {
		return *x.RepoURL
	}
	return ""
}

func (x *ImageSubscription) GetUpdateStrategy() string {
	if x != nil && x.UpdateStrategy != nil {
		return *x.UpdateStrategy
	}
	return ""
}

func (x *ImageSubscription) GetSemverConstraint() string {
	if x != nil && x.SemverConstraint != nil {
		return *x.SemverConstraint
	}
	return ""
}

func (x *ImageSubscription) GetAllowTags() string {
	if x != nil && x.AllowTags != nil {
		return *x.AllowTags
	}
	return ""
}

func (x *ImageSubscription) GetIgnoreTags() []string {
	if x != nil {
		return x.IgnoreTags
	}
	return nil
}

func (x *ImageSubscription) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

// KustomizeImageUpdate describes how to run `kustomize edit set image`
// for a given image.
type KustomizeImageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image specifies a container image (without tag). This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	Image *string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// Path specifies a path in which the `kustomize edit set image` command
	// should be executed. This is a required field.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (x *KustomizeImageUpdate) Reset() {
	*x = KustomizeImageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeImageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeImageUpdate) ProtoMessage() {}

func (x *KustomizeImageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeImageUpdate.ProtoReflect.Descriptor instead.
func (*KustomizeImageUpdate) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{17}
}

func (x *KustomizeImageUpdate) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *KustomizeImageUpdate) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

// KustomizePromotionMechanism describes how to use Kustomize to incorporate
// newly observed materials into a Stage.
type KustomizePromotionMechanism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Images describes images for which `kustomize edit set image` should be
	// executed and the paths in which those commands should be executed.
	//
	// +kubebuilder:validation:MinItems=1
	Images []*KustomizeImageUpdate `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (x *KustomizePromotionMechanism) Reset() {
	*x = KustomizePromotionMechanism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizePromotionMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizePromotionMechanism) ProtoMessage() {}

func (x *KustomizePromotionMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizePromotionMechanism.ProtoReflect.Descriptor instead.
func (*KustomizePromotionMechanism) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{18}
}

func (x *KustomizePromotionMechanism) GetImages() []*KustomizeImageUpdate {
	if x != nil {
		return x.Images
	}
	return nil
}

// Promotion represents a request to transition a particular Stage into a
// particular state.
type Promotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec describes the desired transition of a specific Stage into a specific
	// StageState.
	//
	// +kubebuilder:validation:Required
	Spec *PromotionSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status describes the current state of the transition represented by this
	// Promotion.
	Status *PromotionStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *Promotion) Reset() {
	*x = Promotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Promotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Promotion) ProtoMessage() {}

func (x *Promotion) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Promotion.ProtoReflect.Descriptor instead.
func (*Promotion) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{19}
}

func (x *Promotion) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Promotion) GetSpec() *PromotionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Promotion) GetStatus() *PromotionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PromotionList contains a list of Promotion
type PromotionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Items    []*Promotion `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *PromotionList) Reset() {
	*x = PromotionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionList) ProtoMessage() {}

func (x *PromotionList) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionList.ProtoReflect.Descriptor instead.
func (*PromotionList) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{20}
}

func (x *PromotionList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PromotionList) GetItems() []*Promotion {
	if x != nil {
		return x.Items
	}
	return nil
}

// PromotionMechanisms describes how to incorporate newly observed materials
// into a Stage.
type PromotionMechanisms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GitRepoUpdates describes updates that should be applied to Git repositories
	// to incorporate newly observed materials into the Stage. This field is
	// optional, as such actions are not required in all cases.
	GitRepoUpdates []*GitRepoUpdate `protobuf:"bytes,1,rep,name=gitRepoUpdates" json:"gitRepoUpdates,omitempty"`
	// ArgoCDAppUpdates describes updates that should be applied to Argo CD
	// Application resources to incorporate newly observed materials into the
	// Stage. This field is optional, as such actions are not required in all
	// cases. Note that all updates specified by the GitRepoUpdates field, if any,
	// are applied BEFORE these.
	ArgoCDAppUpdates []*ArgoCDAppUpdate `protobuf:"bytes,2,rep,name=argoCDAppUpdates" json:"argoCDAppUpdates,omitempty"`
}

func (x *PromotionMechanisms) Reset() {
	*x = PromotionMechanisms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionMechanisms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionMechanisms) ProtoMessage() {}

func (x *PromotionMechanisms) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionMechanisms.ProtoReflect.Descriptor instead.
func (*PromotionMechanisms) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{21}
}

func (x *PromotionMechanisms) GetGitRepoUpdates() []*GitRepoUpdate {
	if x != nil {
		return x.GitRepoUpdates
	}
	return nil
}

func (x *PromotionMechanisms) GetArgoCDAppUpdates() []*ArgoCDAppUpdate {
	if x != nil {
		return x.ArgoCDAppUpdates
	}
	return nil
}

// PromotionPolicy specifies whether a given Stage is eligible for
// auto-promotion to newly discovered StageStates.
type PromotionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Stage references a Stage in the same namespace as this PromotionPolicy to
	// which this PromotionPolicy applies.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	Stage *string `protobuf:"bytes,2,opt,name=stage" json:"stage,omitempty"`
	// EnableAutoPromotion indicates whether new StageStates can automatically be
	// promoted into the Stage referenced by the Stage field. Note: There are
	// other conditions also required for an auto-promotion to occur.
	// Specifically, there must be a single source of new StageStates, so
	// regardless of the value of this field, an auto-promotion could never occur
	// for a Stage subscribed to MULTIPLE upstream Stages. This field defaults to
	// false, but is commonly set to true for Stages that subscribe to
	// repositories instead of other, upstream Stages. This allows users to define
	// Stages that are automatically updated as soon as new materials are
	// detected.
	EnableAutoPromotion *bool `protobuf:"varint,3,opt,name=enableAutoPromotion" json:"enableAutoPromotion,omitempty"`
}

func (x *PromotionPolicy) Reset() {
	*x = PromotionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionPolicy) ProtoMessage() {}

func (x *PromotionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionPolicy.ProtoReflect.Descriptor instead.
func (*PromotionPolicy) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{22}
}

func (x *PromotionPolicy) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PromotionPolicy) GetStage() string {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return ""
}

func (x *PromotionPolicy) GetEnableAutoPromotion() bool {
	if x != nil && x.EnableAutoPromotion != nil {
		return *x.EnableAutoPromotion
	}
	return false
}

// PromotionPolicyList contains a list of PromotionPolicies
type PromotionPolicyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ListMeta       `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Items    []*PromotionPolicy `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *PromotionPolicyList) Reset() {
	*x = PromotionPolicyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionPolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionPolicyList) ProtoMessage() {}

func (x *PromotionPolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionPolicyList.ProtoReflect.Descriptor instead.
func (*PromotionPolicyList) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{23}
}

func (x *PromotionPolicyList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PromotionPolicyList) GetItems() []*PromotionPolicy {
	if x != nil {
		return x.Items
	}
	return nil
}

// PromotionSpec describes the desired transition of a specific Stage into a
// specific StageState.
type PromotionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stage specifies the name of the Stage to which this Promotion
	// applies. The Stage referenced by this field MUST be in the same
	// namespace as the Promotion.
	//
	// TODO: Use a webhook to make this immutable
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	Stage *string `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	// State specifies the specific StageState into which the Stage referenced by
	// the Stage field should be transitioned. The State MUST be among the Stage's
	// Status.AvailableStates or the Promotion will ultimately fail.
	//
	// TODO: Use a webhook to make this immutable
	//
	// +kubebuilder:validation:MinLength=1
	State *string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (x *PromotionSpec) Reset() {
	*x = PromotionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionSpec) ProtoMessage() {}

func (x *PromotionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionSpec.ProtoReflect.Descriptor instead.
func (*PromotionSpec) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{24}
}

func (x *PromotionSpec) GetStage() string {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return ""
}

func (x *PromotionSpec) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

// PromotionStatus describes the current state of the transition represented by
// a Promotion.
type PromotionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase describes where the Promotion currently is in its lifecycle.
	Phase *string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	// Error describes any errors that are preventing the Promotion controller
	// from executing this Promotion. i.e. If the Phase field has a value of
	// Failed, this field can be expected to explain why.
	Error *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *PromotionStatus) Reset() {
	*x = PromotionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionStatus) ProtoMessage() {}

func (x *PromotionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionStatus.ProtoReflect.Descriptor instead.
func (*PromotionStatus) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{25}
}

func (x *PromotionStatus) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *PromotionStatus) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// RepoSubscriptions describes various sorts of repositories a Stage uses
// as sources of material.
type RepoSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Git describes subscriptions to Git repositories.
	Git []*GitSubscription `protobuf:"bytes,1,rep,name=git" json:"git,omitempty"`
	// Images describes subscriptions to container image repositories.
	Images []*ImageSubscription `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
	// Charts describes subscriptions to Helm charts.
	Charts []*ChartSubscription `protobuf:"bytes,3,rep,name=charts" json:"charts,omitempty"`
}

func (x *RepoSubscriptions) Reset() {
	*x = RepoSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSubscriptions) ProtoMessage() {}

func (x *RepoSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSubscriptions.ProtoReflect.Descriptor instead.
func (*RepoSubscriptions) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{26}
}

func (x *RepoSubscriptions) GetGit() []*GitSubscription {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *RepoSubscriptions) GetImages() []*ImageSubscription {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *RepoSubscriptions) GetCharts() []*ChartSubscription {
	if x != nil {
		return x.Charts
	}
	return nil
}

// Stage is the Kargo API's main type.
type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec describes the sources of material used by the Stage and how
	// to incorporate newly observed materials into the Stage.
	//
	// +kubebuilder:validation:Required
	Spec *StageSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status describes the most recently observed versions of this Stage's
	// sources of material as well as the Stage's current and recent states.
	Status *StageStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{27}
}

func (x *Stage) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Stage) GetSpec() *StageSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Stage) GetStatus() *StageStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// StageList is a list of Stage resources.
type StageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Items    []*Stage     `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *StageList) Reset() {
	*x = StageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageList) ProtoMessage() {}

func (x *StageList) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageList.ProtoReflect.Descriptor instead.
func (*StageList) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{28}
}

func (x *StageList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StageList) GetItems() []*Stage {
	if x != nil {
		return x.Items
	}
	return nil
}

// StageSpec describes the sources of material used by a Stage and how to
// incorporate newly observed materials into the Stage.
type StageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions describes the Stage's sources of material. This is a
	// required field.
	//
	// +kubebuilder:validation:Required
	Subscriptions *Subscriptions `protobuf:"bytes,1,opt,name=subscriptions" json:"subscriptions,omitempty"`
	// PromotionMechanisms describes how to incorporate newly observed materials
	// into the Stage. This is a required field.
	//
	// +kubebuilder:validation:Required
	PromotionMechanisms *PromotionMechanisms `protobuf:"bytes,2,opt,name=promotionMechanisms" json:"promotionMechanisms,omitempty"`
}

func (x *StageSpec) Reset() {
	*x = StageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageSpec) ProtoMessage() {}

func (x *StageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageSpec.ProtoReflect.Descriptor instead.
func (*StageSpec) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{29}
}

func (x *StageSpec) GetSubscriptions() *Subscriptions {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *StageSpec) GetPromotionMechanisms() *PromotionMechanisms {
	if x != nil {
		return x.PromotionMechanisms
	}
	return nil
}

// StageState is a "bill of materials" describing what is, was, or can be
// deployed to a Stage.
type StageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique, system-assigned identifier for this state.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// FirstSeen represents the date/time when this StageStage first entered the
	// system. This is useful and important information because it enables the
	// controller to block auto-promotion of StageStates that are older than a
	// Stages's current state, which is a case that can arise if a Stage has
	// ROLLED BACK to an older state whilst a downstream Stage is already on to a
	// newer state.
	FirstSeen *v1.Time `protobuf:"bytes,2,opt,name=firstSeen" json:"firstSeen,omitempty"`
	// Provenance describes the proximate source of this StageState. i.e. Did it
	// come directly from upstream repositories? Or an upstream Stage.
	Provenance *string `protobuf:"bytes,3,opt,name=provenance" json:"provenance,omitempty"`
	// Commits describes specific Git repository commits that were used in this
	// state.
	Commits []*GitCommit `protobuf:"bytes,4,rep,name=commits" json:"commits,omitempty"`
	// Images describes container images and versions thereof that were used
	// in this state.
	Images []*Image `protobuf:"bytes,5,rep,name=images" json:"images,omitempty"`
	// Charts describes Helm charts that were used in this state.
	Charts []*Chart `protobuf:"bytes,6,rep,name=charts" json:"charts,omitempty"`
	// Health is the StageState's last observed health. If this state is the
	// Stage's current state, this will be continuously re-assessed and
	// updated. If this StageState is a past state of the Stage, this field will
	// denote the last observed health state before transitioning into a different
	// state.
	Health *Health `protobuf:"bytes,7,opt,name=health" json:"health,omitempty"`
}

func (x *StageState) Reset() {
	*x = StageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageState) ProtoMessage() {}

func (x *StageState) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageState.ProtoReflect.Descriptor instead.
func (*StageState) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{30}
}

func (x *StageState) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *StageState) GetFirstSeen() *v1.Time {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *StageState) GetProvenance() string {
	if x != nil && x.Provenance != nil {
		return *x.Provenance
	}
	return ""
}

func (x *StageState) GetCommits() []*GitCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *StageState) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *StageState) GetCharts() []*Chart {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *StageState) GetHealth() *Health {
	if x != nil {
		return x.Health
	}
	return nil
}

// StageStatus describes the most recently observed versions of a Stage's
// sources of material as well as its current and recent states.
type StageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AvailableStates is a stack of available StageStates, where each state is
	// essentially a "bill of materials" describing what can be automatically or
	// manually deployed to the Stage.
	AvailableStates []*StageState `protobuf:"bytes,1,rep,name=availableStates" json:"availableStates,omitempty"`
	// CurrentState is the Stage's current state -- a "bill of materials"
	// describing what is currently deployed to the Stage.
	CurrentState *StageState `protobuf:"bytes,2,opt,name=currentState" json:"currentState,omitempty"`
	// History is a stack of recent StageStates, where each state is
	// essentially a "bill of materials" describing what was deployed to the
	// Stage. By default, the last ten states are stored.
	History []*StageState `protobuf:"bytes,3,rep,name=history" json:"history,omitempty"`
	// Error describes any errors that are preventing the Stage controller
	// from assessing Stage health or from polling repositories or upstream
	// Stages to discover new StageStates.
	Error *string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (x *StageStatus) Reset() {
	*x = StageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageStatus) ProtoMessage() {}

func (x *StageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageStatus.ProtoReflect.Descriptor instead.
func (*StageStatus) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{31}
}

func (x *StageStatus) GetAvailableStates() []*StageState {
	if x != nil {
		return x.AvailableStates
	}
	return nil
}

func (x *StageStatus) GetCurrentState() *StageState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *StageStatus) GetHistory() []*StageState {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *StageStatus) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// StageSubscription defines a subscription to states from another Stage.
type StageSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name specifies the name of a Stage.
	//
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace specifies the namespace of the Stage. If left unspecified,
	// the namespace of the upstream repository will be defaulted to that of this
	// Stage.
	//
	// TODO: This field needs to go away because we've really leaned into using
	// namespaces as project boundaries.
	//
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
	Namespace *string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *StageSubscription) Reset() {
	*x = StageSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageSubscription) ProtoMessage() {}

func (x *StageSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageSubscription.ProtoReflect.Descriptor instead.
func (*StageSubscription) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{32}
}

func (x *StageSubscription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StageSubscription) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

// Subscriptions describes a Stage's sources of material.
type Subscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repos describes various sorts of repositories a Stage uses as sources of
	// material. This field is mutually exclusive with the UpstreamStages field.
	Repos *RepoSubscriptions `protobuf:"bytes,1,opt,name=repos" json:"repos,omitempty"`
	// UpstreamStages identifies other Stages as potential sources of material
	// for this Stage. This field is mutually exclusive with the Repos field.
	UpstreamStages []*StageSubscription `protobuf:"bytes,2,rep,name=upstreamStages" json:"upstreamStages,omitempty"`
}

func (x *Subscriptions) Reset() {
	*x = Subscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1alpha1_generated_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscriptions) ProtoMessage() {}

func (x *Subscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_v1alpha1_generated_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscriptions.ProtoReflect.Descriptor instead.
func (*Subscriptions) Descriptor() ([]byte, []int) {
	return file_v1alpha1_generated_proto_rawDescGZIP(), []int{33}
}

func (x *Subscriptions) GetRepos() *RepoSubscriptions {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *Subscriptions) GetUpstreamStages() []*StageSubscription {
	if x != nil {
		return x.UpstreamStages
	}
	return nil
}

var File_v1alpha1_generated_proto protoreflect.FileDescriptor

var file_v1alpha1_generated_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61,
	0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x70, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f,
	0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f,
	0x0c, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72,
	0x67, 0x6f, 0x43, 0x44, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x15, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0a, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x48, 0x65, 0x6c, 0x6d, 0x12, 0x67, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x98, 0x01,
	0x0a, 0x15, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x03, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xc8, 0xde, 0x1f, 0x00,
	0xe2, 0xde, 0x1f, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0xfa, 0xde, 0x1f, 0x14, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x41, 0x72, 0x67, 0x6f,
	0x43, 0x44, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xde, 0x1f,
	0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xf2, 0x02, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52,
	0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f,
	0x07, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52,
	0x4c, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x09, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x4b, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0xe2, 0xde, 0x1f, 0x09, 0x4b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x12, 0x52, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44,
	0x48, 0x65, 0x6c, 0x6d, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x04,
	0x68, 0x65, 0x6c, 0x6d, 0x22, 0x1e, 0x0a, 0x1c, 0x42, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55,
	0x52, 0x4c, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x12,
	0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x10, 0x53, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07,
	0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xc8, 0xde,
	0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xc8, 0xde,
	0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xf1, 0x03,
	0x0a, 0x0d, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52,
	0x4c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x35,
	0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x13, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0b, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x76, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61,
	0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x42, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x72, 0x0a,
	0x09, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x0d, 0xe2, 0xde, 0x1f, 0x09, 0x4b, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x12, 0x5e, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x04, 0x68, 0x65, 0x6c,
	0x6d, 0x22, 0x64, 0x0a, 0x0f, 0x47, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x52,
	0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12,
	0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x63, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0xfa, 0xde, 0x1f, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xde, 0x1f, 0x06, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x19, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x55, 0x52, 0x4c, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x52,
	0x4c, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x09,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x00,
	0xe2, 0xde, 0x1f, 0x03, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0xfa, 0xde, 0x1f, 0x14, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x48, 0x65,
	0x6c, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x61, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67,
	0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0xc8, 0xde,
	0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x03, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xea, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x55, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0xfa, 0xde, 0x1f, 0x13, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x44, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x10, 0x53, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5d, 0x0a, 0x14, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x04, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x66, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x12, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61,
	0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x8f, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x12, 0x77, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x0e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x0e, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x7f, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x18, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x10, 0x41,
	0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x10, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x44, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x5e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x59, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0xfa, 0xde, 0x1f,
	0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb7, 0x02, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x58, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x03, 0x47, 0x69, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x63, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x63, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0xc8,
	0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0a, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x54, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69,
	0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x70, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x11, 0xe2, 0xde, 0x1f, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x73, 0x42, 0x17, 0xe2, 0xde, 0x1f, 0x13, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73,
	0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xc8, 0xde, 0x1f,
	0x00, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0xe2, 0xde, 0x1f, 0x09,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61,
	0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x0f,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72,
	0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2,
	0xde, 0x1f, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x06, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x0a, 0xe2, 0xde,
	0x1f, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0xf8, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x77, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61,
	0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x17, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75,
	0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0xe2, 0xde, 0x1f, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0xc8, 0xde,
	0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde, 0x1f, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x09, 0xe2, 0xde, 0x1f, 0x05, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x7b, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e,
	0x6b, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xe2, 0xde,
	0x1f, 0x0e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x42, 0xd5, 0x02, 0xc8, 0xe1, 0x1e, 0x00, 0xd0, 0xe1, 0x1e, 0x00, 0xd8, 0xe1, 0x1e, 0x00, 0x80,
	0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xe2, 0x1e, 0x01, 0xe0,
	0xe2, 0x1e, 0x01, 0x90, 0xe3, 0x1e, 0x00, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x6b,
	0x61, 0x72, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2f, 0x6b, 0x61, 0x72, 0x67, 0x6f,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xa2, 0x02, 0x06, 0x47, 0x43, 0x41, 0x4b, 0x50, 0x41, 0xaa, 0x02, 0x28, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x2e, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x2e, 0x4b,
	0x61, 0x72, 0x67, 0x6f, 0x2e, 0x50, 0x6b, 0x67, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x28, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5c, 0x43,
	0x6f, 0x6d, 0x5c, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x5c, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x5c,
	0x50, 0x6b, 0x67, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x34, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5c, 0x43, 0x6f, 0x6d, 0x5c, 0x41, 0x6b,
	0x75, 0x69, 0x74, 0x79, 0x5c, 0x4b, 0x61, 0x72, 0x67, 0x6f, 0x5c, 0x50, 0x6b, 0x67, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x41, 0x6b, 0x75, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x4b,
	0x61, 0x72, 0x67, 0x6f, 0x3a, 0x3a, 0x50, 0x6b, 0x67, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
}

var (
	file_v1alpha1_generated_proto_rawDescOnce sync.Once
	file_v1alpha1_generated_proto_rawDescData = file_v1alpha1_generated_proto_rawDesc
)

func file_v1alpha1_generated_proto_rawDescGZIP() []byte {
	file_v1alpha1_generated_proto_rawDescOnce.Do(func() {
		file_v1alpha1_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1alpha1_generated_proto_rawDescData)
	})
	return file_v1alpha1_generated_proto_rawDescData
}

var file_v1alpha1_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_v1alpha1_generated_proto_goTypes = []interface{}{
	(*ArgoCDAppUpdate)(nil),              // 0: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate
	(*ArgoCDHelm)(nil),                   // 1: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm
	(*ArgoCDHelmImageUpdate)(nil),        // 2: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelmImageUpdate
	(*ArgoCDKustomize)(nil),              // 3: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDKustomize
	(*ArgoCDSourceUpdate)(nil),           // 4: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate
	(*BookkeeperPromotionMechanism)(nil), // 5: github.com.akuity.kargo.pkg.api.v1alpha1.BookkeeperPromotionMechanism
	(*Chart)(nil),                        // 6: github.com.akuity.kargo.pkg.api.v1alpha1.Chart
	(*ChartSubscription)(nil),            // 7: github.com.akuity.kargo.pkg.api.v1alpha1.ChartSubscription
	(*GitCommit)(nil),                    // 8: github.com.akuity.kargo.pkg.api.v1alpha1.GitCommit
	(*GitRepoUpdate)(nil),                // 9: github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate
	(*GitSubscription)(nil),              // 10: github.com.akuity.kargo.pkg.api.v1alpha1.GitSubscription
	(*Health)(nil),                       // 11: github.com.akuity.kargo.pkg.api.v1alpha1.Health
	(*HelmChartDependencyUpdate)(nil),    // 12: github.com.akuity.kargo.pkg.api.v1alpha1.HelmChartDependencyUpdate
	(*HelmImageUpdate)(nil),              // 13: github.com.akuity.kargo.pkg.api.v1alpha1.HelmImageUpdate
	(*HelmPromotionMechanism)(nil),       // 14: github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism
	(*Image)(nil),                        // 15: github.com.akuity.kargo.pkg.api.v1alpha1.Image
	(*ImageSubscription)(nil),            // 16: github.com.akuity.kargo.pkg.api.v1alpha1.ImageSubscription
	(*KustomizeImageUpdate)(nil),         // 17: github.com.akuity.kargo.pkg.api.v1alpha1.KustomizeImageUpdate
	(*KustomizePromotionMechanism)(nil),  // 18: github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism
	(*Promotion)(nil),                    // 19: github.com.akuity.kargo.pkg.api.v1alpha1.Promotion
	(*PromotionList)(nil),                // 20: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionList
	(*PromotionMechanisms)(nil),          // 21: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms
	(*PromotionPolicy)(nil),              // 22: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy
	(*PromotionPolicyList)(nil),          // 23: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicyList
	(*PromotionSpec)(nil),                // 24: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionSpec
	(*PromotionStatus)(nil),              // 25: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionStatus
	(*RepoSubscriptions)(nil),            // 26: github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions
	(*Stage)(nil),                        // 27: github.com.akuity.kargo.pkg.api.v1alpha1.Stage
	(*StageList)(nil),                    // 28: github.com.akuity.kargo.pkg.api.v1alpha1.StageList
	(*StageSpec)(nil),                    // 29: github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec
	(*StageState)(nil),                   // 30: github.com.akuity.kargo.pkg.api.v1alpha1.StageState
	(*StageStatus)(nil),                  // 31: github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus
	(*StageSubscription)(nil),            // 32: github.com.akuity.kargo.pkg.api.v1alpha1.StageSubscription
	(*Subscriptions)(nil),                // 33: github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions
	(*v1.ObjectMeta)(nil),                // 34: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1.ListMeta)(nil),                  // 35: k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	(*v1.Time)(nil),                      // 36: k8s.io.apimachinery.pkg.apis.meta.v1.Time
}
var file_v1alpha1_generated_proto_depIdxs = []int32{
	4,  // 0: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate.sourceUpdates:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate
	2,  // 1: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm.images:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelmImageUpdate
	3,  // 2: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate.kustomize:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDKustomize
	1,  // 3: github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate.helm:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm
	5,  // 4: github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate.bookkeeper:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.BookkeeperPromotionMechanism
	18, // 5: github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate.kustomize:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism
	14, // 6: github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate.helm:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism
	13, // 7: github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism.images:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.HelmImageUpdate
	12, // 8: github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism.charts:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.HelmChartDependencyUpdate
	17, // 9: github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism.images:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.KustomizeImageUpdate
	34, // 10: github.com.akuity.kargo.pkg.api.v1alpha1.Promotion.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	24, // 11: github.com.akuity.kargo.pkg.api.v1alpha1.Promotion.spec:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.PromotionSpec
	25, // 12: github.com.akuity.kargo.pkg.api.v1alpha1.Promotion.status:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.PromotionStatus
	35, // 13: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	19, // 14: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionList.items:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Promotion
	9,  // 15: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms.gitRepoUpdates:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate
	0,  // 16: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms.argoCDAppUpdates:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate
	34, // 17: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	35, // 18: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicyList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	22, // 19: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicyList.items:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy
	10, // 20: github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions.git:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.GitSubscription
	16, // 21: github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions.images:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ImageSubscription
	7,  // 22: github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions.charts:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.ChartSubscription
	34, // 23: github.com.akuity.kargo.pkg.api.v1alpha1.Stage.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	29, // 24: github.com.akuity.kargo.pkg.api.v1alpha1.Stage.spec:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec
	31, // 25: github.com.akuity.kargo.pkg.api.v1alpha1.Stage.status:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus
	35, // 26: github.com.akuity.kargo.pkg.api.v1alpha1.StageList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	27, // 27: github.com.akuity.kargo.pkg.api.v1alpha1.StageList.items:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Stage
	33, // 28: github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec.subscriptions:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions
	21, // 29: github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec.promotionMechanisms:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms
	36, // 30: github.com.akuity.kargo.pkg.api.v1alpha1.StageState.firstSeen:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.Time
	8,  // 31: github.com.akuity.kargo.pkg.api.v1alpha1.StageState.commits:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.GitCommit
	15, // 32: github.com.akuity.kargo.pkg.api.v1alpha1.StageState.images:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Image
	6,  // 33: github.com.akuity.kargo.pkg.api.v1alpha1.StageState.charts:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Chart
	11, // 34: github.com.akuity.kargo.pkg.api.v1alpha1.StageState.health:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.Health
	30, // 35: github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus.availableStates:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageState
	30, // 36: github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus.currentState:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageState
	30, // 37: github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus.history:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageState
	26, // 38: github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions.repos:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions
	32, // 39: github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions.upstreamStages:type_name -> github.com.akuity.kargo.pkg.api.v1alpha1.StageSubscription
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_v1alpha1_generated_proto_init() }
func file_v1alpha1_generated_proto_init() {
	if File_v1alpha1_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1alpha1_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDAppUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDHelm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDHelmImageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDKustomize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgoCDSourceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookkeeperPromotionMechanism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmChartDependencyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmImageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmPromotionMechanism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeImageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizePromotionMechanism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Promotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionMechanisms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionPolicyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1alpha1_generated_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1alpha1_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1alpha1_generated_proto_goTypes,
		DependencyIndexes: file_v1alpha1_generated_proto_depIdxs,
		MessageInfos:      file_v1alpha1_generated_proto_msgTypes,
	}.Build()
	File_v1alpha1_generated_proto = out.File
	file_v1alpha1_generated_proto_rawDesc = nil
	file_v1alpha1_generated_proto_goTypes = nil
	file_v1alpha1_generated_proto_depIdxs = nil
}
