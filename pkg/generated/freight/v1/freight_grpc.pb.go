// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: freight.proto

package freightv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FreightProcessorService_ProcessFreight_FullMethodName = "/freight.v1.FreightProcessorService/ProcessFreight"
	FreightProcessorService_HealthCheck_FullMethodName    = "/freight.v1.FreightProcessorService/HealthCheck"
)

// FreightProcessorServiceClient is the client API for FreightProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FreightProcessorService defines the gRPC service for processing freight
type FreightProcessorServiceClient interface {
	// ProcessFreight sends freight data to be processed and returns the modified freight
	ProcessFreight(ctx context.Context, in *ProcessFreightRequest, opts ...grpc.CallOption) (*ProcessFreightResponse, error)
	// HealthCheck returns the health status of the processor
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type freightProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreightProcessorServiceClient(cc grpc.ClientConnInterface) FreightProcessorServiceClient {
	return &freightProcessorServiceClient{cc}
}

func (c *freightProcessorServiceClient) ProcessFreight(ctx context.Context, in *ProcessFreightRequest, opts ...grpc.CallOption) (*ProcessFreightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFreightResponse)
	err := c.cc.Invoke(ctx, FreightProcessorService_ProcessFreight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freightProcessorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, FreightProcessorService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreightProcessorServiceServer is the server API for FreightProcessorService service.
// All implementations must embed UnimplementedFreightProcessorServiceServer
// for forward compatibility.
//
// FreightProcessorService defines the gRPC service for processing freight
type FreightProcessorServiceServer interface {
	// ProcessFreight sends freight data to be processed and returns the modified freight
	ProcessFreight(context.Context, *ProcessFreightRequest) (*ProcessFreightResponse, error)
	// HealthCheck returns the health status of the processor
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedFreightProcessorServiceServer()
}

// UnimplementedFreightProcessorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFreightProcessorServiceServer struct{}

func (UnimplementedFreightProcessorServiceServer) ProcessFreight(context.Context, *ProcessFreightRequest) (*ProcessFreightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFreight not implemented")
}

func (UnimplementedFreightProcessorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func (UnimplementedFreightProcessorServiceServer) mustEmbedUnimplementedFreightProcessorServiceServer() {
}
func (UnimplementedFreightProcessorServiceServer) testEmbeddedByValue() {}

// UnsafeFreightProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreightProcessorServiceServer will
// result in compilation errors.
type UnsafeFreightProcessorServiceServer interface {
	mustEmbedUnimplementedFreightProcessorServiceServer()
}

func RegisterFreightProcessorServiceServer(s grpc.ServiceRegistrar, srv FreightProcessorServiceServer) {
	// If the following call pancis, it indicates UnimplementedFreightProcessorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FreightProcessorService_ServiceDesc, srv)
}

func _FreightProcessorService_ProcessFreight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFreightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightProcessorServiceServer).ProcessFreight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightProcessorService_ProcessFreight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightProcessorServiceServer).ProcessFreight(ctx, req.(*ProcessFreightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreightProcessorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightProcessorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreightProcessorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightProcessorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreightProcessorService_ServiceDesc is the grpc.ServiceDesc for FreightProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreightProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freight.v1.FreightProcessorService",
	HandlerType: (*FreightProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessFreight",
			Handler:    _FreightProcessorService_ProcessFreight_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FreightProcessorService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}
