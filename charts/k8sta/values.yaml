## Default values for k8sta
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

image:
  repository: ghcr.io/akuityio/k8sta-prototype
  ## tag should only be specified if you want to override Chart.appVersion
  ## The default tag is the value of .Chart.AppVersion
  # tag:
  pullPolicy: IfNotPresent

rbac:
  ## Indicates whether relevant cluster-scoped roles should be installed/updated
  ## by this chart. Set to false if this is NOT the first install of K8sTA in
  ## a given cluster, otherwise this chart will attempt to create resources that
  ## already exist.
  installGlobalResources: true


## All settings for BookKeeper
bookkeeper:

  ## All settings for the BookKeeper server component
  server:

    replicas: 1

    logLevel: INFO

    ## Host should be set to the public IP address or DNS hostname for this
    ## server. Whenever possible, it should be set accurately for a variety of
    ## reasons. If applicable, the value is used both in automatic certificate
    ## generation and, also if applicable, the creation of ingress routing rules
    ## (advanced). Keeping the default value or otherwise setting this
    ## inaccurately may result in invalid routing rules or untrusted
    ## certificates (untrusted beyond merely having been self-signed).
    host: bookkeeper.example.com

    service:
      ## If you're not going to enable ingress, you may want to change this
      ## value to LoadBalancer for production deployments. If running locally,
      ## you may want to change it to NodePort OR leave it as ClusterIP and use
      ## `kubectl port-forward` to map a port on the local network interface to
      ## the service.
      type: ClusterIP
      ## Host port the service will be mapped to when service type is either
      ## NodePort or LoadBalancer. If not specified, Kubernetes chooses.
      # nodePort:

    tls:
      ## Whether to enable TLS. If true then you MUST do ONE of three things to
      ## ensure the existence of a TLS certificate:
      ##
      ## 1. Set generateSelfSignedCert below to true (the default)
      ## 2. OR Set values for BOTH the cert and key fields below
      ## 3. OR create a cert secret named
      ##    <Helm release name>-bookkeeper-server-cert in
      ##    the same namespace as K8sTA. This secret could be created manually
      ##    or through other means, such as a cert manager.
      enabled: true
      ## Whether to generate a self-signed certificate. Since the certificate is
      ## self-signed, it will not be trusted by clients and should absolutely
      ## not be used for production, but having this enabled as a default
      ## effectively discourages the more heavy-handed option to disable TLS
      ## entirely. If TLS is enabled and cert generation is DISABLED, users MUST
      ## provide their own cert and private key below OR create a cert secret
      ## named
      ## <Helm release name>-bookkeeper-server-cert in the same namespace as
      ## K8sTA.
      generateSelfSignedCert: true
      # cert: base 64 encoded cert goes here
      # key: base 64 encoded key goes here

    ingress:
      ## Whether to enable ingress. By default, this is disabled. Enabling
      ## ingress is advanced usage.
      enabled: false
      ## Optionally use annotations specified by your ingress controller's
      ## documentation to customize the behavior of the ingress resource.
      annotations:
        # kubernetes.io/ingress.class: nginx
      ## From Kubernetes 1.18+ this field is supported in case your ingress
      ## controller supports it. When set, you do not need to add the ingress
      ## class as annotation.
      ingressClassName:
      tls:
        ## Whether to enable TLS. If true then you MUST do ONE of three things
        ## to ensure the existence of a TLS certificate:
        ##
        ## 1. Set generateSelfSignedCert below to true (the default)
        ## 2. OR Set values for BOTH the cert and key fields below
        ## 3. OR create a cert secret named
        ##    <Helm release name>-bookkeeper-server-ingress-cert in the same
        ##    namespace as K8sTA. This secret could be created manually or
        ##    through other means, such as a cert manager.
        ##
        ## Note there is a wide disparity in the feature set of various ingress
        ## controllers and some ingress controllers may be able to provision a
        ## certificate for you even with TLS disabled here. Consult your ingress
        ## controller's documentation.
        enabled: true
        ## Whether to generate a self-signed certificate. Since the certificate
        ## is self-signed, it will not be trusted by clients and should
        ## absolutely not be used for production, but having this enabled as a
        ## default effectively discourages the more heavy-handed option to
        ## disable TLS entirely. If ingress TLS is enabled and cert generation
        ## is DISABLED, users MUST provide their own cert and private key below
        ## OR create a cert secret named
        ## <Helm release name>-bookkeeper-server-ingress-cert in the same
        ## namespace as K8sTA.
        generateSelfSignedCert: true
        # cert: base 64 encoded cert goes here
        # key: base 64 encoded key goes here

    resources: {}
      # We usually recommend not to specify default resources and to leave this as
      # a conscious choice for the user. This also increases chances charts run on
      # environments with little resources, such as KinD. If you do want to
      # specify resources, uncomment the following lines, adjust them as
      # necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    nodeSelector: {}

    tolerations: []

## All settings for the server component
server:

  replicas: 1

  logLevel: INFO

  ## Host should be set to the public IP address or DNS hostname for this
  ## server. Whenever possible, it should be set accurately for a variety of
  ## reasons. If applicable, the value is used both in automatic certificate
  ## generation and, also if applicable, the creation of ingress routing rules
  ## (advanced). Keeping the default value or otherwise setting this
  ## inaccurately may result in invalid routing rules or untrusted certificates
  ## (untrusted beyond merely having been self-signed).
  host: github.example.com

  service:
    ## If you're not going to enable ingress, you may want to change this value
    ## to LoadBalancer for production deployments. If running locally, you may
    ## want to change it to NodePort OR leave it as ClusterIP and use
    ## `kubectl port-forward` to map a port on the local network interface to
    ## the service.
    type: ClusterIP
    ## Host port the service will be mapped to when service type is either
    ## NodePort or LoadBalancer. If not specified, Kubernetes chooses.
    # nodePort:

  tls:
    ## Whether to enable TLS. If true then you MUST do ONE of three things to
    ## ensure the existence of a TLS certificate:
    ##
    ## 1. Set generateSelfSignedCert below to true (the default)
    ## 2. OR Set values for BOTH the cert and key fields below
    ## 3. OR create a cert secret named <Helm release name>-server-cert in
    ##    the same namespace as K8sTA. This secret could be created manually
    ##    or through other means, such as a cert manager.
    enabled: true
    ## Whether to generate a self-signed certificate. Since the certificate is
    ## self-signed, it will not be trusted by clients and should absolutely not
    ## be used for production, but having this enabled as a default effectively
    ## discourages the more heavy-handed option to disable TLS entirely. If TLS
    ## is enabled and cert generation is DISABLED, users MUST provide their own
    ## cert and private key below OR create a cert secret named <Helm release
    ## name>-server-cert in the same namespace as K8sTA.
    generateSelfSignedCert: true
    # cert: base 64 encoded cert goes here
    # key: base 64 encoded key goes here

  ingress:
    ## Whether to enable ingress. By default, this is disabled. Enabling ingress
    ## is advanced usage.
    enabled: false
    ## Optionally use annotations specified by your ingress controller's
    ## documentation to customize the behavior of the ingress resource.
    annotations:
      # kubernetes.io/ingress.class: nginx
    ## From Kubernetes 1.18+ this field is supported in case your ingress
    ## controller supports it. When set, you do not need to add the ingress
    ## class as annotation.
    ingressClassName:
    tls:
      ## Whether to enable TLS. If true then you MUST do ONE of three things to
      ## ensure the existence of a TLS certificate:
      ##
      ## 1. Set generateSelfSignedCert below to true (the default)
      ## 2. OR Set values for BOTH the cert and key fields below
      ## 3. OR create a cert secret named
      ##    <Helm release name>-server-ingress-cert in the same namespace as
      ##    K8sTA. This secret could be created manually or through other
      ##    means, such as a cert manager.
      ##
      ## Note there is a wide disparity in the feature set of various ingress
      ## controllers and some ingress controllers may be able to provision a
      ## certificate for you even with TLS disabled here. Consult your ingress
      ## controller's documentation.
      enabled: true
      ## Whether to generate a self-signed certificate. Since the certificate is
      ## self-signed, it will not be trusted by clients and should absolutely
      ## not be used for production, but having this enabled as a default
      ## effectively discourages the more heavy-handed option to disable TLS
      ## entirely. If ingress TLS is enabled and cert generation is DISABLED,
      ## users MUST provide their own cert and private key below OR create a
      ## cert secret named <Helm release name>-server-ingress-cert in the same
      ## namespace as K8sTA.
      generateSelfSignedCert: true
      # cert: base 64 encoded cert goes here
      # key: base 64 encoded key goes here

  dockerhub:
    ## The tokens field defines tokens (shared secrets) that may be used for
    ## authenticating to this server. The keys are completely ignored by the
    ## server and only the values (tokens) matter. The keys only serve as
    ## recognizable token identifiers for human operators.
    ##
    ## Tokens should be lengthy and hard-to-guess. Also, because tokens are
    ## included in webhook requests via URL query parameters, it is highly
    ## recommended to restrict tokens to only base64 characters to avoid the
    ## complication of having to URL encode tokens prior to use.
    tokens: {}
      ## Example:
      # myToken: MySharedSecret

  resources: {}
    # We usually recommend not to specify default resources and to leave this as
    # a conscious choice for the user. This also increases chances charts run on
    # environments with little resources, such as KinD. If you do want to
    # specify resources, uncomment the following lines, adjust them as
    # necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

## All settings for the controller component
controller:

  logLevel: INFO

  resources: {}
    # We usually recommend not to specify default resources and to leave this as
    # a conscious choice for the user. This also increases chances charts run on
    # environments with little resources, such as KinD. If you do want to
    # specify resources, uncomment the following lines, adjust them as
    # necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []
