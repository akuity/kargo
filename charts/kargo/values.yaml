## Default values for kargo.
## A human-readable version can be found in the chart README.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## @section Image Parameters
image:
  ## @param image.repository Image repository of Kargo
  repository: ghcr.io/akuity/kargo
  ## @param image.tag Overrides the image tag. The default tag is the value of `.Chart.AppVersion`
  tag: ""
  ## @param image.pullPolicy Image pull policy
  pullPolicy: IfNotPresent

## @section RBAC
rbac:
  ## @param rbac.installClusterRoles Indicates if `ClusterRoles` should be installed.
  installClusterRoles: true
  ## @param rbac.installClusterRoleBindings Indicates if `ClusterRoleBindings` should be installed.
  installClusterRoleBindings: true

## @section KubeConfigs
## @descriptionStart
## Optionally point to Kubernetes Secrets containing kubeconfig for a remote
## Kubernetes cluster hosting Kargo resources and/or a remote Kubernetes cluster
## hosting Argo CD resources. This is useful for cases where the Kargo
## controller is running somewhere other than the cluster(s) it is managing. The
## config for Kargo and Argo CD can be the same, different, or omitted entirely.
## When omitted, the controller will fall back on in-cluster configuration.
## In the average case, these settings should be left alone.
## @descriptionEnd
## @skip kubeconfigSecrets
kubeconfigSecrets: {}
  ## @param kubeconfigSecrets.kargo [nullable] Kubernetes `Secret` name containing kubeconfig for a remote Kubernetes cluster hosting Kargo resources
  # kargo: ""
  ## @param kubeconfigSecrets.argocd [nullable] Kubernetes `Secret` name containing kubeconfig for a remote Kubernetes cluster hosting Argo CD resources
  # argocd: ""

## @section API
api:
  ## @param api.enabled Whether the API server is enabled.
  enabled: true
  ## @param api.replicas The number of API server pods.
  replicas: 1
  ## @param api.host The domain name where Kargo's API server will be accessible. This is used for (when applicable) generation of an Ingress resource, certificates, and the OpenID Connect issuer and callback URLs. Note: The protocol (http vs https) should not be specified and is automatically inferred from other configuration options.
  host: localhost
  ## @param api.logLevel The log level for the API server.
  logLevel: INFO
  ## @param api.resources Resources limits and requests for the api containers.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param api.nodeSelector Node selector for api pods.
  nodeSelector: {}
  ## @param api.tolerations Tolerations for api pods.
  tolerations: []

  tls:
    ## @param api.tls.enabled Whether to enable TLS directly on the API server. This is helpful if you do not intend to use an ingress controller or if you require TLS end-to-end. All other settings in this section will be ignored when this is set to `false`.
    enabled: true
    ## @param api.tls.selfSignedCert Whether to generate a self-signed certificate for use by the API server. If `true`, `cert-manager` CRDs **must** be present in the cluster. Kargo will create and use its own namespaced issuer. If `false`, a cert secret named `kargo-api-cert` **must** be provided in the same namespace as Kargo.
    selfSignedCert: true

  ingress:
    ## @param api.ingress.enabled Whether to enable ingress. By default, this is disabled. Enabling ingress is advanced usage.
    enabled: false
    ## @param api.ingress.annotations Annotations specified by your ingress controller to customize the behavior of the ingress resource.
    annotations:
      # kubernetes.io/ingress.class: nginx
    ## @param api.ingress.ingressClassName From Kubernetes 1.18+, this field is supported if implemented by your ingress controller. When set, you do not need to add the ingress class as annotation.
    ingressClassName:
    tls:
      ## @param api.ingress.tls.enabled Whether to enable TLS for the ingress. All other settings in this section will be ignored when this is set to `false`.
      enabled: true
      ## @param api.ingress.tls.selfSignedCert Whether to generate a self-signed certificate for use with the API server's Ingress resource. If `true`, `cert-manager` CRDs **must** be present in the cluster. Kargo will create and use its own namespaced issuer. If `false`, a cert secret named `kargo-api-ingress-cert` **must** be provided in the same namespace as Kargo.
      selfSignedCert: true

  service:
    ## @param api.service.type If you're not going to use an ingress controller, you may want to change this value to `LoadBalancer` for production deployments. If running locally, you may want to change it to `NodePort` OR leave it as `ClusterIP` and use `kubectl port-forward` to map a port on the local network interface to the service.
    type: ClusterIP
    ## @param api.service.nodePort [nullable] Host port the `Service` will be mapped to when `type` is either `NodePort` or `LoadBalancer`. If not specified, Kubernetes chooses.
    # nodePort:

  adminAccount:
    ## @param api.adminAccount.enabled Whether to enable the admin account.
    enabled: true
    ## @param api.adminAccount.passwordHash Bcrypt password hash for the admin account. If specified, will ignore `password`. A value **must** be provided for either this field or `password`.
    passwordHash: ""
    ## @param api.adminAccount.password A password for the admin account. Ignored if `passwordHash` is set. It is suggested that you generate this using a password manager or a command like: `openssl rand -base64 29 \| tr -d "=+/" \| cut -c1-25`. A value **must** be provided for either this field or `passwordHash`.
    password: ""
    ## @param api.adminAccount.tokenSigningKey Key used to sign ID tokens (JWTs) for the admin account. It is suggested that you generate this using a password manager or a command like: `openssl rand -base64 29 \| tr -d "=+/" \| cut`. A value **must** be provided for this field.
    tokenSigningKey: ""
    ## @param api.adminAccount.tokenTTL Specifies how long ID tokens for the admin account are valid. (i.e. The expiry will be the time of issue plus this duration.)
    tokenTTL: 24h

  ## All settings related to enabling OpenID Connect as an authentication
  ## method.
  oidc:
    ## @param api.oidc.enabled Whether to enable authentication using Open ID Connect.
    ## NOTE: Kargo uses the Authorization Code Flow with Proof Key for Code Exchange (PKCE) and does not require a client secret. Some OIDC identity providers may not support this. If yours does not, enabling the optional Dex server and configuring its connectors can adapt most identity providers to work this way.
    ## Note also: The PKCE code challenge used by Kargo is SHA256 hashed.
    ## For more information about PKCE, please visit: https://oauth.net/2/pkce/
    enabled: false
    ## @param api.oidc.issuerURL The issuer URL for the identity provider. If Dex is enabled, this value will be ignored and the issuer URL will be automatically configured. If Dex is not enabled, this should be set to the issuer URL provided to you by your identity provider.
    issuerURL:
    ## @param api.oidc.clientID The client ID for the OIDC client. If Dex is enabled, this value will be ignored and the client ID will be automatically configured. If Dex is not enabled, this should be set to the client ID provided to you by your identity provider.
    clientID:
    ## @param api.oidc.cliClientID The client ID for the OIDC client used by CLI (optional). Needed by some OIDC providers (such as Dex) that require a separate Client ID for web app login vs. CLI login (`http://localhost`). If Dex is enabled, this value will be ignored and cli client ID will be automatically configured. If Dex is not enabled, and a different client app is configured for localhost CLI login, this should be the client ID configured in the IdP.
    cliClientID:

    dex:
      ## @param api.oidc.dex.enabled Whether to enable Dex as the identity provider. When set to true, the Kargo installation will include a Dex server and the Kargo API server will be configured to make the /dex endpoint a reverse proxy for the Dex server.
      enabled: false

      image: 
        ## @param api.oidc.dex.image.repository Image repository of Dex
        repository: ghcr.io/dexidp/dex
        ## @param api.oidc.dex.image.tag Image tag for Dex.
        tag: v2.37.0
        ## @param api.oidc.dex.image.pullPolicy Image pull policy for Dex.
        pullPolicy: IfNotPresent

      tls:
        ## @param api.oidc.dex.tls.selfSignedCert Whether to generate a self-signed certificate for use with Dex. If `true`, `cert-manager` CRDs **must** be present in the cluster. Kargo will create and use its own namespaced issuer. If `false`, a cert secret named `kargo-dex-server-cert` **must** be provided in the same namespace as Kargo. There is no provision for running Dex without TLS.
        selfSignedCert: true
      ## @param api.oidc.dex.skipApprovalScreen Whether to skip Dex's own approval screen. Since upstream identity providers will already request user consent, this second approval screen from Dex can be both superfluous and confusing.
      skipApprovalScreen: true
      ## @param api.oidc.dex.connectors Configure [Dex connectors](https://dexidp.io/docs/connectors/) to one or more upstream identity providers.
      connectors: []
      # - id: mock
      #   name: Example
      #   type: mockCallback
      ## Google Example
      # - id: google
      #   name: Google
      #   type: google
      #   config:
      #     clientID: <your client ID>
      #     clientSecret: <your client secret>
      #     redirectURI: <http(s)>://<api.host>/dex/callback
      ## GitHub Example
      # - id: github
      #   name: GitHub
      #   type: github  
      #   config:
      #     clientID: <your client ID>
      #     clientSecret: <your client secret>
      #     redirectURI: <http(s)>://<api.host>/dex/callback

      ## @param api.oidc.dex.resources Resources limits and requests for the Dex server containers.
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
      ## @param api.oidc.dex.nodeSelector Node selector for Dex server pods.
      nodeSelector: {}
      ## @param api.oidc.dex.tolerations Tolerations for Dex server pods.
      tolerations: []

  argocd:
    ## @param api.argocd.urls Mapping of Argo CD shards names to URLs to support deep links to Argo CD URLs. If sharding is not used, map the empty string to the single Argo CD URL.
    urls:
      # "": https://argocd.example.com
      # "shard2": https://argocd2.example.com

## @section Controller
## All settings for the controller component
controller:

  ## @param controller.enabled Whether the controller is enabled.
  enabled: true

  ## @param controller.shardName [nullable] Set a shard name only if you are running multiple controllers backed by a single underlying control plane. Setting a shard name will cause this controller to operate **only** on resources with a matching shard name. Leaving the shard name undefined will designate this controller as the default controller that is responsible exclusively for resources that are **not** assigned to a specific shard. Leaving this undefined is the correct choice when you are not using sharding at all. It is also the correct setting if you are using sharding and want to designate a controller as the default for handling resources not assigned to a specific shard. In most cases, this setting should simply be left alone.
  # shardName:

  ## All settings relating to the Argo CD control plane this controller will
  ## integrate with.
  argocd:
    ## @param controller.argocd.namespace The namespace into which Argo CD is installed.
    namespace: argocd
    ## @param controller.argocd.watchArgocdNamespaceOnly Specifies whether the reconciler that watches Argo CD Applications for the sake of forcing related Stages to reconcile should only watch Argo CD Application resources residing in Argo CD's own namespace. Note: Older versions of Argo CD only supported Argo CD Application resources in Argo CD's own namespace, but newer versions support Argo CD Application resources in any namespace. This should usually be left as `false`.
    watchArgocdNamespaceOnly: false
    ## @param controller.argocd.enableCredentialBorrowing Specifies whether Kargo may borrow repository credentials (specially formatted and specially annotated Secrets) from Argo CD.
    enableCredentialBorrowing: true

  ## @param controller.logLevel The log level for the controller.
  logLevel: INFO

  ## @param controller.resources Resources limits and requests for the controller containers.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param controller.nodeSelector Node selector for controller pods.
  nodeSelector: {}
  ## @param controller.tolerations Tolerations for controller pods.
  tolerations: []

## @section Webhooks
webhooks:
  ## @param webhooks.register Whether to create `ValidatingWebhookConfiguration` and `MutatingWebhookConfiguration` resources.
  register: true

## @section Webhooks Server
webhooksServer:
  ## @param webhooksServer.enabled Whether the webhooks server is enabled.
  enabled: true
  ## @param webhooksServer.replicas The number of webhooks server pods.
  replicas: 1
  ## @param webhooksServer.logLevel The log level for the webhooks server.
  logLevel: INFO

  tls:
    ## @param webhooksServer.tls.selfSignedCert  Whether to generate a self-signed certificate for the controller's built-in webhook server. If `true`, `cert-manager` CRDs **must** be present in the cluster. Kargo will create and use its own namespaced issuer. If `false`, a cert secret named `kargo-webhooks-server-cert` **must** be provided in the same namespace as Kargo. There is no provision for webhooks without TLS.
    selfSignedCert: true
  ## @param webhooksServer.resources Resources limits and requests for the webhooks server containers.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param webhooksServer.nodeSelector Node selector for the webhooks server pods.
  nodeSelector: {}
  ## @param webhooksServer.tolerations Tolerations for the webhooks server pods.
  tolerations: []

## @section Garbage Collector
garbageCollector:

  ## @param garbageCollector.enabled Whether the garbage collector is enabled.
  enabled: true

  ## @param garbageCollector.schedule When to run the garbage collector.
  schedule: "0 * * * *"
  ## @param garbageCollector.workers The number of concurrent workers to run. Tuning this too low will result in slow garbage collection. Tuning this too high will result in too many API calls and may result in throttling.
  workers: 3
  ## @param garbageCollector.maxRetainedPromotions The maximum number of Promotions in terminal phases PER PROJECT that may be spared by the garbage collector.
  maxRetainedPromotions: 20
  ## @param garbageCollector.logLevel The log level for the garbage collector.
  logLevel: INFO
  ## @param garbageCollector.resources Resources limits and requests for the garbage collector containers.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  ## @param garbageCollector.nodeSelector Node selector for the garbage collector pods.
  nodeSelector: {}
  ## @param garbageCollector.tolerations Tolerations for the garbage collector pods.
  tolerations: []
