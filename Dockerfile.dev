FROM golang:1.22.2-bookworm

ARG TARGETARCH

ARG BUF_VERSION=v1.26.1
ARG CONTROLLER_GEN_VERSION=v0.14.0
ARG GOLANGCI_LINT_VERSION=1.56.2
ARG HELM_VERSION=v3.12.3
ARG NODE_MAJOR=20
ARG PROTOC_VERSION=25.3

RUN apt update && apt install -y ca-certificates curl gnupg unzip \
    && export PROTOC_REL=protoc-${PROTOC_VERSION}-linux-$([ $(uname -m) = "aarch64" ] && echo "aarch" || echo "x86")_64.zip \
    && curl -sSfLO https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_REL} \
    && unzip ${PROTOC_REL} -d protoc \
    && mv protoc /usr/local \
    && ln -s /usr/local/protoc/bin/protoc /usr/local/bin \
    && rm ${PROTOC_REL} \
    && go install github.com/bufbuild/buf/cmd/buf@${BUF_VERSION} \
    && go install sigs.k8s.io/controller-tools/cmd/controller-gen@${CONTROLLER_GEN_VERSION} \
    && cd /usr/local/bin \
    && curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VERSION}/golangci-lint-${GOLANGCI_LINT_VERSION}-linux-${TARGETARCH}.tar.gz \
        | tar xvz golangci-lint-${GOLANGCI_LINT_VERSION}-linux-${TARGETARCH}/golangci-lint --strip-components=1 \
    && curl -sSfL https://get.helm.sh/helm-$HELM_VERSION-linux-${TARGETARCH}.tar.gz \
        | tar xvz linux-${TARGETARCH}/helm --strip-components=1 \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update && apt-get install nodejs -y \
    && curl -fsSL https://get.pnpm.io/install.sh | bash \
    && mv /root/.local/share/pnpm/pnpm /usr/bin

ARG USER_ID=1000
ARG GROUP_ID=1000

# To ensure mounts end up with the right permissions on Linux systems,
# create a non-root user with the provided UID and GUID.
RUN addgroup --gid ${GROUP_ID} user \
    && adduser --disabled-password --gecos '' --uid ${USER_ID} --gid ${GROUP_ID} user \
    && mkdir -p /workspaces/kargo/ui/node_modules \
    && chown -R ${USER_ID}:${GROUP_ID} /workspaces/kargo \
    && chown -R ${USER_ID}:${GROUP_ID} /go

USER user

# Configure user writable Go Mod cache path and prepare it to ensure
# it does not end up being owned by root when mounted
ENV GOMODCACHE=/home/user/gocache
RUN mkdir -p $GOMODCACHE

# Configure user writable "global" NPM bin directory,
# and add to path
ENV NPM_CONFIG_PREFIX=/home/user/.npm-global
ENV PATH=$NPM_CONFIG_PREFIX/bin:$PATH
