{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Warehouse is a source of Freight.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec describes sources of artifacts.",
      "properties": {
        "subscriptions": {
          "description": "Subscriptions describes sources of artifacts to be included in Freight\nproduced by this Warehouse.",
          "items": {
            "description": "RepoSubscription describes a subscription to ONE OF a Git repository, a\ncontainer image repository, or a Helm chart repository.",
            "properties": {
              "chart": {
                "description": "Chart describes a subscription to a Helm chart repository.",
                "properties": {
                  "name": {
                    "description": "Name specifies the name of a Helm chart to subscribe to within a classic\nchart repository specified by the RepoURL field. This field is required\nwhen the RepoURL field points to a classic chart repository and MUST\notherwise be empty.",
                    "type": "string"
                  },
                  "repoURL": {
                    "description": "RepoURL specifies the URL of a Helm chart repository. It may be a classic\nchart repository (using HTTP/S) OR a repository within an OCI registry.\nClassic chart repositories can contain differently named charts. When this\nfield points to such a repository, the Name field MUST also be used\nto specify the name of the desired chart within that repository. In the\ncase of a repository within an OCI registry, the URL implicitly points to\na specific chart and the Name field MUST NOT be used. The RepoURL field is\nrequired.",
                    "minLength": 1,
                    "pattern": "^(((https?)|(oci))://)([\\w\\d\\.\\-]+)(:[\\d]+)?(/.*)*$",
                    "type": "string"
                  },
                  "semverConstraint": {
                    "description": "SemverConstraint specifies constraints on what new chart versions are\npermissible. This field is optional. When left unspecified, there will be\nno constraints, which means the latest version of the chart will always be\nused. Care should be taken with leaving this field unspecified, as it can\nlead to the unanticipated rollout of breaking changes.\nMore info: https://github.com/masterminds/semver#checking-version-constraints",
                    "type": "string"
                  }
                },
                "required": [
                  "repoURL"
                ],
                "type": "object"
              },
              "git": {
                "description": "Git describes a subscriptions to a Git repository.",
                "properties": {
                  "allowTags": {
                    "description": "AllowTags is a regular expression that can optionally be used to limit the\ntags that are considered in determining the newest commit of interest. The\nvalue in this field only has any effect when the CommitSelectionStrategy is\nLexical, NewestTag, or SemVer. This field is optional.",
                    "type": "string"
                  },
                  "branch": {
                    "description": "Branch references a particular branch of the repository. The value in this\nfield only has any effect when the CommitSelectionStrategy is\nNewestFromBranch or left unspecified (which is implicitly the same as\nNewestFromBranch). This field is optional. When left unspecified, (and the\nCommitSelectionStrategy is NewestFromBranch or unspecified), the\nsubscription is implicitly to the repository's default branch.",
                    "minLength": 1,
                    "pattern": "^\\w+([-/]\\w+)*$",
                    "type": "string"
                  },
                  "commitSelectionStrategy": {
                    "default": "NewestFromBranch",
                    "description": "CommitSelectionStrategy specifies the rules for how to identify the newest\ncommit of interest in the repository specified by the RepoURL field. This\nfield is optional. When left unspecified, the field is implicitly treated\nas if its value were \"NewestFromBranch\".",
                    "enum": [
                      "Lexical",
                      "NewestFromBranch",
                      "NewestTag",
                      "SemVer"
                    ],
                    "type": "string"
                  },
                  "ignoreTags": {
                    "description": "IgnoreTags is a list of tags that must be ignored when determining the\nnewest commit of interest. No regular expressions or glob patterns are\nsupported yet. The value in this field only has any effect when the\nCommitSelectionStrategy is Lexical, NewestTag, or SemVer. This field is\noptional.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "insecureSkipTLSVerify": {
                    "description": "InsecureSkipTLSVerify specifies whether certificate verification errors\nshould be ignored when connecting to the repository. This should be enabled\nonly with great caution.",
                    "type": "boolean"
                  },
                  "repoURL": {
                    "description": "URL is the repository's URL. This is a required field.",
                    "minLength": 1,
                    "pattern": "^https?://(\\w+([\\.-]\\w+)*@)?\\w+([\\.-]\\w+)*(:[\\d]+)?(/.*)?$",
                    "type": "string"
                  },
                  "semverConstraint": {
                    "description": "SemverConstraint specifies constraints on what new tagged commits are\nconsidered in determining the newest commit of interest. The value in this\nfield only has any effect when the CommitSelectionStrategy is SemVer. This\nfield is optional. When left unspecified, there will be no constraints,\nwhich means the latest semantically tagged commit will always be used. Care\nshould be taken with leaving this field unspecified, as it can lead to the\nunanticipated rollout of breaking changes.",
                    "type": "string"
                  }
                },
                "required": [
                  "repoURL"
                ],
                "type": "object"
              },
              "image": {
                "description": "Image describes a subscription to container image repository.",
                "properties": {
                  "allowTags": {
                    "description": "AllowTags is a regular expression that can optionally be used to limit the\nimage tags that are considered in determining the newest version of an\nimage. This field is optional.",
                    "type": "string"
                  },
                  "gitRepoURL": {
                    "description": "GitRepoURL optionally specifies the URL of a Git repository that contains\nthe source code for the image repository referenced by the RepoURL field.\nWhen this is specified, Kargo MAY be able to infer and link to the exact\nrevision of that source code that was used to build the image.",
                    "pattern": "^https?://(\\w+([\\.-]\\w+)*@)?\\w+([\\.-]\\w+)*(:[\\d]+)?(/.*)?$",
                    "type": "string"
                  },
                  "ignoreTags": {
                    "description": "IgnoreTags is a list of tags that must be ignored when determining the\nnewest version of an image. No regular expressions or glob patterns are\nsupported yet. This field is optional.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "imageSelectionStrategy": {
                    "default": "SemVer",
                    "description": "ImageSelectionStrategy specifies the rules for how to identify the newest version\nof the image specified by the RepoURL field. This field is optional. When\nleft unspecified, the field is implicitly treated as if its value were\n\"SemVer\".",
                    "enum": [
                      "Digest",
                      "Lexical",
                      "NewestBuild",
                      "SemVer"
                    ],
                    "type": "string"
                  },
                  "platform": {
                    "description": "Platform is a string of the form <os>/<arch> that limits the tags that can\nbe considered when searching for new versions of an image. This field is\noptional. When left unspecified, it is implicitly equivalent to the\nOS/architecture of the Kargo controller. Care should be taken to set this\nvalue correctly in cases where the image referenced by this\nImageRepositorySubscription will run on a Kubernetes node with a different\nOS/architecture than the Kargo controller. At present this is uncommon, but\nnot unheard of.",
                    "type": "string"
                  },
                  "repoURL": {
                    "description": "RepoURL specifies the URL of the image repository to subscribe to. The\nvalue in this field MUST NOT include an image tag. This field is required.",
                    "minLength": 1,
                    "pattern": "^(\\w+([\\.-]\\w+)*(:[\\d]+)?/)?(\\w+([\\.-]\\w+)*)(/\\w+([\\.-]\\w+)*)*$",
                    "type": "string"
                  },
                  "semverConstraint": {
                    "description": "SemverConstraint specifies constraints on what new image versions are\npermissible. The value in this field only has any effect when the\nImageSelectionStrategy is SemVer or left unspecified (which is implicitly\nthe same as SemVer). This field is also optional. When left unspecified,\n(and the ImageSelectionStrategy is SemVer or unspecified), there will be no\nconstraints, which means the latest semantically tagged version of an image\nwill always be used. Care should be taken with leaving this field\nunspecified, as it can lead to the unanticipated rollout of breaking\nchanges. Refer to Image Updater documentation for more details.\nMore info: https://github.com/masterminds/semver#checking-version-constraints",
                    "type": "string"
                  }
                },
                "required": [
                  "repoURL"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "subscriptions"
      ],
      "type": "object"
    },
    "status": {
      "description": "Status describes the Warehouse's most recently observed state.",
      "properties": {
        "message": {
          "description": "Message describes any errors that are preventing the Warehouse controller\nfrom polling repositories to discover new Freight.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration represents the .metadata.generation that this Warehouse\nwas reconciled against.",
          "format": "int64",
          "maximum": 9223372036854776000,
          "minimum": -9223372036854776000,
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}