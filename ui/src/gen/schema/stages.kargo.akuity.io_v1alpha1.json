{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Stage is the Kargo API's main type.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Spec describes sources of Freight used by the Stage and how to incorporate\nFreight into the Stage.",
      "properties": {
        "promotionTemplate": {
          "description": "PromotionTemplate describes how to incorporate Freight into the Stage\nusing a Promotion.",
          "properties": {
            "spec": {
              "description": "PromotionTemplateSpec describes the (partial) specification of a Promotion\nfor a Stage. This is a template that can be used to create a Promotion for a\nStage.",
              "properties": {
                "steps": {
                  "description": "Steps specifies the directives to be executed as part of a Promotion.\nThe order in which the directives are executed is the order in which they\nare listed in this field.",
                  "items": {
                    "description": "PromotionStep describes a directive to be executed as part of a Promotion.",
                    "properties": {
                      "as": {
                        "description": "As is the alias this step can be referred to as.",
                        "type": "string"
                      },
                      "config": {
                        "description": "Config is the configuration for the directive.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "uses": {
                        "description": "Uses identifies a runner that can execute this step.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "uses"
                    ],
                    "type": "object"
                  },
                  "minItems": 1,
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "spec"
          ],
          "type": "object"
        },
        "requestedFreight": {
          "description": "RequestedFreight expresses the Stage's need for certain pieces of Freight,\neach having originated from a particular Warehouse. This list must be\nnon-empty. In the common case, a Stage will request Freight having\noriginated from just one specific Warehouse. In advanced cases, requesting\nFreight from multiple Warehouses provides a method of advancing new\nartifacts of different types through parallel pipelines at different\nspeeds. This can be useful, for instance, if a Stage is home to multiple\nmicroservices that are independently versioned.",
          "items": {
            "description": "FreightRequest expresses a Stage's need for Freight having originated from a\nparticular Warehouse.",
            "properties": {
              "origin": {
                "description": "Origin specifies from where the requested Freight must have originated.\nThis is a required field.",
                "properties": {
                  "kind": {
                    "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                    "enum": [
                      "Warehouse"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                    "type": "string"
                  }
                },
                "required": [
                  "kind",
                  "name"
                ],
                "type": "object"
              },
              "sources": {
                "description": "Sources describes where the requested Freight may be obtained from. This is\na required field.",
                "properties": {
                  "direct": {
                    "description": "Direct indicates the requested Freight may be obtained directly from the\nWarehouse from which it originated. If this field's value is false, then\nthe value of the Stages field must be non-empty. i.e. Between the two\nfields, at least one source must be specified.",
                    "type": "boolean"
                  },
                  "stages": {
                    "description": "Stages identifies other \"upstream\" Stages as potential sources of the\nrequested Freight. If this field's value is empty, then the value of the\nDirect field must be true. i.e. Between the two fields, at least on source\nmust be specified.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "origin",
              "sources"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        },
        "shard": {
          "description": "Shard is the name of the shard that this Stage belongs to. This is an\noptional field. If not specified, the Stage will belong to the default\nshard. A defaulting webhook will sync the value of the\nkargo.akuity.io/shard label with the value of this field. When this field\nis empty, the webhook will ensure that label is absent.",
          "type": "string"
        },
        "verification": {
          "description": "Verification describes how to verify a Stage's current Freight is fit for\npromotion downstream.",
          "properties": {
            "analysisRunMetadata": {
              "description": "AnalysisRunMetadata contains optional metadata that should be applied to\nall AnalysisRuns.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional annotations to apply to an AnalysisRun.",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional labels to apply to an AnalysisRun.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "analysisTemplates": {
              "description": "AnalysisTemplates is a list of AnalysisTemplates from which AnalysisRuns\nshould be created to verify a Stage's current Freight is fit to be promoted\ndownstream.",
              "items": {
                "description": "AnalysisTemplateReference is a reference to an AnalysisTemplate.",
                "properties": {
                  "name": {
                    "description": "Name is the name of the AnalysisTemplate in the same project/namespace as\nthe Stage.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "args": {
              "description": "Args lists arguments that should be added to all AnalysisRuns.",
              "items": {
                "description": "AnalysisRunArgument represents an argument to be added to an AnalysisRun.",
                "properties": {
                  "name": {
                    "description": "Name is the name of the argument.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is the value of the argument.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "requestedFreight"
      ],
      "type": "object"
    },
    "status": {
      "description": "Status describes the Stage's current and recent Freight, health, and more.",
      "properties": {
        "currentPromotion": {
          "description": "CurrentPromotion is a reference to the currently Running promotion.",
          "properties": {
            "finishedAt": {
              "description": "FinishedAt is the time at which the Promotion was completed.",
              "format": "date-time",
              "type": "string"
            },
            "freight": {
              "description": "Freight is the freight being promoted.",
              "properties": {
                "charts": {
                  "description": "Charts describes specific versions of specific Helm charts.",
                  "items": {
                    "description": "Chart describes a specific version of a Helm chart.",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of the chart.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version specifies a particular version of the chart.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "commits": {
                  "description": "Commits describes specific Git repository commits.",
                  "items": {
                    "description": "GitCommit describes a specific commit from a specific Git repository.",
                    "properties": {
                      "author": {
                        "description": "Author is the author of the commit.",
                        "type": "string"
                      },
                      "branch": {
                        "description": "Branch denotes the branch of the repository where this commit was found.",
                        "type": "string"
                      },
                      "committer": {
                        "description": "Committer is the person who committed the commit.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL is the URL of a Git repository.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "images": {
                  "description": "Images describes specific versions of specific container images.",
                  "items": {
                    "description": "Image describes a specific version of a container image.",
                    "properties": {
                      "digest": {
                        "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                        "type": "string"
                      },
                      "gitRepoURL": {
                        "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL describes the repository in which the image can be found.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                  "type": "string"
                },
                "origin": {
                  "description": "Origin describes a kind of Freight in terms of its origin.",
                  "properties": {
                    "kind": {
                      "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                      "enum": [
                        "Warehouse"
                      ],
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "name": {
              "description": "Name is the name of the Promotion.",
              "type": "string"
            },
            "status": {
              "description": "Status is the (optional) status of the Promotion.",
              "properties": {
                "currentStep": {
                  "description": "CurrentStep is the index of the current promotion step being executed. This\npermits steps that have already run successfully to be skipped on\nsubsequent reconciliations attempts.",
                  "format": "int64",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000,
                  "type": "integer"
                },
                "finishedAt": {
                  "description": "FinishedAt is the time when the promotion was completed.",
                  "format": "date-time",
                  "type": "string"
                },
                "freight": {
                  "description": "Freight is the detail of the piece of freight that was referenced by this promotion.",
                  "properties": {
                    "charts": {
                      "description": "Charts describes specific versions of specific Helm charts.",
                      "items": {
                        "description": "Chart describes a specific version of a Helm chart.",
                        "properties": {
                          "name": {
                            "description": "Name specifies the name of the chart.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version specifies a particular version of the chart.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "commits": {
                      "description": "Commits describes specific Git repository commits.",
                      "items": {
                        "description": "GitCommit describes a specific commit from a specific Git repository.",
                        "properties": {
                          "author": {
                            "description": "Author is the author of the commit.",
                            "type": "string"
                          },
                          "branch": {
                            "description": "Branch denotes the branch of the repository where this commit was found.",
                            "type": "string"
                          },
                          "committer": {
                            "description": "Committer is the person who committed the commit.",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL is the URL of a Git repository.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "images": {
                      "description": "Images describes specific versions of specific container images.",
                      "items": {
                        "description": "Image describes a specific version of a container image.",
                        "properties": {
                          "digest": {
                            "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                            "type": "string"
                          },
                          "gitRepoURL": {
                            "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL describes the repository in which the image can be found.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "Origin describes a kind of Freight in terms of its origin.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                          "enum": [
                            "Warehouse"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "freightCollection": {
                  "description": "FreightCollection contains the details of the piece of Freight referenced\nby this Promotion as well as any additional Freight that is carried over\nfrom the target Stage's current state.",
                  "properties": {
                    "id": {
                      "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                      "type": "string"
                    },
                    "items": {
                      "additionalProperties": {
                        "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                        "properties": {
                          "charts": {
                            "description": "Charts describes specific versions of specific Helm charts.",
                            "items": {
                              "description": "Chart describes a specific version of a Helm chart.",
                              "properties": {
                                "name": {
                                  "description": "Name specifies the name of the chart.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version specifies a particular version of the chart.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commits": {
                            "description": "Commits describes specific Git repository commits.",
                            "items": {
                              "description": "GitCommit describes a specific commit from a specific Git repository.",
                              "properties": {
                                "author": {
                                  "description": "Author is the author of the commit.",
                                  "type": "string"
                                },
                                "branch": {
                                  "description": "Branch denotes the branch of the repository where this commit was found.",
                                  "type": "string"
                                },
                                "committer": {
                                  "description": "Committer is the person who committed the commit.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL is the URL of a Git repository.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "images": {
                            "description": "Images describes specific versions of specific container images.",
                            "items": {
                              "description": "Image describes a specific version of a container image.",
                              "properties": {
                                "digest": {
                                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                  "type": "string"
                                },
                                "gitRepoURL": {
                                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL describes the repository in which the image can be found.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                            "type": "string"
                          },
                          "origin": {
                            "description": "Origin describes a kind of Freight in terms of its origin.",
                            "properties": {
                              "kind": {
                                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                "enum": [
                                  "Warehouse"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                      "type": "object"
                    },
                    "verificationHistory": {
                      "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                      "items": {
                        "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                        "properties": {
                          "actor": {
                            "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                            "type": "string"
                          },
                          "analysisRun": {
                            "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                            "properties": {
                              "name": {
                                "description": "Name is the name of the AnalysisRun.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace is the namespace of the AnalysisRun.",
                                "type": "string"
                              },
                              "phase": {
                                "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "namespace",
                              "phase"
                            ],
                            "type": "object"
                          },
                          "finishTime": {
                            "description": "FinishTime is the time at which the Verification process finished.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the identifier of the Verification process.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                            "type": "string"
                          },
                          "phase": {
                            "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "StartTime is the time at which the Verification process was started.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                "healthChecks": {
                  "description": "HealthChecks contains the health check directives to be executed after\nthe Promotion has completed.",
                  "items": {
                    "description": "HealthCheckStep describes a health check directive which can be executed by\na Stage to verify the health of a Promotion result.",
                    "properties": {
                      "config": {
                        "description": "Config is the configuration for the directive.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "uses": {
                        "description": "Uses identifies a runner that can execute this step.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "uses"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "lastHandledRefresh": {
                  "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                  "type": "string"
                },
                "message": {
                  "description": "Message is a display message about the promotion, including any errors\npreventing the Promotion controller from executing this Promotion.\ni.e. If the Phase field has a value of Failed, this field can be expected\nto explain why.",
                  "type": "string"
                },
                "phase": {
                  "description": "Phase describes where the Promotion currently is in its lifecycle.",
                  "type": "string"
                },
                "state": {
                  "description": "State stores the state of the promotion process between reconciliation\nattempts.",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "freightHistory": {
          "description": "FreightHistory is a list of recent Freight selections that were deployed\nto the Stage. By default, the last ten Freight selections are stored.\nThe first item in the list is the most recent Freight selection and\ncurrently deployed to the Stage, subsequent items are older selections.",
          "items": {
            "description": "FreightCollection is a collection of FreightReferences, each of which\nrepresents a piece of Freight that has been selected for deployment to a\nStage.",
            "properties": {
              "id": {
                "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                "type": "string"
              },
              "items": {
                "additionalProperties": {
                  "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                  "properties": {
                    "charts": {
                      "description": "Charts describes specific versions of specific Helm charts.",
                      "items": {
                        "description": "Chart describes a specific version of a Helm chart.",
                        "properties": {
                          "name": {
                            "description": "Name specifies the name of the chart.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version specifies a particular version of the chart.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "commits": {
                      "description": "Commits describes specific Git repository commits.",
                      "items": {
                        "description": "GitCommit describes a specific commit from a specific Git repository.",
                        "properties": {
                          "author": {
                            "description": "Author is the author of the commit.",
                            "type": "string"
                          },
                          "branch": {
                            "description": "Branch denotes the branch of the repository where this commit was found.",
                            "type": "string"
                          },
                          "committer": {
                            "description": "Committer is the person who committed the commit.",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL is the URL of a Git repository.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "images": {
                      "description": "Images describes specific versions of specific container images.",
                      "items": {
                        "description": "Image describes a specific version of a container image.",
                        "properties": {
                          "digest": {
                            "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                            "type": "string"
                          },
                          "gitRepoURL": {
                            "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL describes the repository in which the image can be found.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "Origin describes a kind of Freight in terms of its origin.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                          "enum": [
                            "Warehouse"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                "type": "object"
              },
              "verificationHistory": {
                "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                "items": {
                  "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                  "properties": {
                    "actor": {
                      "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                      "type": "string"
                    },
                    "analysisRun": {
                      "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                      "properties": {
                        "name": {
                          "description": "Name is the name of the AnalysisRun.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Namespace is the namespace of the AnalysisRun.",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "namespace",
                        "phase"
                      ],
                      "type": "object"
                    },
                    "finishTime": {
                      "description": "FinishTime is the time at which the Verification process finished.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "description": "ID is the identifier of the Verification process.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                      "type": "string"
                    },
                    "phase": {
                      "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "StartTime is the time at which the Verification process was started.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "freightSummary": {
          "description": "FreightSummary is human-readable text maintained by the controller that\nsummarizes what Freight is currently deployed to the Stage. For Stages that\nrequest a single piece of Freight AND the request has been fulfilled, this\nfield will simply contain the name of the Freight. For Stages that request\na single piece of Freight AND the request has NOT been fulfilled, or for\nStages that request multiple pieces of Freight, this field will contain a\nsummary of fulfilled/requested Freight. The existence of this field is a\nworkaround for kubectl limitations so that this complex but valuable\ninformation can be displayed in a column in response to `kubectl get\nstages`.",
          "type": "string"
        },
        "health": {
          "description": "Health is the Stage's last observed health.",
          "properties": {
            "argoCDApps": {
              "description": "ArgoCDApps describes the current state of any related ArgoCD Applications.",
              "items": {
                "description": "ArgoCDAppStatus describes the current state of a single ArgoCD Application.",
                "properties": {
                  "healthStatus": {
                    "description": "HealthStatus is the health of the ArgoCD Application.",
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "Name is the name of the ArgoCD Application.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace is the namespace of the ArgoCD Application.",
                    "type": "string"
                  },
                  "syncStatus": {
                    "description": "SyncStatus is the sync status of the ArgoCD Application.",
                    "properties": {
                      "revision": {
                        "type": "string"
                      },
                      "revisions": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "name",
                  "namespace"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "config": {
              "description": "Config is the opaque configuration of all health checks performed on this\nStage.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "issues": {
              "description": "Issues clarifies why a Stage in any state other than Healthy is in that\nstate. This field will always be the empty when a Stage is Healthy.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "output": {
              "description": "Output is the opaque output of all health checks performed on this Stage.",
              "x-kubernetes-preserve-unknown-fields": true
            },
            "status": {
              "description": "Status describes the health of the Stage.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "lastHandledRefresh": {
          "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
          "type": "string"
        },
        "lastPromotion": {
          "description": "LastPromotion is a reference to the last completed promotion.",
          "properties": {
            "finishedAt": {
              "description": "FinishedAt is the time at which the Promotion was completed.",
              "format": "date-time",
              "type": "string"
            },
            "freight": {
              "description": "Freight is the freight being promoted.",
              "properties": {
                "charts": {
                  "description": "Charts describes specific versions of specific Helm charts.",
                  "items": {
                    "description": "Chart describes a specific version of a Helm chart.",
                    "properties": {
                      "name": {
                        "description": "Name specifies the name of the chart.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                        "type": "string"
                      },
                      "version": {
                        "description": "Version specifies a particular version of the chart.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "commits": {
                  "description": "Commits describes specific Git repository commits.",
                  "items": {
                    "description": "GitCommit describes a specific commit from a specific Git repository.",
                    "properties": {
                      "author": {
                        "description": "Author is the author of the commit.",
                        "type": "string"
                      },
                      "branch": {
                        "description": "Branch denotes the branch of the repository where this commit was found.",
                        "type": "string"
                      },
                      "committer": {
                        "description": "Committer is the person who committed the commit.",
                        "type": "string"
                      },
                      "id": {
                        "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                        "type": "string"
                      },
                      "message": {
                        "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL is the URL of a Git repository.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "images": {
                  "description": "Images describes specific versions of specific container images.",
                  "items": {
                    "description": "Image describes a specific version of a container image.",
                    "properties": {
                      "digest": {
                        "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                        "type": "string"
                      },
                      "gitRepoURL": {
                        "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                        "type": "string"
                      },
                      "repoURL": {
                        "description": "RepoURL describes the repository in which the image can be found.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                  "type": "string"
                },
                "origin": {
                  "description": "Origin describes a kind of Freight in terms of its origin.",
                  "properties": {
                    "kind": {
                      "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                      "enum": [
                        "Warehouse"
                      ],
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "name": {
              "description": "Name is the name of the Promotion.",
              "type": "string"
            },
            "status": {
              "description": "Status is the (optional) status of the Promotion.",
              "properties": {
                "currentStep": {
                  "description": "CurrentStep is the index of the current promotion step being executed. This\npermits steps that have already run successfully to be skipped on\nsubsequent reconciliations attempts.",
                  "format": "int64",
                  "maximum": 9223372036854776000,
                  "minimum": -9223372036854776000,
                  "type": "integer"
                },
                "finishedAt": {
                  "description": "FinishedAt is the time when the promotion was completed.",
                  "format": "date-time",
                  "type": "string"
                },
                "freight": {
                  "description": "Freight is the detail of the piece of freight that was referenced by this promotion.",
                  "properties": {
                    "charts": {
                      "description": "Charts describes specific versions of specific Helm charts.",
                      "items": {
                        "description": "Chart describes a specific version of a Helm chart.",
                        "properties": {
                          "name": {
                            "description": "Name specifies the name of the chart.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version specifies a particular version of the chart.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "commits": {
                      "description": "Commits describes specific Git repository commits.",
                      "items": {
                        "description": "GitCommit describes a specific commit from a specific Git repository.",
                        "properties": {
                          "author": {
                            "description": "Author is the author of the commit.",
                            "type": "string"
                          },
                          "branch": {
                            "description": "Branch denotes the branch of the repository where this commit was found.",
                            "type": "string"
                          },
                          "committer": {
                            "description": "Committer is the person who committed the commit.",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL is the URL of a Git repository.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "images": {
                      "description": "Images describes specific versions of specific container images.",
                      "items": {
                        "description": "Image describes a specific version of a container image.",
                        "properties": {
                          "digest": {
                            "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                            "type": "string"
                          },
                          "gitRepoURL": {
                            "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                            "type": "string"
                          },
                          "repoURL": {
                            "description": "RepoURL describes the repository in which the image can be found.",
                            "type": "string"
                          },
                          "tag": {
                            "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                      "type": "string"
                    },
                    "origin": {
                      "description": "Origin describes a kind of Freight in terms of its origin.",
                      "properties": {
                        "kind": {
                          "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                          "enum": [
                            "Warehouse"
                          ],
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "freightCollection": {
                  "description": "FreightCollection contains the details of the piece of Freight referenced\nby this Promotion as well as any additional Freight that is carried over\nfrom the target Stage's current state.",
                  "properties": {
                    "id": {
                      "description": "ID is a unique and deterministically calculated identifier for the\nFreightCollection. It is updated on each use of the UpdateOrPush method.",
                      "type": "string"
                    },
                    "items": {
                      "additionalProperties": {
                        "description": "FreightReference is a simplified representation of a piece of Freight -- not\na root resource type.",
                        "properties": {
                          "charts": {
                            "description": "Charts describes specific versions of specific Helm charts.",
                            "items": {
                              "description": "Chart describes a specific version of a Helm chart.",
                              "properties": {
                                "name": {
                                  "description": "Name specifies the name of the chart.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL specifies the URL of a Helm chart repository. Classic chart\nrepositories (using HTTP/S) can contain differently named charts. When this\nfield points to such a repository, the Name field will specify the name of\nthe chart within the repository. In the case of a repository within an OCI\nregistry, the URL implicitly points to a specific chart and the Name field\nwill be empty.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version specifies a particular version of the chart.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commits": {
                            "description": "Commits describes specific Git repository commits.",
                            "items": {
                              "description": "GitCommit describes a specific commit from a specific Git repository.",
                              "properties": {
                                "author": {
                                  "description": "Author is the author of the commit.",
                                  "type": "string"
                                },
                                "branch": {
                                  "description": "Branch denotes the branch of the repository where this commit was found.",
                                  "type": "string"
                                },
                                "committer": {
                                  "description": "Committer is the person who committed the commit.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "ID is the ID of a specific commit in the Git repository specified by\nRepoURL.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "Message is the message associated with the commit. At present, this only\ncontains the first line (subject) of the commit message.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL is the URL of a Git repository.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag denotes a tag in the repository that matched selection criteria and\nresolved to this commit.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "images": {
                            "description": "Images describes specific versions of specific container images.",
                            "items": {
                              "description": "Image describes a specific version of a container image.",
                              "properties": {
                                "digest": {
                                  "description": "Digest identifies a specific version of the image in the repository\nspecified by RepoURL. This is a more precise identifier than Tag.",
                                  "type": "string"
                                },
                                "gitRepoURL": {
                                  "description": "GitRepoURL specifies the URL of a Git repository that contains the source\ncode for the image repository referenced by the RepoURL field if Kargo was\nable to infer it.",
                                  "type": "string"
                                },
                                "repoURL": {
                                  "description": "RepoURL describes the repository in which the image can be found.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag identifies a specific version of the image in the repository specified\nby RepoURL.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name is system-assigned identifier that is derived deterministically from\nthe contents of the Freight. i.e. Two pieces of Freight can be compared for\nequality by comparing their Names.",
                            "type": "string"
                          },
                          "origin": {
                            "description": "Origin describes a kind of Freight in terms of its origin.",
                            "properties": {
                              "kind": {
                                "description": "Kind is the kind of resource from which Freight may have originated. At\npresent, this can only be \"Warehouse\".",
                                "enum": [
                                  "Warehouse"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name is the name of the resource of the kind indicated by the Kind field\nfrom which Freight may originated.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "description": "Freight is a map of FreightReference objects, indexed by their Warehouse\norigin.",
                      "type": "object"
                    },
                    "verificationHistory": {
                      "description": "VerificationHistory is a stack of recent VerificationInfo. By default,\nthe last ten VerificationInfo are stored.",
                      "items": {
                        "description": "VerificationInfo contains the details of an instance of a Verification\nprocess.",
                        "properties": {
                          "actor": {
                            "description": "Actor is the name of the entity that initiated or aborted the\nVerification process.",
                            "type": "string"
                          },
                          "analysisRun": {
                            "description": "AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements\nthe Verification process.",
                            "properties": {
                              "name": {
                                "description": "Name is the name of the AnalysisRun.",
                                "type": "string"
                              },
                              "namespace": {
                                "description": "Namespace is the namespace of the AnalysisRun.",
                                "type": "string"
                              },
                              "phase": {
                                "description": "Phase is the last observed phase of the AnalysisRun referenced by Name.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "namespace",
                              "phase"
                            ],
                            "type": "object"
                          },
                          "finishTime": {
                            "description": "FinishTime is the time at which the Verification process finished.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "id": {
                            "description": "ID is the identifier of the Verification process.",
                            "type": "string"
                          },
                          "message": {
                            "description": "Message may contain additional information about why the verification\nprocess is in its current phase.",
                            "type": "string"
                          },
                          "phase": {
                            "description": "Phase describes the current phase of the Verification process. Generally,\nthis will be a reflection of the underlying AnalysisRun's phase, however,\nthere are exceptions to this, such as in the case where an AnalysisRun\ncannot be launched successfully.",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "StartTime is the time at which the Verification process was started.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                },
                "healthChecks": {
                  "description": "HealthChecks contains the health check directives to be executed after\nthe Promotion has completed.",
                  "items": {
                    "description": "HealthCheckStep describes a health check directive which can be executed by\na Stage to verify the health of a Promotion result.",
                    "properties": {
                      "config": {
                        "description": "Config is the configuration for the directive.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "uses": {
                        "description": "Uses identifies a runner that can execute this step.",
                        "minLength": 1,
                        "type": "string"
                      }
                    },
                    "required": [
                      "uses"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "lastHandledRefresh": {
                  "description": "LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh\nannotation that was handled by the controller. This field can be used to\ndetermine whether the request to refresh the resource has been handled.",
                  "type": "string"
                },
                "message": {
                  "description": "Message is a display message about the promotion, including any errors\npreventing the Promotion controller from executing this Promotion.\ni.e. If the Phase field has a value of Failed, this field can be expected\nto explain why.",
                  "type": "string"
                },
                "phase": {
                  "description": "Phase describes where the Promotion currently is in its lifecycle.",
                  "type": "string"
                },
                "state": {
                  "description": "State stores the state of the promotion process between reconciliation\nattempts.",
                  "x-kubernetes-preserve-unknown-fields": true
                }
              },
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "message": {
          "description": "Message describes any errors that are preventing the Stage controller\nfrom assessing Stage health or from finding new Freight.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration represents the .metadata.generation that this Stage\nstatus was reconciled against.",
          "format": "int64",
          "maximum": 9223372036854776000,
          "minimum": -9223372036854776000,
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes where the Stage currently is in its lifecycle.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}