// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file v1alpha1/types.proto (package github.com.akuity.kargo.pkg.api.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ListMeta, ObjectMeta } from "../metav1/types_pb.js";

/**
 * @generated from enum github.com.akuity.kargo.pkg.api.v1alpha1.HealthState
 */
export enum HealthState {
  /**
   * buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
   *
   * @generated from enum value: HEALTH_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: HEALTH_STATE_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * @generated from enum value: HEALTH_STATE_UNHEALTHY = 2;
   */
  UNHEALTHY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HealthState)
proto3.util.setEnumType(HealthState, "github.com.akuity.kargo.pkg.api.v1alpha1.HealthState", [
  { no: 0, name: "HEALTH_STATE_UNKNOWN" },
  { no: 1, name: "HEALTH_STATE_HEALTHY" },
  { no: 2, name: "HEALTH_STATE_UNHEALTHY" },
]);

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate
 */
export class ArgoCDAppUpdate extends Message<ArgoCDAppUpdate> {
  /**
   * @generated from field: string app_name = 1;
   */
  appName = "";

  /**
   * @generated from field: optional string app_namespace = 2;
   */
  appNamespace?: string;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate source_updates = 3;
   */
  sourceUpdates: ArgoCDSourceUpdate[] = [];

  constructor(data?: PartialMessage<ArgoCDAppUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "source_updates", kind: "message", T: ArgoCDSourceUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgoCDAppUpdate {
    return new ArgoCDAppUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgoCDAppUpdate {
    return new ArgoCDAppUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgoCDAppUpdate {
    return new ArgoCDAppUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ArgoCDAppUpdate | PlainMessage<ArgoCDAppUpdate> | undefined, b: ArgoCDAppUpdate | PlainMessage<ArgoCDAppUpdate> | undefined): boolean {
    return proto3.util.equals(ArgoCDAppUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm
 */
export class ArgoCDHelm extends Message<ArgoCDHelm> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelmImageUpdate images = 1;
   */
  images: ArgoCDHelmImageUpdate[] = [];

  constructor(data?: PartialMessage<ArgoCDHelm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "images", kind: "message", T: ArgoCDHelmImageUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgoCDHelm {
    return new ArgoCDHelm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgoCDHelm {
    return new ArgoCDHelm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgoCDHelm {
    return new ArgoCDHelm().fromJsonString(jsonString, options);
  }

  static equals(a: ArgoCDHelm | PlainMessage<ArgoCDHelm> | undefined, b: ArgoCDHelm | PlainMessage<ArgoCDHelm> | undefined): boolean {
    return proto3.util.equals(ArgoCDHelm, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelmImageUpdate
 */
export class ArgoCDHelmImageUpdate extends Message<ArgoCDHelmImageUpdate> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<ArgoCDHelmImageUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelmImageUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgoCDHelmImageUpdate {
    return new ArgoCDHelmImageUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgoCDHelmImageUpdate {
    return new ArgoCDHelmImageUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgoCDHelmImageUpdate {
    return new ArgoCDHelmImageUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ArgoCDHelmImageUpdate | PlainMessage<ArgoCDHelmImageUpdate> | undefined, b: ArgoCDHelmImageUpdate | PlainMessage<ArgoCDHelmImageUpdate> | undefined): boolean {
    return proto3.util.equals(ArgoCDHelmImageUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDKustomize
 */
export class ArgoCDKustomize extends Message<ArgoCDKustomize> {
  /**
   * @generated from field: repeated string images = 1;
   */
  images: string[] = [];

  constructor(data?: PartialMessage<ArgoCDKustomize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDKustomize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "images", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgoCDKustomize {
    return new ArgoCDKustomize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgoCDKustomize {
    return new ArgoCDKustomize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgoCDKustomize {
    return new ArgoCDKustomize().fromJsonString(jsonString, options);
  }

  static equals(a: ArgoCDKustomize | PlainMessage<ArgoCDKustomize> | undefined, b: ArgoCDKustomize | PlainMessage<ArgoCDKustomize> | undefined): boolean {
    return proto3.util.equals(ArgoCDKustomize, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate
 */
export class ArgoCDSourceUpdate extends Message<ArgoCDSourceUpdate> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: optional string chart = 2;
   */
  chart?: string;

  /**
   * @generated from field: optional bool update_target_revision = 3;
   */
  updateTargetRevision?: boolean;

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDKustomize kustomize = 4;
   */
  kustomize?: ArgoCDKustomize;

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDHelm helm = 5;
   */
  helm?: ArgoCDHelm;

  constructor(data?: PartialMessage<ArgoCDSourceUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDSourceUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "update_target_revision", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "kustomize", kind: "message", T: ArgoCDKustomize, opt: true },
    { no: 5, name: "helm", kind: "message", T: ArgoCDHelm, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArgoCDSourceUpdate {
    return new ArgoCDSourceUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArgoCDSourceUpdate {
    return new ArgoCDSourceUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArgoCDSourceUpdate {
    return new ArgoCDSourceUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: ArgoCDSourceUpdate | PlainMessage<ArgoCDSourceUpdate> | undefined, b: ArgoCDSourceUpdate | PlainMessage<ArgoCDSourceUpdate> | undefined): boolean {
    return proto3.util.equals(ArgoCDSourceUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.BookkeeperPromotionMechanism
 */
export class BookkeeperPromotionMechanism extends Message<BookkeeperPromotionMechanism> {
  constructor(data?: PartialMessage<BookkeeperPromotionMechanism>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.BookkeeperPromotionMechanism";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BookkeeperPromotionMechanism {
    return new BookkeeperPromotionMechanism().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BookkeeperPromotionMechanism {
    return new BookkeeperPromotionMechanism().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BookkeeperPromotionMechanism {
    return new BookkeeperPromotionMechanism().fromJsonString(jsonString, options);
  }

  static equals(a: BookkeeperPromotionMechanism | PlainMessage<BookkeeperPromotionMechanism> | undefined, b: BookkeeperPromotionMechanism | PlainMessage<BookkeeperPromotionMechanism> | undefined): boolean {
    return proto3.util.equals(BookkeeperPromotionMechanism, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Chart
 */
export class Chart extends Message<Chart> {
  /**
   * @generated from field: string registry_url = 1;
   */
  registryUrl = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<Chart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Chart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registry_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chart {
    return new Chart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chart {
    return new Chart().fromJsonString(jsonString, options);
  }

  static equals(a: Chart | PlainMessage<Chart> | undefined, b: Chart | PlainMessage<Chart> | undefined): boolean {
    return proto3.util.equals(Chart, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ChartSubscription
 */
export class ChartSubscription extends Message<ChartSubscription> {
  /**
   * @generated from field: string registry_url = 1;
   */
  registryUrl = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string semver_constraint = 3;
   */
  semverConstraint?: string;

  constructor(data?: PartialMessage<ChartSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ChartSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registry_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "semver_constraint", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChartSubscription {
    return new ChartSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChartSubscription {
    return new ChartSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChartSubscription {
    return new ChartSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: ChartSubscription | PlainMessage<ChartSubscription> | undefined, b: ChartSubscription | PlainMessage<ChartSubscription> | undefined): boolean {
    return proto3.util.equals(ChartSubscription, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.GitCommit
 */
export class GitCommit extends Message<GitCommit> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string branch = 3;
   */
  branch = "";

  /**
   * @generated from field: optional string health_check_commit = 4;
   */
  healthCheckCommit?: string;

  constructor(data?: PartialMessage<GitCommit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.GitCommit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "health_check_commit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitCommit {
    return new GitCommit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitCommit {
    return new GitCommit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitCommit {
    return new GitCommit().fromJsonString(jsonString, options);
  }

  static equals(a: GitCommit | PlainMessage<GitCommit> | undefined, b: GitCommit | PlainMessage<GitCommit> | undefined): boolean {
    return proto3.util.equals(GitCommit, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate
 */
export class GitRepoUpdate extends Message<GitRepoUpdate> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: optional string read_branch = 2;
   */
  readBranch?: string;

  /**
   * @generated from field: string write_branch = 3;
   */
  writeBranch = "";

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.BookkeeperPromotionMechanism bookkeeper = 4;
   */
  bookkeeper?: BookkeeperPromotionMechanism;

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism kustomize = 5;
   */
  kustomize?: KustomizePromotionMechanism;

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism helm = 6;
   */
  helm?: HelmPromotionMechanism;

  constructor(data?: PartialMessage<GitRepoUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "read_branch", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "write_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bookkeeper", kind: "message", T: BookkeeperPromotionMechanism, opt: true },
    { no: 5, name: "kustomize", kind: "message", T: KustomizePromotionMechanism, opt: true },
    { no: 6, name: "helm", kind: "message", T: HelmPromotionMechanism, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitRepoUpdate {
    return new GitRepoUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitRepoUpdate {
    return new GitRepoUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitRepoUpdate {
    return new GitRepoUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: GitRepoUpdate | PlainMessage<GitRepoUpdate> | undefined, b: GitRepoUpdate | PlainMessage<GitRepoUpdate> | undefined): boolean {
    return proto3.util.equals(GitRepoUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.GitSubscription
 */
export class GitSubscription extends Message<GitSubscription> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string branch = 2;
   */
  branch = "";

  constructor(data?: PartialMessage<GitSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.GitSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitSubscription {
    return new GitSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitSubscription {
    return new GitSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitSubscription {
    return new GitSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: GitSubscription | PlainMessage<GitSubscription> | undefined, b: GitSubscription | PlainMessage<GitSubscription> | undefined): boolean {
    return proto3.util.equals(GitSubscription, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Health
 */
export class Health extends Message<Health> {
  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.HealthState status = 1;
   */
  status = HealthState.UNKNOWN;

  /**
   * @generated from field: repeated string issues = 2;
   */
  issues: string[] = [];

  constructor(data?: PartialMessage<Health>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Health";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(HealthState) },
    { no: 2, name: "issues", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Health {
    return new Health().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJsonString(jsonString, options);
  }

  static equals(a: Health | PlainMessage<Health> | undefined, b: Health | PlainMessage<Health> | undefined): boolean {
    return proto3.util.equals(Health, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.HelmChartDependencyUpdate
 */
export class HelmChartDependencyUpdate extends Message<HelmChartDependencyUpdate> {
  /**
   * @generated from field: string registry_url = 1;
   */
  registryUrl = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string chart_path = 3;
   */
  chartPath = "";

  constructor(data?: PartialMessage<HelmChartDependencyUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.HelmChartDependencyUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registry_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chart_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelmChartDependencyUpdate {
    return new HelmChartDependencyUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelmChartDependencyUpdate {
    return new HelmChartDependencyUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelmChartDependencyUpdate {
    return new HelmChartDependencyUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: HelmChartDependencyUpdate | PlainMessage<HelmChartDependencyUpdate> | undefined, b: HelmChartDependencyUpdate | PlainMessage<HelmChartDependencyUpdate> | undefined): boolean {
    return proto3.util.equals(HelmChartDependencyUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.HelmImageUpdate
 */
export class HelmImageUpdate extends Message<HelmImageUpdate> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string values_file_path = 2;
   */
  valuesFilePath = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  constructor(data?: PartialMessage<HelmImageUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.HelmImageUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values_file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelmImageUpdate {
    return new HelmImageUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelmImageUpdate {
    return new HelmImageUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelmImageUpdate {
    return new HelmImageUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: HelmImageUpdate | PlainMessage<HelmImageUpdate> | undefined, b: HelmImageUpdate | PlainMessage<HelmImageUpdate> | undefined): boolean {
    return proto3.util.equals(HelmImageUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism
 */
export class HelmPromotionMechanism extends Message<HelmPromotionMechanism> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.HelmImageUpdate images = 1;
   */
  images: HelmImageUpdate[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.HelmChartDependencyUpdate charts = 2;
   */
  charts: HelmChartDependencyUpdate[] = [];

  constructor(data?: PartialMessage<HelmPromotionMechanism>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.HelmPromotionMechanism";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "images", kind: "message", T: HelmImageUpdate, repeated: true },
    { no: 2, name: "charts", kind: "message", T: HelmChartDependencyUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelmPromotionMechanism {
    return new HelmPromotionMechanism().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelmPromotionMechanism {
    return new HelmPromotionMechanism().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelmPromotionMechanism {
    return new HelmPromotionMechanism().fromJsonString(jsonString, options);
  }

  static equals(a: HelmPromotionMechanism | PlainMessage<HelmPromotionMechanism> | undefined, b: HelmPromotionMechanism | PlainMessage<HelmPromotionMechanism> | undefined): boolean {
    return proto3.util.equals(HelmPromotionMechanism, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Image
 */
export class Image extends Message<Image> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string tag = 2;
   */
  tag = "";

  constructor(data?: PartialMessage<Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image {
    return new Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJsonString(jsonString, options);
  }

  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean {
    return proto3.util.equals(Image, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.ImageSubscription
 */
export class ImageSubscription extends Message<ImageSubscription> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string update_strategy = 2;
   */
  updateStrategy = "";

  /**
   * @generated from field: optional string semver_constraint = 3;
   */
  semverConstraint?: string;

  /**
   * @generated from field: optional string allow_tags = 4;
   */
  allowTags?: string;

  /**
   * @generated from field: repeated string ignore_tags = 5;
   */
  ignoreTags: string[] = [];

  /**
   * @generated from field: optional string platform = 6;
   */
  platform?: string;

  constructor(data?: PartialMessage<ImageSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.ImageSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "update_strategy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "semver_constraint", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "allow_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "ignore_tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageSubscription {
    return new ImageSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageSubscription {
    return new ImageSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageSubscription {
    return new ImageSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: ImageSubscription | PlainMessage<ImageSubscription> | undefined, b: ImageSubscription | PlainMessage<ImageSubscription> | undefined): boolean {
    return proto3.util.equals(ImageSubscription, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.KustomizeImageUpdate
 */
export class KustomizeImageUpdate extends Message<KustomizeImageUpdate> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<KustomizeImageUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.KustomizeImageUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KustomizeImageUpdate {
    return new KustomizeImageUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KustomizeImageUpdate {
    return new KustomizeImageUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KustomizeImageUpdate {
    return new KustomizeImageUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: KustomizeImageUpdate | PlainMessage<KustomizeImageUpdate> | undefined, b: KustomizeImageUpdate | PlainMessage<KustomizeImageUpdate> | undefined): boolean {
    return proto3.util.equals(KustomizeImageUpdate, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism
 */
export class KustomizePromotionMechanism extends Message<KustomizePromotionMechanism> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.KustomizeImageUpdate images = 1;
   */
  images: KustomizeImageUpdate[] = [];

  constructor(data?: PartialMessage<KustomizePromotionMechanism>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.KustomizePromotionMechanism";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "images", kind: "message", T: KustomizeImageUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KustomizePromotionMechanism {
    return new KustomizePromotionMechanism().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KustomizePromotionMechanism {
    return new KustomizePromotionMechanism().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KustomizePromotionMechanism {
    return new KustomizePromotionMechanism().fromJsonString(jsonString, options);
  }

  static equals(a: KustomizePromotionMechanism | PlainMessage<KustomizePromotionMechanism> | undefined, b: KustomizePromotionMechanism | PlainMessage<KustomizePromotionMechanism> | undefined): boolean {
    return proto3.util.equals(KustomizePromotionMechanism, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Promotion
 */
export class Promotion extends Message<Promotion> {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.metav1.ObjectMeta metadata = 3;
   */
  metadata?: ObjectMeta;

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionSpec spec = 4;
   */
  spec?: PromotionSpec;

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionStatus status = 5;
   */
  status?: PromotionStatus;

  constructor(data?: PartialMessage<Promotion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Promotion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "message", T: ObjectMeta, opt: true },
    { no: 4, name: "spec", kind: "message", T: PromotionSpec },
    { no: 5, name: "status", kind: "message", T: PromotionStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Promotion {
    return new Promotion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Promotion {
    return new Promotion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Promotion {
    return new Promotion().fromJsonString(jsonString, options);
  }

  static equals(a: Promotion | PlainMessage<Promotion> | undefined, b: Promotion | PlainMessage<Promotion> | undefined): boolean {
    return proto3.util.equals(Promotion, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionList
 */
export class PromotionList extends Message<PromotionList> {
  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.metav1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Promotion items = 2;
   */
  items: Promotion[] = [];

  constructor(data?: PartialMessage<PromotionList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ListMeta, opt: true },
    { no: 2, name: "items", kind: "message", T: Promotion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionList {
    return new PromotionList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionList {
    return new PromotionList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionList {
    return new PromotionList().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionList | PlainMessage<PromotionList> | undefined, b: PromotionList | PlainMessage<PromotionList> | undefined): boolean {
    return proto3.util.equals(PromotionList, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms
 */
export class PromotionMechanisms extends Message<PromotionMechanisms> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.GitRepoUpdate git_repo_updates = 1;
   */
  gitRepoUpdates: GitRepoUpdate[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.ArgoCDAppUpdate argocd_app_updates = 2;
   */
  argocdAppUpdates: ArgoCDAppUpdate[] = [];

  constructor(data?: PartialMessage<PromotionMechanisms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_repo_updates", kind: "message", T: GitRepoUpdate, repeated: true },
    { no: 2, name: "argocd_app_updates", kind: "message", T: ArgoCDAppUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionMechanisms {
    return new PromotionMechanisms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionMechanisms {
    return new PromotionMechanisms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionMechanisms {
    return new PromotionMechanisms().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionMechanisms | PlainMessage<PromotionMechanisms> | undefined, b: PromotionMechanisms | PlainMessage<PromotionMechanisms> | undefined): boolean {
    return proto3.util.equals(PromotionMechanisms, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy
 */
export class PromotionPolicy extends Message<PromotionPolicy> {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.metav1.ObjectMeta metadata = 3;
   */
  metadata?: ObjectMeta;

  /**
   * @generated from field: string stage = 4;
   */
  stage = "";

  /**
   * @generated from field: bool enable_auto_promotion = 5;
   */
  enableAutoPromotion = false;

  constructor(data?: PartialMessage<PromotionPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "message", T: ObjectMeta },
    { no: 4, name: "stage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "enable_auto_promotion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionPolicy {
    return new PromotionPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionPolicy {
    return new PromotionPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionPolicy {
    return new PromotionPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionPolicy | PlainMessage<PromotionPolicy> | undefined, b: PromotionPolicy | PlainMessage<PromotionPolicy> | undefined): boolean {
    return proto3.util.equals(PromotionPolicy, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicyList
 */
export class PromotionPolicyList extends Message<PromotionPolicyList> {
  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.metav1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicy items = 2;
   */
  items: PromotionPolicy[] = [];

  constructor(data?: PartialMessage<PromotionPolicyList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionPolicyList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ListMeta },
    { no: 2, name: "items", kind: "message", T: PromotionPolicy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionPolicyList {
    return new PromotionPolicyList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionPolicyList {
    return new PromotionPolicyList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionPolicyList {
    return new PromotionPolicyList().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionPolicyList | PlainMessage<PromotionPolicyList> | undefined, b: PromotionPolicyList | PlainMessage<PromotionPolicyList> | undefined): boolean {
    return proto3.util.equals(PromotionPolicyList, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionSpec
 */
export class PromotionSpec extends Message<PromotionSpec> {
  /**
   * @generated from field: string stage = 1;
   */
  stage = "";

  /**
   * @generated from field: string freight = 2;
   */
  freight = "";

  constructor(data?: PartialMessage<PromotionSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "freight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionSpec {
    return new PromotionSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionSpec {
    return new PromotionSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionSpec {
    return new PromotionSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionSpec | PlainMessage<PromotionSpec> | undefined, b: PromotionSpec | PlainMessage<PromotionSpec> | undefined): boolean {
    return proto3.util.equals(PromotionSpec, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.PromotionStatus
 */
export class PromotionStatus extends Message<PromotionStatus> {
  /**
   * @generated from field: string phase = 1;
   */
  phase = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<PromotionStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.PromotionStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PromotionStatus {
    return new PromotionStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PromotionStatus {
    return new PromotionStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PromotionStatus {
    return new PromotionStatus().fromJsonString(jsonString, options);
  }

  static equals(a: PromotionStatus | PlainMessage<PromotionStatus> | undefined, b: PromotionStatus | PlainMessage<PromotionStatus> | undefined): boolean {
    return proto3.util.equals(PromotionStatus, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions
 */
export class RepoSubscriptions extends Message<RepoSubscriptions> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.GitSubscription git = 1;
   */
  git: GitSubscription[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.ImageSubscription images = 2;
   */
  images: ImageSubscription[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.ChartSubscription charts = 3;
   */
  charts: ChartSubscription[] = [];

  constructor(data?: PartialMessage<RepoSubscriptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git", kind: "message", T: GitSubscription, repeated: true },
    { no: 2, name: "images", kind: "message", T: ImageSubscription, repeated: true },
    { no: 3, name: "charts", kind: "message", T: ChartSubscription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoSubscriptions {
    return new RepoSubscriptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoSubscriptions {
    return new RepoSubscriptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoSubscriptions {
    return new RepoSubscriptions().fromJsonString(jsonString, options);
  }

  static equals(a: RepoSubscriptions | PlainMessage<RepoSubscriptions> | undefined, b: RepoSubscriptions | PlainMessage<RepoSubscriptions> | undefined): boolean {
    return proto3.util.equals(RepoSubscriptions, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Stage
 */
export class Stage extends Message<Stage> {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.metav1.ObjectMeta metadata = 3;
   */
  metadata?: ObjectMeta;

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec spec = 4;
   */
  spec?: StageSpec;

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus status = 5;
   */
  status?: StageStatus;

  constructor(data?: PartialMessage<Stage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Stage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "message", T: ObjectMeta },
    { no: 4, name: "spec", kind: "message", T: StageSpec },
    { no: 5, name: "status", kind: "message", T: StageStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stage {
    return new Stage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stage {
    return new Stage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stage {
    return new Stage().fromJsonString(jsonString, options);
  }

  static equals(a: Stage | PlainMessage<Stage> | undefined, b: Stage | PlainMessage<Stage> | undefined): boolean {
    return proto3.util.equals(Stage, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.StageList
 */
export class StageList extends Message<StageList> {
  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.metav1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Stage items = 2;
   */
  items: Stage[] = [];

  constructor(data?: PartialMessage<StageList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.StageList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ListMeta },
    { no: 2, name: "items", kind: "message", T: Stage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StageList {
    return new StageList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StageList {
    return new StageList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StageList {
    return new StageList().fromJsonString(jsonString, options);
  }

  static equals(a: StageList | PlainMessage<StageList> | undefined, b: StageList | PlainMessage<StageList> | undefined): boolean {
    return proto3.util.equals(StageList, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec
 */
export class StageSpec extends Message<StageSpec> {
  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions subscriptions = 1;
   */
  subscriptions?: Subscriptions;

  /**
   * @generated from field: github.com.akuity.kargo.pkg.api.v1alpha1.PromotionMechanisms promotion_mechanisms = 2;
   */
  promotionMechanisms?: PromotionMechanisms;

  constructor(data?: PartialMessage<StageSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.StageSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptions", kind: "message", T: Subscriptions },
    { no: 2, name: "promotion_mechanisms", kind: "message", T: PromotionMechanisms },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StageSpec {
    return new StageSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StageSpec {
    return new StageSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StageSpec {
    return new StageSpec().fromJsonString(jsonString, options);
  }

  static equals(a: StageSpec | PlainMessage<StageSpec> | undefined, b: StageSpec | PlainMessage<StageSpec> | undefined): boolean {
    return proto3.util.equals(StageSpec, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Freight
 */
export class Freight extends Message<Freight> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional google.protobuf.Timestamp first_seen = 2;
   */
  firstSeen?: Timestamp;

  /**
   * @generated from field: optional string provenance = 3;
   */
  provenance?: string;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.GitCommit commits = 4;
   */
  commits: GitCommit[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Image images = 5;
   */
  images: Image[] = [];

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Chart charts = 6;
   */
  charts: Chart[] = [];

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.Health health = 7;
   */
  health?: Health;

  constructor(data?: PartialMessage<Freight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Freight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_seen", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "provenance", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "commits", kind: "message", T: GitCommit, repeated: true },
    { no: 5, name: "images", kind: "message", T: Image, repeated: true },
    { no: 6, name: "charts", kind: "message", T: Chart, repeated: true },
    { no: 7, name: "health", kind: "message", T: Health, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Freight {
    return new Freight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Freight {
    return new Freight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Freight {
    return new Freight().fromJsonString(jsonString, options);
  }

  static equals(a: Freight | PlainMessage<Freight> | undefined, b: Freight | PlainMessage<Freight> | undefined): boolean {
    return proto3.util.equals(Freight, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus
 */
export class StageStatus extends Message<StageStatus> {
  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Freight available_freight = 1;
   */
  availableFreight: Freight[] = [];

  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.Freight current_freight = 2;
   */
  currentFreight?: Freight;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.Freight history = 3;
   */
  history: Freight[] = [];

  /**
   * @generated from field: string error = 4;
   */
  error = "";

  constructor(data?: PartialMessage<StageStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.StageStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available_freight", kind: "message", T: Freight, repeated: true },
    { no: 2, name: "current_freight", kind: "message", T: Freight, opt: true },
    { no: 3, name: "history", kind: "message", T: Freight, repeated: true },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StageStatus {
    return new StageStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StageStatus {
    return new StageStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StageStatus {
    return new StageStatus().fromJsonString(jsonString, options);
  }

  static equals(a: StageStatus | PlainMessage<StageStatus> | undefined, b: StageStatus | PlainMessage<StageStatus> | undefined): boolean {
    return proto3.util.equals(StageStatus, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.StageSubscription
 */
export class StageSubscription extends Message<StageSubscription> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<StageSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.StageSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StageSubscription {
    return new StageSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StageSubscription {
    return new StageSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StageSubscription {
    return new StageSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: StageSubscription | PlainMessage<StageSubscription> | undefined, b: StageSubscription | PlainMessage<StageSubscription> | undefined): boolean {
    return proto3.util.equals(StageSubscription, a, b);
  }
}

/**
 * @generated from message github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions
 */
export class Subscriptions extends Message<Subscriptions> {
  /**
   * @generated from field: optional github.com.akuity.kargo.pkg.api.v1alpha1.RepoSubscriptions repos = 1;
   */
  repos?: RepoSubscriptions;

  /**
   * @generated from field: repeated github.com.akuity.kargo.pkg.api.v1alpha1.StageSubscription upstream_stages = 2;
   */
  upstreamStages: StageSubscription[] = [];

  constructor(data?: PartialMessage<Subscriptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "github.com.akuity.kargo.pkg.api.v1alpha1.Subscriptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repos", kind: "message", T: RepoSubscriptions, opt: true },
    { no: 2, name: "upstream_stages", kind: "message", T: StageSubscription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscriptions {
    return new Subscriptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscriptions {
    return new Subscriptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscriptions {
    return new Subscriptions().fromJsonString(jsonString, options);
  }

  static equals(a: Subscriptions | PlainMessage<Subscriptions> | undefined, b: Subscriptions | PlainMessage<Subscriptions> | undefined): boolean {
    return proto3.util.equals(Subscriptions, a, b);
  }
}

