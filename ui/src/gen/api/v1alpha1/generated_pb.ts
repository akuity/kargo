// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file api/v1alpha1/generated.proto (package github.com.akuity.kargo.api.v1alpha1, syntax proto2)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { LocalObjectReference } from "../../k8s.io/api/core/v1/generated_pb";
import { file_k8s_io_api_core_v1_generated } from "../../k8s.io/api/core/v1/generated_pb";
import type { JSON } from "../../k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1/generated_pb";
import { file_k8s_io_apiextensions_apiserver_pkg_apis_apiextensions_v1_generated } from "../../k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1/generated_pb";
import type { Condition, Duration, LabelSelector, ListMeta, ObjectMeta, Time } from "../../k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb";
import { file_k8s_io_apimachinery_pkg_apis_meta_v1_generated } from "../../k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb";
import { file_k8s_io_apimachinery_pkg_runtime_generated } from "../../k8s.io/apimachinery/pkg/runtime/generated_pb";
import { file_k8s_io_apimachinery_pkg_runtime_schema_generated } from "../../k8s.io/apimachinery/pkg/runtime/schema/generated_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/v1alpha1/generated.proto.
 */
export const file_api_v1alpha1_generated: GenFile = /*@__PURE__*/
  fileDesc("", [file_k8s_io_api_core_v1_generated, file_k8s_io_apiextensions_apiserver_pkg_apis_apiextensions_v1_generated, file_k8s_io_apimachinery_pkg_apis_meta_v1_generated, file_k8s_io_apimachinery_pkg_runtime_generated, file_k8s_io_apimachinery_pkg_runtime_schema_generated]);

/**
 * AnalysisRunArgument represents an argument to be added to an AnalysisRun.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.AnalysisRunArgument
 */
export type AnalysisRunArgument = Message<"github.com.akuity.kargo.api.v1alpha1.AnalysisRunArgument"> & {
  /**
   * Name is the name of the argument.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Value is the value of the argument.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional string value = 2;
   */
  value: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.AnalysisRunArgument.
 * Use `create(AnalysisRunArgumentSchema)` to create a new message.
 */
export const AnalysisRunArgumentSchema: GenMessage<AnalysisRunArgument> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 0);

/**
 * AnalysisRunMetadata contains optional metadata that should be applied to all
 * AnalysisRuns.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.AnalysisRunMetadata
 */
export type AnalysisRunMetadata = Message<"github.com.akuity.kargo.api.v1alpha1.AnalysisRunMetadata"> & {
  /**
   * Additional labels to apply to an AnalysisRun.
   *
   * @generated from field: map<string, string> labels = 1;
   */
  labels: { [key: string]: string };

  /**
   * Additional annotations to apply to an AnalysisRun.
   *
   * @generated from field: map<string, string> annotations = 2;
   */
  annotations: { [key: string]: string };
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.AnalysisRunMetadata.
 * Use `create(AnalysisRunMetadataSchema)` to create a new message.
 */
export const AnalysisRunMetadataSchema: GenMessage<AnalysisRunMetadata> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 1);

/**
 * AnalysisRunReference is a reference to an AnalysisRun.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.AnalysisRunReference
 */
export type AnalysisRunReference = Message<"github.com.akuity.kargo.api.v1alpha1.AnalysisRunReference"> & {
  /**
   * Namespace is the namespace of the AnalysisRun.
   *
   * @generated from field: optional string namespace = 1;
   */
  namespace: string;

  /**
   * Name is the name of the AnalysisRun.
   *
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * Phase is the last observed phase of the AnalysisRun referenced by Name.
   *
   * @generated from field: optional string phase = 3;
   */
  phase: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.AnalysisRunReference.
 * Use `create(AnalysisRunReferenceSchema)` to create a new message.
 */
export const AnalysisRunReferenceSchema: GenMessage<AnalysisRunReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 2);

/**
 * AnalysisTemplateReference is a reference to an AnalysisTemplate.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.AnalysisTemplateReference
 */
export type AnalysisTemplateReference = Message<"github.com.akuity.kargo.api.v1alpha1.AnalysisTemplateReference"> & {
  /**
   * Name is the name of the AnalysisTemplate in the same project/namespace as
   * the Stage.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Kind is the type of the AnalysisTemplate. Can be either AnalysisTemplate or
   * ClusterAnalysisTemplate, default is AnalysisTemplate.
   *
   * +kubebuilder:validation:Optional
   * +kubebuilder:validation:Enum=AnalysisTemplate;ClusterAnalysisTemplate
   *
   * @generated from field: optional string kind = 2;
   */
  kind: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.AnalysisTemplateReference.
 * Use `create(AnalysisTemplateReferenceSchema)` to create a new message.
 */
export const AnalysisTemplateReferenceSchema: GenMessage<AnalysisTemplateReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 3);

/**
 * ApprovedStage describes a Stage for which Freight has been (manually)
 * approved.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ApprovedStage
 */
export type ApprovedStage = Message<"github.com.akuity.kargo.api.v1alpha1.ApprovedStage"> & {
  /**
   * ApprovedAt is the time at which the Freight was approved for the Stage.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time approvedAt = 1;
   */
  approvedAt?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ApprovedStage.
 * Use `create(ApprovedStageSchema)` to create a new message.
 */
export const ApprovedStageSchema: GenMessage<ApprovedStage> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 4);

/**
 * ArgoCDAppHealthStatus describes the health of an ArgoCD Application.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppHealthStatus
 */
export type ArgoCDAppHealthStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ArgoCDAppHealthStatus"> & {
  /**
   * @generated from field: optional string status = 1;
   */
  status: string;

  /**
   * @generated from field: optional string message = 2;
   */
  message: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppHealthStatus.
 * Use `create(ArgoCDAppHealthStatusSchema)` to create a new message.
 */
export const ArgoCDAppHealthStatusSchema: GenMessage<ArgoCDAppHealthStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 5);

/**
 * ArgoCDAppStatus describes the current state of a single ArgoCD Application.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppStatus
 */
export type ArgoCDAppStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ArgoCDAppStatus"> & {
  /**
   * Namespace is the namespace of the ArgoCD Application.
   *
   * @generated from field: optional string namespace = 1;
   */
  namespace: string;

  /**
   * Name is the name of the ArgoCD Application.
   *
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * HealthStatus is the health of the ArgoCD Application.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ArgoCDAppHealthStatus healthStatus = 3;
   */
  healthStatus?: ArgoCDAppHealthStatus;

  /**
   * SyncStatus is the sync status of the ArgoCD Application.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ArgoCDAppSyncStatus syncStatus = 4;
   */
  syncStatus?: ArgoCDAppSyncStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppStatus.
 * Use `create(ArgoCDAppStatusSchema)` to create a new message.
 */
export const ArgoCDAppStatusSchema: GenMessage<ArgoCDAppStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 6);

/**
 * ArgoCDAppSyncStatus describes the sync status of an ArgoCD Application.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppSyncStatus
 */
export type ArgoCDAppSyncStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ArgoCDAppSyncStatus"> & {
  /**
   * @generated from field: optional string status = 1;
   */
  status: string;

  /**
   * @generated from field: optional string revision = 2;
   */
  revision: string;

  /**
   * @generated from field: repeated string revisions = 3;
   */
  revisions: string[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ArgoCDAppSyncStatus.
 * Use `create(ArgoCDAppSyncStatusSchema)` to create a new message.
 */
export const ArgoCDAppSyncStatusSchema: GenMessage<ArgoCDAppSyncStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 7);

/**
 * ArtifactoryWebhookReceiverConfig describes a webhook receiver that is
 * compatible with JFrog Artifactory payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ArtifactoryWebhookReceiverConfig
 */
export type ArtifactoryWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.ArtifactoryWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret-token` key whose
   * value is the shared secret used to authenticate the webhook requests sent
   * by JFrog Artifactory. For more information please refer to the JFrog
   * Artifactory documentation:
   *   https://jfrog.com/help/r/jfrog-platform-administration-documentation/webhooks
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ArtifactoryWebhookReceiverConfig.
 * Use `create(ArtifactoryWebhookReceiverConfigSchema)` to create a new message.
 */
export const ArtifactoryWebhookReceiverConfigSchema: GenMessage<ArtifactoryWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 8);

/**
 * AzureWebhookReceiverConfig describes a webhook receiver that is compatible
 * with Azure Container Registry (ACR) and Azure DevOps payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.AzureWebhookReceiverConfig
 */
export type AzureWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.AzureWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret` key whose value
   * does NOT need to be shared directly with Azure when registering a webhook.
   * It is used only by Kargo to create a complex, hard-to-guess URL,
   * which implicitly serves as a shared secret. For more information about
   * Azure webhooks, please refer to the Azure documentation:
   *
   *  Azure Container Registry:
   * 	https://learn.microsoft.com/en-us/azure/container-registry/container-registry-repositories
   *
   *  Azure DevOps:
   * 	http://learn.microsoft.com/en-us/azure/devops/service-hooks/services/webhooks?view=azure-devops
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.AzureWebhookReceiverConfig.
 * Use `create(AzureWebhookReceiverConfigSchema)` to create a new message.
 */
export const AzureWebhookReceiverConfigSchema: GenMessage<AzureWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 9);

/**
 * BitbucketWebhookReceiverConfig describes a webhook receiver that is
 * compatible with Bitbucket payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.BitbucketWebhookReceiverConfig
 */
export type BitbucketWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.BitbucketWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret` key whose
   * value is the shared secret used to authenticate the webhook requests sent
   * by Bitbucket. For more information please refer to the Bitbucket
   * documentation:
   *   https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.BitbucketWebhookReceiverConfig.
 * Use `create(BitbucketWebhookReceiverConfigSchema)` to create a new message.
 */
export const BitbucketWebhookReceiverConfigSchema: GenMessage<BitbucketWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 10);

/**
 * Chart describes a specific version of a Helm chart.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Chart
 */
export type Chart = Message<"github.com.akuity.kargo.api.v1alpha1.Chart"> & {
  /**
   * RepoURL specifies the URL of a Helm chart repository. Classic chart
   * repositories (using HTTP/S) can contain differently named charts. When this
   * field points to such a repository, the Name field will specify the name of
   * the chart within the repository. In the case of a repository within an OCI
   * registry, the URL implicitly points to a specific chart and the Name field
   * will be empty.
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Name specifies the name of the chart.
   *
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * Version specifies a particular version of the chart.
   *
   * @generated from field: optional string version = 3;
   */
  version: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Chart.
 * Use `create(ChartSchema)` to create a new message.
 */
export const ChartSchema: GenMessage<Chart> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 11);

/**
 * ChartDiscoveryResult represents the result of a chart discovery operation for
 * a ChartSubscription.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ChartDiscoveryResult
 */
export type ChartDiscoveryResult = Message<"github.com.akuity.kargo.api.v1alpha1.ChartDiscoveryResult"> & {
  /**
   * RepoURL is the repository URL of the Helm chart, as specified in the
   * ChartSubscription.
   *
   * +kubebuilder:validation:MinLength=1
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Name is the name of the Helm chart, as specified in the ChartSubscription.
   *
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * SemverConstraint is the constraint for which versions were discovered.
   * This field is optional, and only populated if the ChartSubscription
   * specifies a SemverConstraint.
   *
   * @generated from field: optional string semverConstraint = 3;
   */
  semverConstraint: string;

  /**
   * Versions is a list of versions discovered by the Warehouse for the
   * ChartSubscription. An empty list indicates that the discovery operation was
   * successful, but no versions matching the ChartSubscription criteria were
   * found.
   *
   * +optional
   *
   * @generated from field: repeated string versions = 4;
   */
  versions: string[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ChartDiscoveryResult.
 * Use `create(ChartDiscoveryResultSchema)` to create a new message.
 */
export const ChartDiscoveryResultSchema: GenMessage<ChartDiscoveryResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 12);

/**
 * ChartSubscription defines a subscription to a Helm chart repository.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ChartSubscription
 */
export type ChartSubscription = Message<"github.com.akuity.kargo.api.v1alpha1.ChartSubscription"> & {
  /**
   * RepoURL specifies the URL of a Helm chart repository. It may be a classic
   * chart repository (using HTTP/S) OR a repository within an OCI registry.
   * Classic chart repositories can contain differently named charts. When this
   * field points to such a repository, the Name field MUST also be used
   * to specify the name of the desired chart within that repository. In the
   * case of a repository within an OCI registry, the URL implicitly points to
   * a specific chart and the Name field MUST NOT be used. The RepoURL field is
   * required.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.\-]+)(:[\d]+)?(/.*)*$`
   * +akuity:test-kubebuilder-pattern=HelmRepoURL
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Name specifies the name of a Helm chart to subscribe to within a classic
   * chart repository specified by the RepoURL field. This field is required
   * when the RepoURL field points to a classic chart repository and MUST
   * otherwise be empty.
   *
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * SemverConstraint specifies constraints on what new chart versions are
   * permissible. This field is optional. When left unspecified, there will be
   * no constraints, which means the latest version of the chart will always be
   * used. Care should be taken with leaving this field unspecified, as it can
   * lead to the unanticipated rollout of breaking changes.
   * More info: https://github.com/masterminds/semver#checking-version-constraints
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string semverConstraint = 3;
   */
  semverConstraint: string;

  /**
   * DiscoveryLimit is an optional limit on the number of chart versions that
   * can be discovered for this subscription. The limit is applied after
   * filtering charts based on the SemverConstraint field.
   * When left unspecified, the field is implicitly treated as if its value
   * were "20". The upper limit for this field is 100.
   *
   * +kubebuilder:validation:Minimum=1
   * +kubebuilder:validation:Maximum=100
   * +kubebuilder:default=20
   *
   * @generated from field: optional int32 discoveryLimit = 4;
   */
  discoveryLimit: number;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ChartSubscription.
 * Use `create(ChartSubscriptionSchema)` to create a new message.
 */
export const ChartSubscriptionSchema: GenMessage<ChartSubscription> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 13);

/**
 * ClusterConfig is a resource type that describes cluster-level Kargo
 * configuration.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterConfig
 */
export type ClusterConfig = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterConfig"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes the configuration of a cluster.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ClusterConfigSpec spec = 2;
   */
  spec?: ClusterConfigSpec;

  /**
   * Status describes the current status of a ClusterConfig.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ClusterConfigStatus status = 3;
   */
  status?: ClusterConfigStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterConfig.
 * Use `create(ClusterConfigSchema)` to create a new message.
 */
export const ClusterConfigSchema: GenMessage<ClusterConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 14);

/**
 * ClusterConfigList contains a list of ClusterConfigs.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterConfigList
 */
export type ClusterConfigList = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterConfigList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ClusterConfig items = 2;
   */
  items: ClusterConfig[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterConfigList.
 * Use `create(ClusterConfigListSchema)` to create a new message.
 */
export const ClusterConfigListSchema: GenMessage<ClusterConfigList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 15);

/**
 * ClusterConfigSpec describes cluster-level Kargo configuration.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterConfigSpec
 */
export type ClusterConfigSpec = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterConfigSpec"> & {
  /**
   * WebhookReceivers describes cluster-scoped webhook receivers used for
   * processing events from various external platforms
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.WebhookReceiverConfig webhookReceivers = 1;
   */
  webhookReceivers: WebhookReceiverConfig[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterConfigSpec.
 * Use `create(ClusterConfigSpecSchema)` to create a new message.
 */
export const ClusterConfigSpecSchema: GenMessage<ClusterConfigSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 16);

/**
 * ClusterConfigStatus describes the current status of a ClusterConfig.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterConfigStatus
 */
export type ClusterConfigStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterConfigStatus"> & {
  /**
   * Conditions contains the last observations of the ClusterConfig's current
   * state.
   *
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=map
   * +listMapKey=type
   *
   * @generated from field: repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 1;
   */
  conditions: Condition[];

  /**
   * ObservedGeneration represents the .metadata.generation that this
   * ClusterConfig was reconciled against.
   *
   * @generated from field: optional int64 observedGeneration = 3;
   */
  observedGeneration: bigint;

  /**
   * LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh
   * annotation that was handled by the controller. This field can be used to
   * determine whether the request to refresh the resource has been handled.
   * +optional
   *
   * @generated from field: optional string lastHandledRefresh = 4;
   */
  lastHandledRefresh: string;

  /**
   * WebhookReceivers describes the status of cluster-scoped webhook receivers.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.WebhookReceiverDetails webhookReceivers = 2;
   */
  webhookReceivers: WebhookReceiverDetails[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterConfigStatus.
 * Use `create(ClusterConfigStatusSchema)` to create a new message.
 */
export const ClusterConfigStatusSchema: GenMessage<ClusterConfigStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 17);

/**
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTask
 */
export type ClusterPromotionTask = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTask"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes the desired transition of a specific Stage into a specific
   * Freight.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionTaskSpec spec = 2;
   */
  spec?: PromotionTaskSpec;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTask.
 * Use `create(ClusterPromotionTaskSchema)` to create a new message.
 */
export const ClusterPromotionTaskSchema: GenMessage<ClusterPromotionTask> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 18);

/**
 * ClusterPromotionTaskList contains a list of PromotionTasks.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTaskList
 */
export type ClusterPromotionTaskList = Message<"github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTaskList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTask items = 2;
   */
  items: ClusterPromotionTask[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ClusterPromotionTaskList.
 * Use `create(ClusterPromotionTaskListSchema)` to create a new message.
 */
export const ClusterPromotionTaskListSchema: GenMessage<ClusterPromotionTaskList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 19);

/**
 * CurrentStage reflects a Stage's current use of Freight.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.CurrentStage
 */
export type CurrentStage = Message<"github.com.akuity.kargo.api.v1alpha1.CurrentStage"> & {
  /**
   * Since is the time at which the Stage most recently started using the
   * Freight. This can be used to calculate how long the Freight has been in use
   * by the Stage.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time since = 1;
   */
  since?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.CurrentStage.
 * Use `create(CurrentStageSchema)` to create a new message.
 */
export const CurrentStageSchema: GenMessage<CurrentStage> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 20);

/**
 * DiscoveredArtifacts holds the artifacts discovered by the Warehouse for its
 * subscriptions.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.DiscoveredArtifacts
 */
export type DiscoveredArtifacts = Message<"github.com.akuity.kargo.api.v1alpha1.DiscoveredArtifacts"> & {
  /**
   * DiscoveredAt is the time at which the Warehouse discovered the artifacts.
   *
   * +optional
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time discoveredAt = 4;
   */
  discoveredAt?: Time;

  /**
   * Git holds the commits discovered by the Warehouse for the Git
   * subscriptions.
   *
   * +optional
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.GitDiscoveryResult git = 1;
   */
  git: GitDiscoveryResult[];

  /**
   * Images holds the image references discovered by the Warehouse for the
   * image subscriptions.
   *
   * +optional
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ImageDiscoveryResult images = 2;
   */
  images: ImageDiscoveryResult[];

  /**
   * Charts holds the charts discovered by the Warehouse for the chart
   * subscriptions.
   *
   * +optional
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ChartDiscoveryResult charts = 3;
   */
  charts: ChartDiscoveryResult[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.DiscoveredArtifacts.
 * Use `create(DiscoveredArtifactsSchema)` to create a new message.
 */
export const DiscoveredArtifactsSchema: GenMessage<DiscoveredArtifacts> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 21);

/**
 * DiscoveredCommit represents a commit discovered by a Warehouse for a
 * GitSubscription.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.DiscoveredCommit
 */
export type DiscoveredCommit = Message<"github.com.akuity.kargo.api.v1alpha1.DiscoveredCommit"> & {
  /**
   * ID is the identifier of the commit. This typically is a SHA-1 hash.
   *
   * +kubebuilder:validation:MinLength=1
   *
   * @generated from field: optional string id = 1;
   */
  id: string;

  /**
   * Branch is the branch in which the commit was found. This field is
   * optional, and populated based on the CommitSelectionStrategy of the
   * GitSubscription.
   *
   * @generated from field: optional string branch = 2;
   */
  branch: string;

  /**
   * Tag is the tag that resolved to this commit. This field is optional, and
   * populated based on the CommitSelectionStrategy of the GitSubscription.
   *
   * @generated from field: optional string tag = 3;
   */
  tag: string;

  /**
   * Subject is the subject of the commit (i.e. the first line of the commit
   * message).
   *
   * @generated from field: optional string subject = 4;
   */
  subject: string;

  /**
   * Author is the author of the commit.
   *
   * @generated from field: optional string author = 5;
   */
  author: string;

  /**
   * Committer is the person who committed the commit.
   *
   * @generated from field: optional string committer = 6;
   */
  committer: string;

  /**
   * CreatorDate is the commit creation date as specified by the commit, or
   * the tagger date if the commit belongs to an annotated tag.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time creatorDate = 7;
   */
  creatorDate?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.DiscoveredCommit.
 * Use `create(DiscoveredCommitSchema)` to create a new message.
 */
export const DiscoveredCommitSchema: GenMessage<DiscoveredCommit> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 22);

/**
 * DiscoveredImageReference represents an image reference discovered by a
 * Warehouse for an ImageSubscription.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.DiscoveredImageReference
 */
export type DiscoveredImageReference = Message<"github.com.akuity.kargo.api.v1alpha1.DiscoveredImageReference"> & {
  /**
   * Tag is the tag of the image.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=128
   * +kubebuilder:validation:Pattern=`^[\w.\-\_]+$`
   * +akuity:test-kubebuilder-pattern=Tag
   *
   * @generated from field: optional string tag = 1;
   */
  tag: string;

  /**
   * Digest is the digest of the image.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=`^[a-z0-9]+:[a-f0-9]+$`
   * +akuity:test-kubebuilder-pattern=Digest
   *
   * @generated from field: optional string digest = 2;
   */
  digest: string;

  /**
   * Annotations is a map of key-value pairs that provide additional
   * information about the image.
   *
   * @generated from field: map<string, string> annotations = 5;
   */
  annotations: { [key: string]: string };

  /**
   * CreatedAt is the time the image was created. This field is optional, and
   * not populated for every ImageSelectionStrategy.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time createdAt = 4;
   */
  createdAt?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.DiscoveredImageReference.
 * Use `create(DiscoveredImageReferenceSchema)` to create a new message.
 */
export const DiscoveredImageReferenceSchema: GenMessage<DiscoveredImageReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 23);

/**
 * DockerHubWebhookReceiverConfig describes a webhook receiver that is
 * compatible with Docker Hub payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.DockerHubWebhookReceiverConfig
 */
export type DockerHubWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.DockerHubWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * The Secret's data map is expected to contain a `secret` key whose value
   * does NOT need to be shared directly with Docker Hub when registering a
   * webhook. It is used only by Kargo to create a complex, hard-to-guess URL,
   * which implicitly serves as a shared secret. For more information about
   * Docker Hub webhooks, please refer to the Docker documentation:
   *   https://docs.docker.com/docker-hub/webhooks/
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.DockerHubWebhookReceiverConfig.
 * Use `create(DockerHubWebhookReceiverConfigSchema)` to create a new message.
 */
export const DockerHubWebhookReceiverConfigSchema: GenMessage<DockerHubWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 24);

/**
 * ExpressionVariable describes a single variable that may be referenced by
 * expressions in the context of a ClusterPromotionTask, PromotionTask,
 * Promotion, AnalysisRun arguments, or other objects that support expressions.
 *
 * It is used to pass information to the expression evaluation engine, and to
 * allow for dynamic evaluation of expressions based on the variable values.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ExpressionVariable
 */
export type ExpressionVariable = Message<"github.com.akuity.kargo.api.v1alpha1.ExpressionVariable"> & {
  /**
   * Name is the name of the variable.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=^[a-zA-Z_]\w*$
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Value is the value of the variable. It is allowed to utilize expressions
   * in the value.
   * See https://docs.kargo.io/user-guide/reference-docs/expressions for details.
   *
   * @generated from field: optional string value = 2;
   */
  value: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ExpressionVariable.
 * Use `create(ExpressionVariableSchema)` to create a new message.
 */
export const ExpressionVariableSchema: GenMessage<ExpressionVariable> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 25);

/**
 * Freight represents a collection of versioned artifacts.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Freight
 */
export type Freight = Message<"github.com.akuity.kargo.api.v1alpha1.Freight"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Alias is a human-friendly alias for a piece of Freight. This is an optional
   * field. A defaulting webhook will sync this field with the value of the
   * kargo.akuity.io/alias label. When the alias label is not present or differs
   * from the value of this field, the defaulting webhook will set the label to
   * the value of this field. If the alias label is present and this field is
   * empty, the defaulting webhook will set the value of this field to the value
   * of the alias label. If this field is empty and the alias label is not
   * present, the defaulting webhook will choose an available alias and assign
   * it to both the field and label.
   *
   * @generated from field: optional string alias = 7;
   */
  alias: string;

  /**
   * Origin describes a kind of Freight in terms of its origin.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightOrigin origin = 9;
   */
  origin?: FreightOrigin;

  /**
   * Commits describes specific Git repository commits.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.GitCommit commits = 3;
   */
  commits: GitCommit[];

  /**
   * Images describes specific versions of specific container images.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Image images = 4;
   */
  images: Image[];

  /**
   * Charts describes specific versions of specific Helm charts.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Chart charts = 5;
   */
  charts: Chart[];

  /**
   * Status describes the current status of this Freight.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightStatus status = 6;
   */
  status?: FreightStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Freight.
 * Use `create(FreightSchema)` to create a new message.
 */
export const FreightSchema: GenMessage<Freight> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 26);

/**
 * FreightCollection is a collection of FreightReferences, each of which
 * represents a piece of Freight that has been selected for deployment to a
 * Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightCollection
 */
export type FreightCollection = Message<"github.com.akuity.kargo.api.v1alpha1.FreightCollection"> & {
  /**
   * ID is a unique and deterministically calculated identifier for the
   * FreightCollection. It is updated on each use of the UpdateOrPush method.
   *
   * @generated from field: optional string id = 3;
   */
  id: string;

  /**
   * Freight is a map of FreightReference objects, indexed by their Warehouse
   * origin.
   *
   * @generated from field: map<string, github.com.akuity.kargo.api.v1alpha1.FreightReference> items = 1;
   */
  items: { [key: string]: FreightReference };

  /**
   * VerificationHistory is a stack of recent VerificationInfo. By default,
   * the last ten VerificationInfo are stored.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.VerificationInfo verificationHistory = 2;
   */
  verificationHistory: VerificationInfo[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightCollection.
 * Use `create(FreightCollectionSchema)` to create a new message.
 */
export const FreightCollectionSchema: GenMessage<FreightCollection> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 27);

/**
 * FreightList is a list of Freight resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightList
 */
export type FreightList = Message<"github.com.akuity.kargo.api.v1alpha1.FreightList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Freight items = 2;
   */
  items: Freight[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightList.
 * Use `create(FreightListSchema)` to create a new message.
 */
export const FreightListSchema: GenMessage<FreightList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 28);

/**
 * FreightOrigin describes a kind of Freight in terms of where it may have
 * originated.
 *
 * +protobuf.options.(gogoproto.goproto_stringer)=false
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightOrigin
 */
export type FreightOrigin = Message<"github.com.akuity.kargo.api.v1alpha1.FreightOrigin"> & {
  /**
   * Kind is the kind of resource from which Freight may have originated. At
   * present, this can only be "Warehouse".
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional string kind = 1;
   */
  kind: string;

  /**
   * Name is the name of the resource of the kind indicated by the Kind field
   * from which Freight may originate.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional string name = 2;
   */
  name: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightOrigin.
 * Use `create(FreightOriginSchema)` to create a new message.
 */
export const FreightOriginSchema: GenMessage<FreightOrigin> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 29);

/**
 * FreightReference is a simplified representation of a piece of Freight -- not
 * a root resource type.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightReference
 */
export type FreightReference = Message<"github.com.akuity.kargo.api.v1alpha1.FreightReference"> & {
  /**
   * Name is a system-assigned identifier derived deterministically from
   * the contents of the Freight. I.e., two pieces of Freight can be compared
   * for equality by comparing their Names.
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Origin describes a kind of Freight in terms of its origin.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightOrigin origin = 8;
   */
  origin?: FreightOrigin;

  /**
   * Commits describes specific Git repository commits.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.GitCommit commits = 2;
   */
  commits: GitCommit[];

  /**
   * Images describes specific versions of specific container images.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Image images = 3;
   */
  images: Image[];

  /**
   * Charts describes specific versions of specific Helm charts.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Chart charts = 4;
   */
  charts: Chart[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightReference.
 * Use `create(FreightReferenceSchema)` to create a new message.
 */
export const FreightReferenceSchema: GenMessage<FreightReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 30);

/**
 * FreightRequest expresses a Stage's need for Freight having originated from a
 * particular Warehouse.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightRequest
 */
export type FreightRequest = Message<"github.com.akuity.kargo.api.v1alpha1.FreightRequest"> & {
  /**
   * Origin specifies from where the requested Freight must have originated.
   * This is a required field.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightOrigin origin = 1;
   */
  origin?: FreightOrigin;

  /**
   * Sources describes where the requested Freight may be obtained from. This is
   * a required field.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightSources sources = 2;
   */
  sources?: FreightSources;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightRequest.
 * Use `create(FreightRequestSchema)` to create a new message.
 */
export const FreightRequestSchema: GenMessage<FreightRequest> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 31);

/**
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightSources
 */
export type FreightSources = Message<"github.com.akuity.kargo.api.v1alpha1.FreightSources"> & {
  /**
   * Direct indicates the requested Freight may be obtained directly from the
   * Warehouse from which it originated. If this field's value is false, then
   * the value of the Stages field must be non-empty. i.e. Between the two
   * fields, at least one source must be specified.
   *
   * @generated from field: optional bool direct = 1;
   */
  direct: boolean;

  /**
   * Stages identifies other "upstream" Stages as potential sources of the
   * requested Freight. If this field's value is empty, then the value of the
   * Direct field must be true. i.e. Between the two fields, at least on source
   * must be specified.
   *
   * @generated from field: repeated string stages = 2;
   */
  stages: string[];

  /**
   * RequiredSoakTime specifies a minimum duration for which the requested
   * Freight must have continuously occupied ("soaked in") in an upstream Stage
   * before becoming available for promotion to this Stage. This is an optional
   * field. If nil or zero, no soak time is required. Any soak time requirement
   * is in ADDITION to the requirement that Freight be verified in an upstream
   * Stage to become available for promotion to this Stage, although a manual
   * approval for promotion to this Stage will supersede any soak time
   * requirement.
   *
   * +kubebuilder:validation:Type=string
   * +kubebuilder:validation:Pattern=`^([0-9]+(\.[0-9]+)?(s|m|h))+$`
   * +akuity:test-kubebuilder-pattern=Duration
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration requiredSoakTime = 3;
   */
  requiredSoakTime?: Duration;

  /**
   * AvailabilityStrategy specifies the semantics for how requested Freight is
   * made available to the Stage. This field is optional. When left unspecified,
   * the field is implicitly treated as if its value were "OneOf".
   *
   * Accepted Values:
   *
   * - "All": Freight must be be verified and, if applicable, soaked in all
   *   upstream Stages to be considered available for promotion.
   * - "OneOf": Freight must be verified and, if applicable, soaked in at least
   *    one upstream Stage to be considered available for promotion.
   * - "": Treated the same as "OneOf".
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string availabilityStrategy = 4;
   */
  availabilityStrategy: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightSources.
 * Use `create(FreightSourcesSchema)` to create a new message.
 */
export const FreightSourcesSchema: GenMessage<FreightSources> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 32);

/**
 * FreightStatus describes a piece of Freight's most recently observed state.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.FreightStatus
 */
export type FreightStatus = Message<"github.com.akuity.kargo.api.v1alpha1.FreightStatus"> & {
  /**
   * CurrentlyIn describes the Stages in which this Freight is currently in use.
   *
   * @generated from field: map<string, github.com.akuity.kargo.api.v1alpha1.CurrentStage> currentlyIn = 3;
   */
  currentlyIn: { [key: string]: CurrentStage };

  /**
   * VerifiedIn describes the Stages in which this Freight has been verified
   * through promotion and subsequent health checks.
   *
   * @generated from field: map<string, github.com.akuity.kargo.api.v1alpha1.VerifiedStage> verifiedIn = 1;
   */
  verifiedIn: { [key: string]: VerifiedStage };

  /**
   * ApprovedFor describes the Stages for which this Freight has been approved
   * preemptively/manually by a user. This is useful for hotfixes, where one
   * might wish to promote a piece of Freight to a given Stage without
   * transiting the entire pipeline.
   *
   * @generated from field: map<string, github.com.akuity.kargo.api.v1alpha1.ApprovedStage> approvedFor = 2;
   */
  approvedFor: { [key: string]: ApprovedStage };

  /**
   * Metadata is a map of arbitrary metadata associated with the Freight.
   * This is useful for storing additional information about the Freight
   * or Promotion that can be shared across steps or stages.
   *
   * @generated from field: map<string, k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON> metadata = 4;
   */
  metadata: { [key: string]: JSON };
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.FreightStatus.
 * Use `create(FreightStatusSchema)` to create a new message.
 */
export const FreightStatusSchema: GenMessage<FreightStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 33);

/**
 * GitCommit describes a specific commit from a specific Git repository.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GitCommit
 */
export type GitCommit = Message<"github.com.akuity.kargo.api.v1alpha1.GitCommit"> & {
  /**
   * RepoURL is the URL of a Git repository.
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * ID is the ID of a specific commit in the Git repository specified by
   * RepoURL.
   *
   * @generated from field: optional string id = 2;
   */
  id: string;

  /**
   * Branch denotes the branch of the repository where this commit was found.
   *
   * @generated from field: optional string branch = 3;
   */
  branch: string;

  /**
   * Tag denotes a tag in the repository that matched selection criteria and
   * resolved to this commit.
   *
   * @generated from field: optional string tag = 4;
   */
  tag: string;

  /**
   * Message is the message associated with the commit. At present, this only
   * contains the first line (subject) of the commit message.
   *
   * @generated from field: optional string message = 6;
   */
  message: string;

  /**
   * Author is the author of the commit.
   *
   * @generated from field: optional string author = 7;
   */
  author: string;

  /**
   * Committer is the person who committed the commit.
   *
   * @generated from field: optional string committer = 8;
   */
  committer: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GitCommit.
 * Use `create(GitCommitSchema)` to create a new message.
 */
export const GitCommitSchema: GenMessage<GitCommit> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 34);

/**
 * GitDiscoveryResult represents the result of a Git discovery operation for a
 * GitSubscription.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GitDiscoveryResult
 */
export type GitDiscoveryResult = Message<"github.com.akuity.kargo.api.v1alpha1.GitDiscoveryResult"> & {
  /**
   * RepoURL is the repository URL of the GitSubscription.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=`(?:^(ssh|https?)://(?:([\w-]+)(:(.+))?@)?([\w-]+(?:\.[\w-]+)*)(?::(\d{1,5}))?(/.*)$)|(?:^([\w-]+)@([\w+]+(?:\.[\w-]+)*):(/?.*))`
   * +akuity:test-kubebuilder-pattern=GitRepoURLPattern
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Commits is a list of commits discovered by the Warehouse for the
   * GitSubscription. An empty list indicates that the discovery operation was
   * successful, but no commits matching the GitSubscription criteria were found.
   *
   * +optional
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.DiscoveredCommit commits = 2;
   */
  commits: DiscoveredCommit[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GitDiscoveryResult.
 * Use `create(GitDiscoveryResultSchema)` to create a new message.
 */
export const GitDiscoveryResultSchema: GenMessage<GitDiscoveryResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 35);

/**
 * GitHubWebhookReceiverConfig describes a webhook receiver that is compatible
 * with GitHub payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GitHubWebhookReceiverConfig
 */
export type GitHubWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.GitHubWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret` key whose value is
   * the shared secret used to authenticate the webhook requests sent by GitHub.
   * For more information please refer to GitHub documentation:
   *   https://docs.github.com/en/webhooks/using-webhooks/validating-webhook-deliveries
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GitHubWebhookReceiverConfig.
 * Use `create(GitHubWebhookReceiverConfigSchema)` to create a new message.
 */
export const GitHubWebhookReceiverConfigSchema: GenMessage<GitHubWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 36);

/**
 * GitLabWebhookReceiverConfig describes a webhook receiver that is compatible
 * with GitLab payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GitLabWebhookReceiverConfig
 */
export type GitLabWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.GitLabWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The secret is expected to contain a `secret-token` key containing the
   * shared secret specified when registering the webhook in GitLab. For more
   * information about this token, please refer to the GitLab documentation:
   *   https://docs.gitlab.com/user/project/integrations/webhooks/
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GitLabWebhookReceiverConfig.
 * Use `create(GitLabWebhookReceiverConfigSchema)` to create a new message.
 */
export const GitLabWebhookReceiverConfigSchema: GenMessage<GitLabWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 37);

/**
 * GitSubscription defines a subscription to a Git repository.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GitSubscription
 */
export type GitSubscription = Message<"github.com.akuity.kargo.api.v1alpha1.GitSubscription"> & {
  /**
   * URL is the repository's URL. This is a required field.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=`(?:^(ssh|https?)://(?:([\w-]+)(:(.+))?@)?([\w-]+(?:\.[\w-]+)*)(?::(\d{1,5}))?(/.*)$)|(?:^([\w-]+)@([\w+]+(?:\.[\w-]+)*):(/?.*))`
   * +akuity:test-kubebuilder-pattern=GitRepoURLPattern
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * CommitSelectionStrategy specifies the rules for how to identify the newest
   * commit of interest in the repository specified by the RepoURL field. This
   * field is optional. When left unspecified, the field is implicitly treated
   * as if its value were "NewestFromBranch".
   *
   * Accepted values:
   *
   * - "NewestFromBranch": Selects the latest commit on the branch specified
   *   by the Branch field or the default branch if none is specified. This is
   *   the default strategy.
   *
   * - "SemVer": Selects the commit referenced by the semantically greatest
   *   tag. The SemverConstraint field can optionally be used to narrow the set
   *   of tags eligible for selection.
   *
   * - "Lexical": Selects the commit referenced by the lexicographically
   *   greatest tag. Useful when tags embed a _leading_ date or timestamp. The
   *   AllowTags and IgnoreTags fields can optionally be used to narrow the set
   *   of tags eligible for selection.
   *
   * - "NewestTag": Selects the commit referenced by the most recently created
   *   tag. The AllowTags and IgnoreTags fields can optionally be used to
   *   narrow the set of tags eligible for selection.
   *
   * +kubebuilder:default=NewestFromBranch
   *
   * @generated from field: optional string commitSelectionStrategy = 2;
   */
  commitSelectionStrategy: string;

  /**
   * Branch references a particular branch of the repository. The value in this
   * field only has any effect when the CommitSelectionStrategy is
   * NewestFromBranch or left unspecified (which is implicitly the same as
   * NewestFromBranch). This field is optional. When left unspecified, (and the
   * CommitSelectionStrategy is NewestFromBranch or unspecified), the
   * subscription is implicitly to the repository's default branch.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=255
   * +kubebuilder:validation:Pattern=`^[a-zA-Z0-9]([a-zA-Z0-9._\/-]*[a-zA-Z0-9_-])?$`
   * +akuity:test-kubebuilder-pattern=Branch
   *
   * @generated from field: optional string branch = 3;
   */
  branch: string;

  /**
   * StrictSemvers specifies whether only "strict" semver tags should be
   * considered. A "strict" semver tag is one containing ALL of major, minor,
   * and patch version components. This is enabled by default, but only has any
   * effect when the CommitSelectionStrategy is SemVer. This should be disabled
   * cautiously, as it creates the potential for any tag containing numeric
   * characters only to be mistaken for a semver string containing the major
   * version number only.
   *
   * +kubebuilder:default=true
   *
   * @generated from field: optional bool strictSemvers = 11;
   */
  strictSemvers: boolean;

  /**
   * SemverConstraint specifies constraints on what new tagged commits are
   * considered in determining the newest commit of interest. The value in this
   * field only has any effect when the CommitSelectionStrategy is SemVer. This
   * field is optional. When left unspecified, there will be no constraints,
   * which means the latest semantically tagged commit will always be used. Care
   * should be taken with leaving this field unspecified, as it can lead to the
   * unanticipated rollout of breaking changes.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string semverConstraint = 4;
   */
  semverConstraint: string;

  /**
   * AllowTags is a regular expression that can optionally be used to limit the
   * tags that are considered in determining the newest commit of interest. The
   * value in this field only has any effect when the CommitSelectionStrategy is
   * Lexical, NewestTag, or SemVer. This field is optional.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string allowTags = 5;
   */
  allowTags: string;

  /**
   * IgnoreTags is a list of tags that must be ignored when determining the
   * newest commit of interest. No regular expressions or glob patterns are
   * supported yet. The value in this field only has any effect when the
   * CommitSelectionStrategy is Lexical, NewestTag, or SemVer. This field is
   * optional.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: repeated string ignoreTags = 6;
   */
  ignoreTags: string[];

  /**
   * ExpressionFilter is an expression that can optionally be used to limit
   * the commits or tags that are considered in determining the newest commit
   * of interest based on their metadata.
   *
   * For commit-based strategies (NewestFromBranch), the filter applies to
   * commits and has access to commit metadata variables.
   * For tag-based strategies (Lexical, NewestTag, SemVer), the filter applies
   * to tags and has access to tag metadata variables. The filter is applied
   * after AllowTags, IgnoreTags, and SemverConstraint fields.
   *
   * The expression should be a valid expr-lang expression that evaluates to
   * true or false. When the expression evaluates to true, the commit/tag is
   * included in the set that is considered. When the expression evaluates to
   * false, the commit/tag is excluded.
   *
   * Available variables depend on the CommitSelectionStrategy:
   *
   * For NewestFromBranch (commit filtering):
   *   - `id`: The ID (sha) of the commit.
   *   - `commitDate`: The commit date of the commit.
   *   - `author`: The author of the commit message, in the format "Name <email>".
   *   - `committer`: The person who committed the commit, in the format
   * 	   "Name <email>".
   *   - `subject`: The subject (first line) of the commit message.
   *
   * For Lexical, NewestTag, SemVer (tag filtering):
   *   - `tag`: The name of the tag.
   *   - `id`: The ID (sha) of the commit associated with the tag.
   *   - `creatorDate`: The creation date of an annotated tag, or the commit
   * 		date of a lightweight tag.
   *   - `author`: The author of the commit message associated with the tag,
   * 	   in the format "Name <email>".
   *   - `committer`: The person who committed the commit associated with the
   * 	   tag, in the format "Name <email>".
   *   - `subject`: The subject (first line) of the commit message associated
   * 	   with the tag.
   * 	 - `tagger`: The person who created the tag, in the format "Name <email>".
   * 	   Only available for annotated tags.
   * 	 - `annotation`: The subject (first line) of the tag annotation. Only
   * 	   available for annotated tags.
   *
   * Refer to the expr-lang documentation for more details on syntax and
   * capabilities of the expression language: https://expr-lang.org.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string expressionFilter = 12;
   */
  expressionFilter: string;

  /**
   * InsecureSkipTLSVerify specifies whether certificate verification errors
   * should be ignored when connecting to the repository. This should be enabled
   * only with great caution.
   *
   * @generated from field: optional bool insecureSkipTLSVerify = 7;
   */
  insecureSkipTLSVerify: boolean;

  /**
   * IncludePaths is a list of selectors that designate paths in the repository
   * that should trigger the production of new Freight when changes are detected
   * therein. When specified, only changes in the identified paths will trigger
   * Freight production. When not specified, changes in any path will trigger
   * Freight production. Selectors may be defined using:
   *   1. Exact paths to files or directories (ex. "charts/foo")
   *   2. Glob patterns (prefix the pattern with "glob:"; ex. "glob:*.yaml")
   *   3. Regular expressions (prefix the pattern with "regex:" or "regexp:";
   *      ex. "regexp:^.*\.yaml$")
   *
   * Paths selected by IncludePaths may be unselected by ExcludePaths. This
   * is a useful method for including a broad set of paths and then excluding a
   * subset of them.
   * +kubebuilder:validation:Optional
   *
   * @generated from field: repeated string includePaths = 8;
   */
  includePaths: string[];

  /**
   * ExcludePaths is a list of selectors that designate paths in the repository
   * that should NOT trigger the production of new Freight when changes are
   * detected therein. When specified, changes in the identified paths will not
   * trigger Freight production. When not specified, paths that should trigger
   * Freight production will be defined solely by IncludePaths. Selectors may be
   * defined using:
   *   1. Exact paths to files or directories (ex. "charts/foo")
   *   2. Glob patterns (prefix the pattern with "glob:"; ex. "glob:*.yaml")
   *   3. Regular expressions (prefix the pattern with "regex:" or "regexp:";
   *      ex. "regexp:^.*\.yaml$")
   * Paths selected by IncludePaths may be unselected by ExcludePaths. This
   * is a useful method for including a broad set of paths and then excluding a
   * subset of them.
   * +kubebuilder:validation:Optional
   *
   * @generated from field: repeated string excludePaths = 9;
   */
  excludePaths: string[];

  /**
   * DiscoveryLimit is an optional limit on the number of commits that can be
   * discovered for this subscription. The limit is applied after filtering
   * commits based on the AllowTags and IgnoreTags fields.
   * When left unspecified, the field is implicitly treated as if its value
   * were "20". The upper limit for this field is 100.
   *
   * +kubebuilder:validation:Minimum=1
   * +kubebuilder:validation:Maximum=100
   * +kubebuilder:default=20
   *
   * @generated from field: optional int32 discoveryLimit = 10;
   */
  discoveryLimit: number;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GitSubscription.
 * Use `create(GitSubscriptionSchema)` to create a new message.
 */
export const GitSubscriptionSchema: GenMessage<GitSubscription> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 38);

/**
 * GiteaWebhookReceiverConfig describes a webhook receiver that is compatible
 * with Gitea payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.GiteaWebhookReceiverConfig
 */
export type GiteaWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.GiteaWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret` key whose value is
   * the shared secret used to authenticate the webhook requests sent by Gitea.
   * For more information please refer to the Gitea documentation:
   *   https://docs.gitea.io/en-us/webhooks/
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.GiteaWebhookReceiverConfig.
 * Use `create(GiteaWebhookReceiverConfigSchema)` to create a new message.
 */
export const GiteaWebhookReceiverConfigSchema: GenMessage<GiteaWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 39);

/**
 * Health describes the health of a Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Health
 */
export type Health = Message<"github.com.akuity.kargo.api.v1alpha1.Health"> & {
  /**
   * Status describes the health of the Stage.
   *
   * @generated from field: optional string status = 1;
   */
  status: string;

  /**
   * Issues clarifies why a Stage in any state other than Healthy is in that
   * state. This field will always be the empty when a Stage is Healthy.
   *
   * @generated from field: repeated string issues = 2;
   */
  issues: string[];

  /**
   * Config is the opaque configuration of all health checks performed on this
   * Stage.
   *
   * @generated from field: optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON config = 4;
   */
  config?: JSON;

  /**
   * Output is the opaque output of all health checks performed on this Stage.
   *
   * @generated from field: optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON output = 5;
   */
  output?: JSON;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Health.
 * Use `create(HealthSchema)` to create a new message.
 */
export const HealthSchema: GenMessage<Health> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 40);

/**
 * HealthCheckStep describes a health check directive which can be executed by
 * a Stage to verify the health of a Promotion result.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.HealthCheckStep
 */
export type HealthCheckStep = Message<"github.com.akuity.kargo.api.v1alpha1.HealthCheckStep"> & {
  /**
   * Uses identifies a runner that can execute this step.
   *
   * +kubebuilder:validation:MinLength=1
   *
   * @generated from field: optional string uses = 1;
   */
  uses: string;

  /**
   * Config is the configuration for the directive.
   *
   * @generated from field: optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON config = 2;
   */
  config?: JSON;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.HealthCheckStep.
 * Use `create(HealthCheckStepSchema)` to create a new message.
 */
export const HealthCheckStepSchema: GenMessage<HealthCheckStep> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 41);

/**
 * HealthStats contains a summary of the collective health of some resource
 * type.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.HealthStats
 */
export type HealthStats = Message<"github.com.akuity.kargo.api.v1alpha1.HealthStats"> & {
  /**
   * Healthy contains the number of resources that are explicitly healthy.
   *
   * @generated from field: optional int64 healthy = 1;
   */
  healthy: bigint;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.HealthStats.
 * Use `create(HealthStatsSchema)` to create a new message.
 */
export const HealthStatsSchema: GenMessage<HealthStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 42);

/**
 * Image describes a specific version of a container image.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Image
 */
export type Image = Message<"github.com.akuity.kargo.api.v1alpha1.Image"> & {
  /**
   * RepoURL describes the repository in which the image can be found.
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Tag identifies a specific version of the image in the repository specified
   * by RepoURL.
   *
   * @generated from field: optional string tag = 3;
   */
  tag: string;

  /**
   * Digest identifies a specific version of the image in the repository
   * specified by RepoURL. This is a more precise identifier than Tag.
   *
   * @generated from field: optional string digest = 4;
   */
  digest: string;

  /**
   * Annotations is a map of arbitrary metadata for the image.
   *
   * @generated from field: map<string, string> annotations = 5;
   */
  annotations: { [key: string]: string };
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Image.
 * Use `create(ImageSchema)` to create a new message.
 */
export const ImageSchema: GenMessage<Image> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 43);

/**
 * ImageDiscoveryResult represents the result of an image discovery operation
 * for an ImageSubscription.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ImageDiscoveryResult
 */
export type ImageDiscoveryResult = Message<"github.com.akuity.kargo.api.v1alpha1.ImageDiscoveryResult"> & {
  /**
   * RepoURL is the repository URL of the image, as specified in the
   * ImageSubscription.
   *
   * +kubebuilder:validation:MinLength=1
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * Platform is the target platform constraint of the ImageSubscription
   * for which references were discovered. This field is optional, and
   * only populated if the ImageSubscription specifies a Platform.
   *
   * @generated from field: optional string platform = 2;
   */
  platform: string;

  /**
   * References is a list of image references discovered by the Warehouse for
   * the ImageSubscription. An empty list indicates that the discovery
   * operation was successful, but no images matching the ImageSubscription
   * criteria were found.
   *
   * +optional
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.DiscoveredImageReference references = 3;
   */
  references: DiscoveredImageReference[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ImageDiscoveryResult.
 * Use `create(ImageDiscoveryResultSchema)` to create a new message.
 */
export const ImageDiscoveryResultSchema: GenMessage<ImageDiscoveryResult> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 44);

/**
 * ImageSubscription defines a subscription to an image repository.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ImageSubscription
 */
export type ImageSubscription = Message<"github.com.akuity.kargo.api.v1alpha1.ImageSubscription"> & {
  /**
   * RepoURL specifies the URL of the image repository to subscribe to. The
   * value in this field MUST NOT include an image tag. This field is required.
   *
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:Pattern=`^(\w+([\.-]\w+)*(:[\d]+)?/)?(\w+([\.-]\w+)*)(/\w+([\.-]\w+)*)*$`
   * +akuity:test-kubebuilder-pattern=ImageRepoURL
   *
   * @generated from field: optional string repoURL = 1;
   */
  repoURL: string;

  /**
   * ImageSelectionStrategy specifies the rules for how to identify the newest version
   * of the image specified by the RepoURL field. This field is optional. When
   * left unspecified, the field is implicitly treated as if its value were
   * "SemVer".
   *
   * Accepted values:
   *
   * - "Digest": Selects the image currently referenced by the tag specified
   *   (unintuitively) by the SemverConstraint field.
   *
   * - "Lexical": Selects the image referenced by the lexicographically greatest
   *   tag. Useful when tags embed a leading date or timestamp. The AllowTags
   *   and IgnoreTags fields can optionally be used to narrow the set of tags
   *   eligible for selection.
   *
   * - "NewestBuild": Selects the image that was most recently pushed to the
   *   repository. The AllowTags and IgnoreTags fields can optionally be used
   *   to narrow the set of tags eligible for selection. This is the least
   *   efficient and is likely to cause rate limiting affecting this Warehouse
   *   and possibly others. This strategy should be avoided.
   *
   * - "SemVer": Selects the image with the semantically greatest tag. The
   *   AllowTags and IgnoreTags fields can optionally be used to narrow the set
   *   of tags eligible for selection.
   *
   * +kubebuilder:default=SemVer
   *
   * @generated from field: optional string imageSelectionStrategy = 3;
   */
  imageSelectionStrategy: string;

  /**
   * StrictSemvers specifies whether only "strict" semver tags should be
   * considered. A "strict" semver tag is one containing ALL of major, minor,
   * and patch version components. This is enabled by default, but only has any
   * effect when the ImageSelectionStrategy is SemVer. This should be disabled
   * cautiously, as it is not uncommon to tag container images with short Git
   * commit hashes, which have the potential to contain numeric characters only
   * and could be mistaken for a semver string containing the major version
   * number only.
   *
   * +kubebuilder:default=true
   *
   * @generated from field: optional bool strictSemvers = 10;
   */
  strictSemvers: boolean;

  /**
   * SemverConstraint specifies constraints on what new image versions are
   * permissible. The value in this field only has any effect when the
   * ImageSelectionStrategy is SemVer or left unspecified (which is implicitly
   * the same as SemVer). This field is also optional. When left unspecified,
   * (and the ImageSelectionStrategy is SemVer or unspecified), there will be no
   * constraints, which means the latest semantically tagged version of an image
   * will always be used. Care should be taken with leaving this field
   * unspecified, as it can lead to the unanticipated rollout of breaking
   * changes.
   * More info: https://github.com/masterminds/semver#checking-version-constraints
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string semverConstraint = 4;
   */
  semverConstraint: string;

  /**
   * AllowTags is a regular expression that can optionally be used to limit the
   * image tags that are considered in determining the newest version of an
   * image. This field is optional.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string allowTags = 5;
   */
  allowTags: string;

  /**
   * IgnoreTags is a list of tags that must be ignored when determining the
   * newest version of an image. No regular expressions or glob patterns are
   * supported yet. This field is optional.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: repeated string ignoreTags = 6;
   */
  ignoreTags: string[];

  /**
   * Platform is a string of the form <os>/<arch> that limits the tags that can
   * be considered when searching for new versions of an image. This field is
   * optional. When left unspecified, it is implicitly equivalent to the
   * OS/architecture of the Kargo controller. Care should be taken to set this
   * value correctly in cases where the image referenced by this
   * ImageRepositorySubscription will run on a Kubernetes node with a different
   * OS/architecture than the Kargo controller. At present this is uncommon, but
   * not unheard of.
   *
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string platform = 7;
   */
  platform: string;

  /**
   * InsecureSkipTLSVerify specifies whether certificate verification errors
   * should be ignored when connecting to the repository. This should be enabled
   * only with great caution.
   *
   * @generated from field: optional bool insecureSkipTLSVerify = 8;
   */
  insecureSkipTLSVerify: boolean;

  /**
   * DiscoveryLimit is an optional limit on the number of image references
   * that can be discovered for this subscription. The limit is applied after
   * filtering images based on the AllowTags and IgnoreTags fields.
   * When left unspecified, the field is implicitly treated as if its value
   * were "20". The upper limit for this field is 100.
   *
   * +kubebuilder:validation:Minimum=1
   * +kubebuilder:validation:Maximum=100
   * +kubebuilder:default=20
   *
   * @generated from field: optional int32 discoveryLimit = 9;
   */
  discoveryLimit: number;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ImageSubscription.
 * Use `create(ImageSubscriptionSchema)` to create a new message.
 */
export const ImageSubscriptionSchema: GenMessage<ImageSubscription> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 45);

/**
 * Project is a resource type that reconciles to a specially labeled namespace
 * and other TODO: TBD project-level resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Project
 */
export type Project = Message<"github.com.akuity.kargo.api.v1alpha1.Project"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes a Project.
   *
   * Deprecated: Create a ProjectConfig resource with the same name as the
   * Project resource in the Project's namespace. The ProjectConfig resource
   * can be used to configure the Project.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ProjectConfigSpec spec = 2;
   */
  spec?: ProjectConfigSpec;

  /**
   * Status describes the Project's current status.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ProjectStatus status = 3;
   */
  status?: ProjectStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Project.
 * Use `create(ProjectSchema)` to create a new message.
 */
export const ProjectSchema: GenMessage<Project> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 46);

/**
 * ProjectConfig is a resource type that describes the configuration of a
 * Project.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectConfig
 */
export type ProjectConfig = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectConfig"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes the configuration of a Project.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ProjectConfigSpec spec = 2;
   */
  spec?: ProjectConfigSpec;

  /**
   * Status describes the current status of a ProjectConfig.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ProjectConfigStatus status = 3;
   */
  status?: ProjectConfigStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectConfig.
 * Use `create(ProjectConfigSchema)` to create a new message.
 */
export const ProjectConfigSchema: GenMessage<ProjectConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 47);

/**
 * ProjectConfigList is a list of ProjectConfig resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectConfigList
 */
export type ProjectConfigList = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectConfigList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ProjectConfig items = 2;
   */
  items: ProjectConfig[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectConfigList.
 * Use `create(ProjectConfigListSchema)` to create a new message.
 */
export const ProjectConfigListSchema: GenMessage<ProjectConfigList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 48);

/**
 * ProjectSpec is a deprecated alias for ProjectConfigSpec. It is retained for
 * backwards compatibility.
 *
 * Deprecated: Use ProjectConfigSpec instead.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectConfigSpec
 */
export type ProjectConfigSpec = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectConfigSpec"> & {
  /**
   * PromotionPolicies defines policies governing the promotion of Freight to
   * specific Stages within the Project.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.PromotionPolicy promotionPolicies = 1;
   */
  promotionPolicies: PromotionPolicy[];

  /**
   * WebhookReceivers describes Project-specific webhook receivers used for
   * processing events from various external platforms
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.WebhookReceiverConfig webhookReceivers = 2;
   */
  webhookReceivers: WebhookReceiverConfig[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectConfigSpec.
 * Use `create(ProjectConfigSpecSchema)` to create a new message.
 */
export const ProjectConfigSpecSchema: GenMessage<ProjectConfigSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 49);

/**
 * ProjectConfigStatus describes the current status of a ProjectConfig.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectConfigStatus
 */
export type ProjectConfigStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectConfigStatus"> & {
  /**
   * Conditions contains the last observations of the Project Config's current
   * state.
   *
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=map
   * +listMapKey=type
   *
   * @generated from field: repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 1;
   */
  conditions: Condition[];

  /**
   * ObservedGeneration represents the .metadata.generation that this
   * ProjectConfig was reconciled against.
   *
   * @generated from field: optional int64 observedGeneration = 3;
   */
  observedGeneration: bigint;

  /**
   * LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh
   * annotation that was handled by the controller. This field can be used to
   * determine whether the request to refresh the resource has been handled.
   * +optional
   *
   * @generated from field: optional string lastHandledRefresh = 4;
   */
  lastHandledRefresh: string;

  /**
   * WebhookReceivers describes the status of Project-specific webhook
   * receivers.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.WebhookReceiverDetails webhookReceivers = 2;
   */
  webhookReceivers: WebhookReceiverDetails[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectConfigStatus.
 * Use `create(ProjectConfigStatusSchema)` to create a new message.
 */
export const ProjectConfigStatusSchema: GenMessage<ProjectConfigStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 50);

/**
 * ProjectList is a list of Project resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectList
 */
export type ProjectList = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Project items = 2;
   */
  items: Project[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectList.
 * Use `create(ProjectListSchema)` to create a new message.
 */
export const ProjectListSchema: GenMessage<ProjectList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 51);

/**
 * ProjectStats contains a summary of the collective state of a Project's
 * constituent resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectStats
 */
export type ProjectStats = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectStats"> & {
  /**
   * Warehouses contains a summary of the collective state of the Project's
   * Warehouses.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.WarehouseStats warehouses = 1;
   */
  warehouses?: WarehouseStats;

  /**
   * Stages contains a summary of the collective state of the Project's Stages.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.StageStats stages = 2;
   */
  stages?: StageStats;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectStats.
 * Use `create(ProjectStatsSchema)` to create a new message.
 */
export const ProjectStatsSchema: GenMessage<ProjectStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 52);

/**
 * ProjectStatus describes a Project's current status.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.ProjectStatus
 */
export type ProjectStatus = Message<"github.com.akuity.kargo.api.v1alpha1.ProjectStatus"> & {
  /**
   * Conditions contains the last observations of the Project's current
   * state.
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=map
   * +listMapKey=type
   *
   * @generated from field: repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
   */
  conditions: Condition[];

  /**
   * Stats contains a summary of the collective state of a Project's
   * constituent resources.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ProjectStats stats = 4;
   */
  stats?: ProjectStats;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.ProjectStatus.
 * Use `create(ProjectStatusSchema)` to create a new message.
 */
export const ProjectStatusSchema: GenMessage<ProjectStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 53);

/**
 * Promotion represents a request to transition a particular Stage into a
 * particular Freight.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Promotion
 */
export type Promotion = Message<"github.com.akuity.kargo.api.v1alpha1.Promotion"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes the desired transition of a specific Stage into a specific
   * Freight.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionSpec spec = 2;
   */
  spec?: PromotionSpec;

  /**
   * Status describes the current state of the transition represented by this
   * Promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionStatus status = 3;
   */
  status?: PromotionStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Promotion.
 * Use `create(PromotionSchema)` to create a new message.
 */
export const PromotionSchema: GenMessage<Promotion> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 54);

/**
 * PromotionList contains a list of Promotion
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionList
 */
export type PromotionList = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Promotion items = 2;
   */
  items: Promotion[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionList.
 * Use `create(PromotionListSchema)` to create a new message.
 */
export const PromotionListSchema: GenMessage<PromotionList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 55);

/**
 * PromotionPolicy defines policies governing the promotion of Freight to a
 * specific Stage.
 *
 * +kubebuilder:validation:XValidation:message="PromotionPolicy must have exactly one of stage or stageSelector set",rule="has(self.stage) ? !has(self.stageSelector) : has(self.stageSelector)"
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionPolicy
 */
export type PromotionPolicy = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionPolicy"> & {
  /**
   * Stage is the name of the Stage to which this policy applies.
   *
   * Deprecated: Use StageSelector instead.
   *
   * +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
   *
   * @generated from field: optional string stage = 1;
   */
  stage: string;

  /**
   * StageSelector is a selector that matches the Stage resource to which
   * this policy applies.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionPolicySelector stageSelector = 3;
   */
  stageSelector?: PromotionPolicySelector;

  /**
   * AutoPromotionEnabled indicates whether new Freight can automatically be
   * promoted into the Stage referenced by the Stage field. Note: There are may
   * be other conditions also required for an auto-promotion to occur. This
   * field defaults to false, but is commonly set to true for Stages that
   * subscribe to Warehouses instead of other, upstream Stages. This allows
   * users to define Stages that are automatically updated as soon as new
   * artifacts are detected.
   *
   * @generated from field: optional bool autoPromotionEnabled = 2;
   */
  autoPromotionEnabled: boolean;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionPolicy.
 * Use `create(PromotionPolicySchema)` to create a new message.
 */
export const PromotionPolicySchema: GenMessage<PromotionPolicy> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 56);

/**
 * PromotionPolicySelector is a selector that matches the resource to which
 * this policy applies. It can be used to match a specific resource by name or
 * to match a set of resources by label.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionPolicySelector
 */
export type PromotionPolicySelector = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionPolicySelector"> & {
  /**
   * Name is the name of the resource to which this policy applies.
   *
   * It can be an exact name, a regex pattern (with prefix "regex:"), or a
   * glob pattern (with prefix "glob:").
   *
   * When both Name and LabelSelector are specified, the Name is ANDed with
   * the LabelSelector. I.e., the resource must match both the Name and
   * LabelSelector to be selected by this policy.
   *
   * NOTE: Using a specific exact name is the most secure option. Pattern
   * matching via regex or glob can be exploited by users with permissions to
   * match promotion policies that weren't intended to apply to their
   * resources. For example, a user could create a resource with a name
   * deliberately crafted to match the pattern, potentially bypassing intended
   * promotion controls.
   *
   * +optional
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * LabelSelector is a selector that matches the resource to which this policy
   * applies.
   *
   * When both Name and LabelSelector are specified, the Name is ANDed with
   * the LabelSelector. I.e., the resource must match both the Name and
   * LabelSelector to be selected by this policy.
   *
   * NOTE: Using label selectors introduces security risks as users with
   * appropriate permissions could create new resources with labels that match
   * the selector, potentially enabling unauthorized auto-promotion.
   * For sensitive environments, exact Name matching provides tighter control.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector labelSelector = 2;
   */
  labelSelector?: LabelSelector;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionPolicySelector.
 * Use `create(PromotionPolicySelectorSchema)` to create a new message.
 */
export const PromotionPolicySelectorSchema: GenMessage<PromotionPolicySelector> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 57);

/**
 * PromotionReference contains the relevant information about a Promotion
 * as observed by a Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionReference
 */
export type PromotionReference = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionReference"> & {
  /**
   * Name is the name of the Promotion.
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Freight is the freight being promoted.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightReference freight = 2;
   */
  freight?: FreightReference;

  /**
   * Status is the (optional) status of the Promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionStatus status = 3;
   */
  status?: PromotionStatus;

  /**
   * FinishedAt is the time at which the Promotion was completed.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishedAt = 4;
   */
  finishedAt?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionReference.
 * Use `create(PromotionReferenceSchema)` to create a new message.
 */
export const PromotionReferenceSchema: GenMessage<PromotionReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 58);

/**
 * PromotionSpec describes the desired transition of a specific Stage into a
 * specific Freight.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionSpec
 */
export type PromotionSpec = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionSpec"> & {
  /**
   * Stage specifies the name of the Stage to which this Promotion
   * applies. The Stage referenced by this field MUST be in the same
   * namespace as the Promotion.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=253
   * +kubebuilder:validation:Pattern=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`
   * +akuity:test-kubebuilder-pattern=KubernetesName
   *
   * @generated from field: optional string stage = 1;
   */
  stage: string;

  /**
   * Freight specifies the piece of Freight to be promoted into the Stage
   * referenced by the Stage field.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=253
   * +kubebuilder:validation:Pattern=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`
   * +akuity:test-kubebuilder-pattern=KubernetesName
   *
   * @generated from field: optional string freight = 2;
   */
  freight: string;

  /**
   * Vars is a list of variables that can be referenced by expressions in
   * promotion steps.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ExpressionVariable vars = 4;
   */
  vars: ExpressionVariable[];

  /**
   * Steps specifies the directives to be executed as part of this Promotion.
   * The order in which the directives are executed is the order in which they
   * are listed in this field.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinItems=1
   * +kubebuilder:validation:items:XValidation:message="Promotion step must have uses set and must not reference a task",rule="has(self.uses) && !has(self.task)"
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.PromotionStep steps = 3;
   */
  steps: PromotionStep[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionSpec.
 * Use `create(PromotionSpecSchema)` to create a new message.
 */
export const PromotionSpecSchema: GenMessage<PromotionSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 59);

/**
 * PromotionStatus describes the current state of the transition represented by
 * a Promotion.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionStatus
 */
export type PromotionStatus = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionStatus"> & {
  /**
   * LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh
   * annotation that was handled by the controller. This field can be used to
   * determine whether the request to refresh the resource has been handled.
   * +optional
   *
   * @generated from field: optional string lastHandledRefresh = 4;
   */
  lastHandledRefresh: string;

  /**
   * Phase describes where the Promotion currently is in its lifecycle.
   *
   * @generated from field: optional string phase = 1;
   */
  phase: string;

  /**
   * Message is a display message about the promotion, including any errors
   * preventing the Promotion controller from executing this Promotion.
   * i.e. If the Phase field has a value of Failed, this field can be expected
   * to explain why.
   *
   * @generated from field: optional string message = 2;
   */
  message: string;

  /**
   * Freight is the detail of the piece of freight that was referenced by this promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightReference freight = 5;
   */
  freight?: FreightReference;

  /**
   * FreightCollection contains the details of the piece of Freight referenced
   * by this Promotion as well as any additional Freight that is carried over
   * from the target Stage's current state.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.FreightCollection freightCollection = 7;
   */
  freightCollection?: FreightCollection;

  /**
   * HealthChecks contains the health check directives to be executed after
   * the Promotion has completed.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.HealthCheckStep healthChecks = 8;
   */
  healthChecks: HealthCheckStep[];

  /**
   * StartedAt is the time when the promotion started.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 12;
   */
  startedAt?: Time;

  /**
   * FinishedAt is the time when the promotion was completed.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishedAt = 6;
   */
  finishedAt?: Time;

  /**
   * CurrentStep is the index of the current promotion step being executed. This
   * permits steps that have already run successfully to be skipped on
   * subsequent reconciliations attempts.
   *
   * @generated from field: optional int64 currentStep = 9;
   */
  currentStep: bigint;

  /**
   * StepExecutionMetadata tracks metadata pertaining to the execution
   * of individual promotion steps.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.StepExecutionMetadata stepExecutionMetadata = 11;
   */
  stepExecutionMetadata: StepExecutionMetadata[];

  /**
   * State stores the state of the promotion process between reconciliation
   * attempts.
   *
   * @generated from field: optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON state = 10;
   */
  state?: JSON;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionStatus.
 * Use `create(PromotionStatusSchema)` to create a new message.
 */
export const PromotionStatusSchema: GenMessage<PromotionStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 60);

/**
 * PromotionStep describes a directive to be executed as part of a Promotion.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionStep
 */
export type PromotionStep = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionStep"> & {
  /**
   * Uses identifies a runner that can execute this step.
   *
   * +kubebuilder:validation:Optional
   * +kubebuilder:validation:MinLength=1
   *
   * @generated from field: optional string uses = 1;
   */
  uses: string;

  /**
   * Task is a reference to a PromotionTask that should be inflated into a
   * Promotion when it is built from a PromotionTemplate.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionTaskReference task = 5;
   */
  task?: PromotionTaskReference;

  /**
   * As is the alias this step can be referred to as.
   *
   * @generated from field: optional string as = 2;
   */
  as: string;

  /**
   * If is an optional expression that, if present, must evaluate to a boolean
   * value. If the expression evaluates to false, the step will be skipped.
   * If the expression does not evaluate to a boolean value, the step will be
   * considered to have failed.
   *
   * @generated from field: optional string if = 7;
   */
  if: string;

  /**
   * ContinueOnError is a boolean value that, if set to true, will cause the
   * Promotion to continue executing the next step even if this step fails. It
   * also will not permit this failure to impact the overall status of the
   * Promotion.
   *
   * @generated from field: optional bool continueOnError = 8;
   */
  continueOnError: boolean;

  /**
   * Retry is the retry policy for this step.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionStepRetry retry = 4;
   */
  retry?: PromotionStepRetry;

  /**
   * Vars is a list of variables that can be referenced by expressions in
   * the step's Config. The values override the values specified in the
   * PromotionSpec.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ExpressionVariable vars = 6;
   */
  vars: ExpressionVariable[];

  /**
   * Config is opaque configuration for the PromotionStep that is understood
   * only by each PromotionStep's implementation. It is legal to utilize
   * expressions in defining values at any level of this block.
   * See https://docs.kargo.io/user-guide/reference-docs/expressions for details.
   *
   * @generated from field: optional k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON config = 3;
   */
  config?: JSON;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionStep.
 * Use `create(PromotionStepSchema)` to create a new message.
 */
export const PromotionStepSchema: GenMessage<PromotionStep> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 61);

/**
 * PromotionStepRetry describes the retry policy for a PromotionStep.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionStepRetry
 */
export type PromotionStepRetry = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionStepRetry"> & {
  /**
   * Timeout is the soft maximum interval in which a step that returns a Running
   * status (which typically indicates it's waiting for something to happen)
   * may be retried.
   *
   * The maximum is a soft one because the check for whether the interval has
   * elapsed occurs AFTER the step has run. This effectively means a step may
   * run ONCE beyond the close of the interval.
   *
   * If this field is set to nil, the effective default will be a step-specific
   * one. If no step-specific default exists (i.e. is also nil), the effective
   * default will be the system-wide default of 0.
   *
   * A value of 0 will cause the step to be retried indefinitely unless the
   * ErrorThreshold is reached.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 1;
   */
  timeout?: Duration;

  /**
   * ErrorThreshold is the number of consecutive times the step must fail (for
   * any reason) before retries are abandoned and the entire Promotion is marked
   * as failed.
   *
   * If this field is set to 0, the effective default will be a step-specific
   * one. If no step-specific default exists (i.e. is also 0), the effective
   * default will be the system-wide default of 1.
   *
   * A value of 1 will cause the Promotion to be marked as failed after just
   * a single failure; i.e. no retries will be attempted.
   *
   * There is no option to specify an infinite number of retries using a value
   * such as -1.
   *
   * In a future release, Kargo is likely to become capable of distinguishing
   * between recoverable and non-recoverable step failures. At that time, it is
   * planned that unrecoverable failures will not be subject to this threshold
   * and will immediately cause the Promotion to be marked as failed without
   * further condition.
   *
   * @generated from field: optional uint32 errorThreshold = 2;
   */
  errorThreshold: number;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionStepRetry.
 * Use `create(PromotionStepRetrySchema)` to create a new message.
 */
export const PromotionStepRetrySchema: GenMessage<PromotionStepRetry> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 62);

/**
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTask
 */
export type PromotionTask = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTask"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes the composition of a PromotionTask, including the
   * variables available to the task and the steps.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionTaskSpec spec = 2;
   */
  spec?: PromotionTaskSpec;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTask.
 * Use `create(PromotionTaskSchema)` to create a new message.
 */
export const PromotionTaskSchema: GenMessage<PromotionTask> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 63);

/**
 * PromotionTaskList contains a list of PromotionTasks.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTaskList
 */
export type PromotionTaskList = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTaskList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.PromotionTask items = 2;
   */
  items: PromotionTask[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTaskList.
 * Use `create(PromotionTaskListSchema)` to create a new message.
 */
export const PromotionTaskListSchema: GenMessage<PromotionTaskList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 64);

/**
 * PromotionTaskReference describes a reference to a PromotionTask.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTaskReference
 */
export type PromotionTaskReference = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTaskReference"> & {
  /**
   * Name is the name of the (Cluster)PromotionTask.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=253
   * +kubebuilder:validation:Pattern=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`
   * +akuity:test-kubebuilder-pattern=KubernetesName
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Kind is the type of the PromotionTask. Can be either PromotionTask or
   * ClusterPromotionTask, default is PromotionTask.
   *
   * +kubebuilder:validation:Optional
   * +kubebuilder:validation:Enum=PromotionTask;ClusterPromotionTask
   *
   * @generated from field: optional string kind = 2;
   */
  kind: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTaskReference.
 * Use `create(PromotionTaskReferenceSchema)` to create a new message.
 */
export const PromotionTaskReferenceSchema: GenMessage<PromotionTaskReference> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 65);

/**
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTaskSpec
 */
export type PromotionTaskSpec = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTaskSpec"> & {
  /**
   * Vars specifies the variables available to the PromotionTask. The
   * values of these variables are the default values that can be
   * overridden by the step referencing the task.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ExpressionVariable vars = 1;
   */
  vars: ExpressionVariable[];

  /**
   * Steps specifies the directives to be executed as part of this
   * PromotionTask. The steps as defined here are inflated into a
   * Promotion when it is built from a PromotionTemplate.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinItems=1
   * +kubebuilder:validation:items:XValidation:message="PromotionTask step must have uses set and must not reference another task",rule="has(self.uses) && !has(self.task)"
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.PromotionStep steps = 2;
   */
  steps: PromotionStep[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTaskSpec.
 * Use `create(PromotionTaskSpecSchema)` to create a new message.
 */
export const PromotionTaskSpecSchema: GenMessage<PromotionTaskSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 66);

/**
 * PromotionTemplate defines a template for a Promotion that can be used to
 * incorporate Freight into a Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTemplate
 */
export type PromotionTemplate = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTemplate"> & {
  /**
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionTemplateSpec spec = 1;
   */
  spec?: PromotionTemplateSpec;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTemplate.
 * Use `create(PromotionTemplateSchema)` to create a new message.
 */
export const PromotionTemplateSchema: GenMessage<PromotionTemplate> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 67);

/**
 * PromotionTemplateSpec describes the (partial) specification of a Promotion
 * for a Stage. This is a template that can be used to create a Promotion for a
 * Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.PromotionTemplateSpec
 */
export type PromotionTemplateSpec = Message<"github.com.akuity.kargo.api.v1alpha1.PromotionTemplateSpec"> & {
  /**
   * Vars is a list of variables that can be referenced by expressions in
   * promotion steps.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ExpressionVariable vars = 2;
   */
  vars: ExpressionVariable[];

  /**
   * Steps specifies the directives to be executed as part of a Promotion.
   * The order in which the directives are executed is the order in which they
   * are listed in this field.
   *
   * +kubebuilder:validation:MinItems=1
   * +kubebuilder:validation:items:XValidation:message="PromotionTemplate step must have exactly one of uses or task set",rule="(has(self.uses) ? !has(self.task) : has(self.task))"
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.PromotionStep steps = 1;
   */
  steps: PromotionStep[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.PromotionTemplateSpec.
 * Use `create(PromotionTemplateSpecSchema)` to create a new message.
 */
export const PromotionTemplateSpecSchema: GenMessage<PromotionTemplateSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 68);

/**
 * QuayWebhookReceiverConfig describes a webhook receiver that is compatible
 * with Quay.io payloads.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.QuayWebhookReceiverConfig
 */
export type QuayWebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.QuayWebhookReceiverConfig"> & {
  /**
   * SecretRef contains a reference to a Secret. For Project-scoped webhook
   * receivers, the referenced Secret must be in the same namespace as the
   * ProjectConfig.
   *
   * For cluster-scoped webhook receivers, the referenced Secret must be in the
   * designated "cluster Secrets" namespace.
   *
   * The Secret's data map is expected to contain a `secret` key whose value
   * does NOT need to be shared directly with Quay when registering a
   * webhook. It is used only by Kargo to create a complex, hard-to-guess URL,
   * which implicitly serves as a shared secret. For more information about
   * Quay webhooks, please refer to the Quay documentation:
   *   https://docs.quay.io/guides/notifications.html
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional k8s.io.api.core.v1.LocalObjectReference secretRef = 1;
   */
  secretRef?: LocalObjectReference;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.QuayWebhookReceiverConfig.
 * Use `create(QuayWebhookReceiverConfigSchema)` to create a new message.
 */
export const QuayWebhookReceiverConfigSchema: GenMessage<QuayWebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 69);

/**
 * RepoSubscription describes a subscription to ONE OF a Git repository, a
 * container image repository, or a Helm chart repository.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.RepoSubscription
 */
export type RepoSubscription = Message<"github.com.akuity.kargo.api.v1alpha1.RepoSubscription"> & {
  /**
   * Git describes a subscriptions to a Git repository.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.GitSubscription git = 1;
   */
  git?: GitSubscription;

  /**
   * Image describes a subscription to container image repository.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ImageSubscription image = 2;
   */
  image?: ImageSubscription;

  /**
   * Chart describes a subscription to a Helm chart repository.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ChartSubscription chart = 3;
   */
  chart?: ChartSubscription;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.RepoSubscription.
 * Use `create(RepoSubscriptionSchema)` to create a new message.
 */
export const RepoSubscriptionSchema: GenMessage<RepoSubscription> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 70);

/**
 * Stage is the Kargo API's main type.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Stage
 */
export type Stage = Message<"github.com.akuity.kargo.api.v1alpha1.Stage"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes sources of Freight used by the Stage and how to incorporate
   * Freight into the Stage.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.StageSpec spec = 2;
   */
  spec?: StageSpec;

  /**
   * Status describes the Stage's current and recent Freight, health, and more.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.StageStatus status = 3;
   */
  status?: StageStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Stage.
 * Use `create(StageSchema)` to create a new message.
 */
export const StageSchema: GenMessage<Stage> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 71);

/**
 * StageList is a list of Stage resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.StageList
 */
export type StageList = Message<"github.com.akuity.kargo.api.v1alpha1.StageList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Stage items = 2;
   */
  items: Stage[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.StageList.
 * Use `create(StageListSchema)` to create a new message.
 */
export const StageListSchema: GenMessage<StageList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 72);

/**
 * StageSpec describes the sources of Freight used by a Stage and how to
 * incorporate Freight into the Stage.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.StageSpec
 */
export type StageSpec = Message<"github.com.akuity.kargo.api.v1alpha1.StageSpec"> & {
  /**
   * Shard is the name of the shard that this Stage belongs to. This is an
   * optional field. If not specified, the Stage will belong to the default
   * shard. A defaulting webhook will sync the value of the
   * kargo.akuity.io/shard label with the value of this field. When this field
   * is empty, the webhook will ensure that label is absent.
   *
   * @generated from field: optional string shard = 4;
   */
  shard: string;

  /**
   * Vars is a list of variables that can be referenced anywhere in the
   * StageSpec that supports expressions. For example, the PromotionTemplate
   * and arguments of the Verification.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.ExpressionVariable vars = 7;
   */
  vars: ExpressionVariable[];

  /**
   * RequestedFreight expresses the Stage's need for certain pieces of Freight,
   * each having originated from a particular Warehouse. This list must be
   * non-empty. In the common case, a Stage will request Freight having
   * originated from just one specific Warehouse. In advanced cases, requesting
   * Freight from multiple Warehouses provides a method of advancing new
   * artifacts of different types through parallel pipelines at different
   * speeds. This can be useful, for instance, if a Stage is home to multiple
   * microservices that are independently versioned.
   *
   * +kubebuilder:validation:MinItems=1
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.FreightRequest requestedFreight = 5;
   */
  requestedFreight: FreightRequest[];

  /**
   * PromotionTemplate describes how to incorporate Freight into the Stage
   * using a Promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionTemplate promotionTemplate = 6;
   */
  promotionTemplate?: PromotionTemplate;

  /**
   * Verification describes how to verify a Stage's current Freight is fit for
   * promotion downstream.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.Verification verification = 3;
   */
  verification?: Verification;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.StageSpec.
 * Use `create(StageSpecSchema)` to create a new message.
 */
export const StageSpecSchema: GenMessage<StageSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 73);

/**
 * StageStats contains a summary of the collective state of a Project's
 * Stages.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.StageStats
 */
export type StageStats = Message<"github.com.akuity.kargo.api.v1alpha1.StageStats"> & {
  /**
   * Count contains the total number of Stages in the Project.
   *
   * @generated from field: optional int64 count = 2;
   */
  count: bigint;

  /**
   * Health contains a summary of the collective health of a Project's Stages.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.HealthStats health = 1;
   */
  health?: HealthStats;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.StageStats.
 * Use `create(StageStatsSchema)` to create a new message.
 */
export const StageStatsSchema: GenMessage<StageStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 74);

/**
 * StageStatus describes a Stages's current and recent Freight, health, and
 * more.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.StageStatus
 */
export type StageStatus = Message<"github.com.akuity.kargo.api.v1alpha1.StageStatus"> & {
  /**
   * Conditions contains the last observations of the Stage's current
   * state.
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=map
   * +listMapKey=type
   *
   * @generated from field: repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 13;
   */
  conditions: Condition[];

  /**
   * LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh
   * annotation that was handled by the controller. This field can be used to
   * determine whether the request to refresh the resource has been handled.
   * +optional
   *
   * @generated from field: optional string lastHandledRefresh = 11;
   */
  lastHandledRefresh: string;

  /**
   * FreightHistory is a list of recent Freight selections that were deployed
   * to the Stage. By default, the last ten Freight selections are stored.
   * The first item in the list is the most recent Freight selection and
   * currently deployed to the Stage, subsequent items are older selections.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.FreightCollection freightHistory = 4;
   */
  freightHistory: FreightCollection[];

  /**
   * FreightSummary is human-readable text maintained by the controller that
   * summarizes what Freight is currently deployed to the Stage. For Stages that
   * request a single piece of Freight AND the request has been fulfilled, this
   * field will simply contain the name of the Freight. For Stages that request
   * a single piece of Freight AND the request has NOT been fulfilled, or for
   * Stages that request multiple pieces of Freight, this field will contain a
   * summary of fulfilled/requested Freight. The existence of this field is a
   * workaround for kubectl limitations so that this complex but valuable
   * information can be displayed in a column in response to `kubectl get
   * stages`.
   *
   * @generated from field: optional string freightSummary = 12;
   */
  freightSummary: string;

  /**
   * Health is the Stage's last observed health.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.Health health = 8;
   */
  health?: Health;

  /**
   * ObservedGeneration represents the .metadata.generation that this Stage
   * status was reconciled against.
   *
   * @generated from field: optional int64 observedGeneration = 6;
   */
  observedGeneration: bigint;

  /**
   * CurrentPromotion is a reference to the currently Running promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionReference currentPromotion = 7;
   */
  currentPromotion?: PromotionReference;

  /**
   * LastPromotion is a reference to the last completed promotion.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.PromotionReference lastPromotion = 10;
   */
  lastPromotion?: PromotionReference;

  /**
   * AutoPromotionEnabled indicates whether automatic promotion is enabled
   * for the Stage based on the ProjectConfig.
   *
   * @generated from field: optional bool autoPromotionEnabled = 14;
   */
  autoPromotionEnabled: boolean;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.StageStatus.
 * Use `create(StageStatusSchema)` to create a new message.
 */
export const StageStatusSchema: GenMessage<StageStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 75);

/**
 * StepExecutionMetadata tracks metadata pertaining to the execution of
 * a promotion step.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.StepExecutionMetadata
 */
export type StepExecutionMetadata = Message<"github.com.akuity.kargo.api.v1alpha1.StepExecutionMetadata"> & {
  /**
   * Alias is the alias of the step.
   *
   * @generated from field: optional string alias = 1;
   */
  alias: string;

  /**
   * StartedAt is the time at which the first attempt to execute the step
   * began.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;
   */
  startedAt?: Time;

  /**
   * FinishedAt is the time at which the final attempt to execute the step
   * completed.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishedAt = 3;
   */
  finishedAt?: Time;

  /**
   * ErrorCount tracks consecutive failed attempts to execute the step.
   *
   * @generated from field: optional uint32 errorCount = 4;
   */
  errorCount: number;

  /**
   * Status is the high-level outcome of the step.
   *
   * @generated from field: optional string status = 5;
   */
  status: string;

  /**
   * Message is a display message about the step, including any errors.
   *
   * @generated from field: optional string message = 6;
   */
  message: string;

  /**
   * ContinueOnError is a boolean value that, if set to true, will cause the
   * Promotion to continue executing the next step even if this step fails. It
   * also will not permit this failure to impact the overall status of the
   * Promotion.
   *
   * @generated from field: optional bool continueOnError = 7;
   */
  continueOnError: boolean;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.StepExecutionMetadata.
 * Use `create(StepExecutionMetadataSchema)` to create a new message.
 */
export const StepExecutionMetadataSchema: GenMessage<StepExecutionMetadata> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 76);

/**
 * Verification describes how to verify that a Promotion has been successful
 * using Argo Rollouts AnalysisTemplates.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Verification
 */
export type Verification = Message<"github.com.akuity.kargo.api.v1alpha1.Verification"> & {
  /**
   * AnalysisTemplates is a list of AnalysisTemplates from which AnalysisRuns
   * should be created to verify a Stage's current Freight is fit to be promoted
   * downstream.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.AnalysisTemplateReference analysisTemplates = 1;
   */
  analysisTemplates: AnalysisTemplateReference[];

  /**
   * AnalysisRunMetadata contains optional metadata that should be applied to
   * all AnalysisRuns.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.AnalysisRunMetadata analysisRunMetadata = 2;
   */
  analysisRunMetadata?: AnalysisRunMetadata;

  /**
   * Args lists arguments that should be added to all AnalysisRuns.
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.AnalysisRunArgument args = 3;
   */
  args: AnalysisRunArgument[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Verification.
 * Use `create(VerificationSchema)` to create a new message.
 */
export const VerificationSchema: GenMessage<Verification> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 77);

/**
 * VerificationInfo contains the details of an instance of a Verification
 * process.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.VerificationInfo
 */
export type VerificationInfo = Message<"github.com.akuity.kargo.api.v1alpha1.VerificationInfo"> & {
  /**
   * ID is the identifier of the Verification process.
   *
   * @generated from field: optional string id = 4;
   */
  id: string;

  /**
   * Actor is the name of the entity that initiated or aborted the
   * Verification process.
   *
   * @generated from field: optional string actor = 7;
   */
  actor: string;

  /**
   * StartTime is the time at which the Verification process was started.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 5;
   */
  startTime?: Time;

  /**
   * Phase describes the current phase of the Verification process. Generally,
   * this will be a reflection of the underlying AnalysisRun's phase, however,
   * there are exceptions to this, such as in the case where an AnalysisRun
   * cannot be launched successfully.
   *
   * @generated from field: optional string phase = 1;
   */
  phase: string;

  /**
   * Message may contain additional information about why the verification
   * process is in its current phase.
   *
   * @generated from field: optional string message = 2;
   */
  message: string;

  /**
   * AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements
   * the Verification process.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.AnalysisRunReference analysisRun = 3;
   */
  analysisRun?: AnalysisRunReference;

  /**
   * FinishTime is the time at which the Verification process finished.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishTime = 6;
   */
  finishTime?: Time;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.VerificationInfo.
 * Use `create(VerificationInfoSchema)` to create a new message.
 */
export const VerificationInfoSchema: GenMessage<VerificationInfo> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 78);

/**
 * VerifiedStage describes a Stage in which Freight has been verified.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.VerifiedStage
 */
export type VerifiedStage = Message<"github.com.akuity.kargo.api.v1alpha1.VerifiedStage"> & {
  /**
   * VerifiedAt is the time at which the Freight was verified in the Stage.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time verifiedAt = 1;
   */
  verifiedAt?: Time;

  /**
   * LongestCompletedSoak represents the longest definite time interval wherein
   * the Freight was in CONTINUOUS use by the Stage. This value is updated as
   * Freight EXITS the Stage. If the Freight is currently in use by the Stage,
   * the time elapsed since the Freight ENTERED the Stage is its current soak
   * time, which may exceed the value of this field.
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration longestSoak = 2;
   */
  longestSoak?: Duration;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.VerifiedStage.
 * Use `create(VerifiedStageSchema)` to create a new message.
 */
export const VerifiedStageSchema: GenMessage<VerifiedStage> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 79);

/**
 * Warehouse is a source of Freight.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.Warehouse
 */
export type Warehouse = Message<"github.com.akuity.kargo.api.v1alpha1.Warehouse"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * Spec describes sources of artifacts.
   *
   * +kubebuilder:validation:Required
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.WarehouseSpec spec = 2;
   */
  spec?: WarehouseSpec;

  /**
   * Status describes the Warehouse's most recently observed state.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.WarehouseStatus status = 3;
   */
  status?: WarehouseStatus;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.Warehouse.
 * Use `create(WarehouseSchema)` to create a new message.
 */
export const WarehouseSchema: GenMessage<Warehouse> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 80);

/**
 * WarehouseList is a list of Warehouse resources.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WarehouseList
 */
export type WarehouseList = Message<"github.com.akuity.kargo.api.v1alpha1.WarehouseList"> & {
  /**
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;
   */
  metadata?: ListMeta;

  /**
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.Warehouse items = 2;
   */
  items: Warehouse[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WarehouseList.
 * Use `create(WarehouseListSchema)` to create a new message.
 */
export const WarehouseListSchema: GenMessage<WarehouseList> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 81);

/**
 * WarehouseSpec describes sources of versioned artifacts to be included in
 * Freight produced by this Warehouse.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WarehouseSpec
 */
export type WarehouseSpec = Message<"github.com.akuity.kargo.api.v1alpha1.WarehouseSpec"> & {
  /**
   * Shard is the name of the shard that this Warehouse belongs to. This is an
   * optional field. If not specified, the Warehouse will belong to the default
   * shard. A defaulting webhook will sync this field with the value of the
   * kargo.akuity.io/shard label. When the shard label is not present or differs
   * from the value of this field, the defaulting webhook will set the label to
   * the value of this field. If the shard label is present and this field is
   * empty, the defaulting webhook will set the value of this field to the value
   * of the shard label.
   *
   * @generated from field: optional string shard = 2;
   */
  shard: string;

  /**
   * Interval is the reconciliation interval for this Warehouse. On each
   * reconciliation, the Warehouse will discover new artifacts and optionally
   * produce new Freight. This field is optional. When left unspecified, the
   * field is implicitly treated as if its value were "5m0s".
   *
   * +kubebuilder:validation:Type=string
   * +kubebuilder:validation:Pattern=`^([0-9]+(\.[0-9]+)?(s|m|h))+$`
   * +kubebuilder:default="5m0s"
   * +akuity:test-kubebuilder-pattern=Duration
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration interval = 4;
   */
  interval?: Duration;

  /**
   * FreightCreationPolicy describes how Freight is created by this Warehouse.
   * This field is optional. When left unspecified, the field is implicitly
   * treated as if its value were "Automatic".
   *
   * Accepted values:
   *
   * - "Automatic": New Freight is created automatically when any new artifact
   *   is discovered.
   * - "Manual": New Freight is never created automatically.
   *
   * +kubebuilder:default=Automatic
   * +kubebuilder:validation:Optional
   *
   * @generated from field: optional string freightCreationPolicy = 3;
   */
  freightCreationPolicy: string;

  /**
   * Subscriptions describes sources of artifacts to be included in Freight
   * produced by this Warehouse.
   *
   * +kubebuilder:validation:MinItems=1
   *
   * @generated from field: repeated github.com.akuity.kargo.api.v1alpha1.RepoSubscription subscriptions = 1;
   */
  subscriptions: RepoSubscription[];
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WarehouseSpec.
 * Use `create(WarehouseSpecSchema)` to create a new message.
 */
export const WarehouseSpecSchema: GenMessage<WarehouseSpec> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 82);

/**
 * WarehouseStats contains a summary of the collective state of a Project's
 * Warehouses.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WarehouseStats
 */
export type WarehouseStats = Message<"github.com.akuity.kargo.api.v1alpha1.WarehouseStats"> & {
  /**
   * Count contains the total number of Warehouses in the Project.
   *
   * @generated from field: optional int64 count = 2;
   */
  count: bigint;

  /**
   * Health contains a summary of the collective health of a Project's
   * Warehouses.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.HealthStats health = 1;
   */
  health?: HealthStats;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WarehouseStats.
 * Use `create(WarehouseStatsSchema)` to create a new message.
 */
export const WarehouseStatsSchema: GenMessage<WarehouseStats> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 83);

/**
 * WarehouseStatus describes a Warehouse's most recently observed state.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WarehouseStatus
 */
export type WarehouseStatus = Message<"github.com.akuity.kargo.api.v1alpha1.WarehouseStatus"> & {
  /**
   * Conditions contains the last observations of the Warehouse's current
   * state.
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=map
   * +listMapKey=type
   *
   * @generated from field: repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 9;
   */
  conditions: Condition[];

  /**
   * LastHandledRefresh holds the value of the most recent AnnotationKeyRefresh
   * annotation that was handled by the controller. This field can be used to
   * determine whether the request to refresh the resource has been handled.
   * +optional
   *
   * @generated from field: optional string lastHandledRefresh = 6;
   */
  lastHandledRefresh: string;

  /**
   * ObservedGeneration represents the .metadata.generation that this Warehouse
   * was reconciled against.
   *
   * @generated from field: optional int64 observedGeneration = 4;
   */
  observedGeneration: bigint;

  /**
   * LastFreightID is a reference to the system-assigned identifier (name) of
   * the most recent Freight produced by the Warehouse.
   *
   * @generated from field: optional string lastFreightID = 8;
   */
  lastFreightID: string;

  /**
   * DiscoveredArtifacts holds the artifacts discovered by the Warehouse.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.DiscoveredArtifacts discoveredArtifacts = 7;
   */
  discoveredArtifacts?: DiscoveredArtifacts;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WarehouseStatus.
 * Use `create(WarehouseStatusSchema)` to create a new message.
 */
export const WarehouseStatusSchema: GenMessage<WarehouseStatus> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 84);

/**
 * WebhookReceiverConfig describes the configuration for a single webhook
 * receiver.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WebhookReceiverConfig
 */
export type WebhookReceiverConfig = Message<"github.com.akuity.kargo.api.v1alpha1.WebhookReceiverConfig"> & {
  /**
   * Name is the name of the webhook receiver.
   *
   * +kubebuilder:validation:Required
   * +kubebuilder:validation:MinLength=1
   * +kubebuilder:validation:MaxLength=253
   * +kubebuilder:validation:Pattern=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`
   * +akuity:test-kubebuilder-pattern=KubernetesName
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Bitbucket contains the configuration for a webhook receiver that is
   * compatible with Bitbucket payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.BitbucketWebhookReceiverConfig bitbucket = 5;
   */
  bitbucket?: BitbucketWebhookReceiverConfig;

  /**
   * DockerHub contains the configuration for a webhook receiver that is
   * compatible with DockerHub payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.DockerHubWebhookReceiverConfig dockerhub = 6;
   */
  dockerhub?: DockerHubWebhookReceiverConfig;

  /**
   * GitHub contains the configuration for a webhook receiver that is compatible
   * with GitHub payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.GitHubWebhookReceiverConfig github = 2;
   */
  github?: GitHubWebhookReceiverConfig;

  /**
   * GitLab contains the configuration for a webhook receiver that is compatible
   * with GitLab payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.GitLabWebhookReceiverConfig gitlab = 3;
   */
  gitlab?: GitLabWebhookReceiverConfig;

  /**
   * Quay contains the configuration for a webhook receiver that is compatible
   * with Quay payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.QuayWebhookReceiverConfig quay = 4;
   */
  quay?: QuayWebhookReceiverConfig;

  /**
   * Artifactory contains the configuration for a webhook receiver that is
   * compatible with JFrog Artifactory payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.ArtifactoryWebhookReceiverConfig artifactory = 9;
   */
  artifactory?: ArtifactoryWebhookReceiverConfig;

  /**
   * Azure contains the configuration for a webhook receiver that is compatible
   * with Azure Container Registry (ACR) and Azure DevOps payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.AzureWebhookReceiverConfig azure = 8;
   */
  azure?: AzureWebhookReceiverConfig;

  /**
   * Gitea contains the configuration for a webhook receiver that is compatible
   * with Gitea payloads.
   *
   * @generated from field: optional github.com.akuity.kargo.api.v1alpha1.GiteaWebhookReceiverConfig gitea = 7;
   */
  gitea?: GiteaWebhookReceiverConfig;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WebhookReceiverConfig.
 * Use `create(WebhookReceiverConfigSchema)` to create a new message.
 */
export const WebhookReceiverConfigSchema: GenMessage<WebhookReceiverConfig> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 85);

/**
 * WebhookReceiverDetails encapsulates the details of a webhook receiver.
 *
 * @generated from message github.com.akuity.kargo.api.v1alpha1.WebhookReceiverDetails
 */
export type WebhookReceiverDetails = Message<"github.com.akuity.kargo.api.v1alpha1.WebhookReceiverDetails"> & {
  /**
   * Name is the name of the webhook receiver.
   *
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * Path is the path to the receiver's webhook endpoint.
   *
   * @generated from field: optional string path = 3;
   */
  path: string;

  /**
   * URL includes the full address of the receiver's webhook endpoint.
   *
   * @generated from field: optional string url = 4;
   */
  url: string;
};

/**
 * Describes the message github.com.akuity.kargo.api.v1alpha1.WebhookReceiverDetails.
 * Use `create(WebhookReceiverDetailsSchema)` to create a new message.
 */
export const WebhookReceiverDetailsSchema: GenMessage<WebhookReceiverDetails> = /*@__PURE__*/
  messageDesc(file_api_v1alpha1_generated, 86);

