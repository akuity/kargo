
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.akuity.kargo.pkg.api.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "github.com/akuity/kargo/pkg/api/v1alpha1";

// ArgoCDAppUpdate describes updates that should be applied to an Argo CD
// Application resources to incorporate newly observed materials into a Stage.
message ArgoCDAppUpdate {
  // AppName specifies the name of an Argo CD Application resource to be
  // updated.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string appName = 1 [(gogoproto.customname) = "AppName", (gogoproto.nullable) = false];

  // AppNamespace specifies the namespace of an Argo CD Application resource to
  // be updated. If left unspecified, the namespace of this Application resource
  // is defaulted to that of the Stage.
  //
  // TODO: This should default to Argo CD's namespace instead.
  //
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string appNamespace = 2 [(gogoproto.customname) = "AppNamespace", (gogoproto.nullable) = false];

  // SourceUpdates describes updates to be applied to various sources of the
  // specified Argo CD Application resource.
  repeated ArgoCDSourceUpdate sourceUpdates = 3 [(gogoproto.customname) = "SourceUpdates", (gogoproto.nullable) = false];
}

// ArgoCDHelm describes updates to an Argo CD Application source's Helm-specific
// attributes to incorporate newly observed materials into a Stage.
message ArgoCDHelm {
  // Images describes how specific image versions can be incorporated into an
  // Argo CD Application's Helm parameters.
  //
  // +kubebuilder:validation:MinItems=1
  repeated ArgoCDHelmImageUpdate images = 1 [(gogoproto.customname) = "Images", (gogoproto.nullable) = false];
}

// ArgoCDHelmImageUpdate describes how a specific image version can be
// incorporated into an Argo CD Application's Helm parameters.
message ArgoCDHelmImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1 [(gogoproto.customname) = "Image", (gogoproto.nullable) = false];

  // Key specifies a key within an Argo CD Application's Helm parameters that is
  // to be updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string key = 2 [(gogoproto.customname) = "Key", (gogoproto.nullable) = false];

  // Value specifies the new value for the specified key in the Argo CD
  // Application's Helm parameters. Valid values are "Image", which replaces the
  // value of the specified key with the entire <image name>:<tag>, or "Tag"
  // which replaces the value of the specified with just the new tag. This is a
  // required field.
  optional string value = 3 [(gogoproto.casttype) = "ImageUpdateValueType", (gogoproto.customname) = "Value", (gogoproto.nullable) = false];
}

// ArgoCDKustomize describes updates to an Argo CD Application source's
// Kustomize-specific attributes to incorporate newly observed materials into a
// Stage.
message ArgoCDKustomize {
  // Images describes how specific image versions can be incorporated into an
  // Argo CD Application's Kustomize parameters.
  //
  // +kubebuilder:validation:MinItems=1
  repeated string images = 1 [(gogoproto.customname) = "Images"];
}

// ArgoCDSourceUpdate describes updates that should be applied to one of an Argo
// CD Application resource's sources.
message ArgoCDSourceUpdate {
  // RepoURL identifies which of the Argo CD Application's sources this update
  // is intended for. Note: As of Argo CD 2.6, Application's can use multiple
  // sources.
  //
  // +kubebuilder:validation:MinLength=1
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // Chart specifies a chart within a Helm chart registry if RepoURL points to a
  // Helm chart registry. Application sources that point directly at a chart do
  // so through a combination of their own RepoURL (registry) and Chart fields,
  // so BOTH of those are used as criteria in selecting an Application source to
  // update. This field MUST always be used when RepoURL points at a Helm chart
  // registry. This field MUST never be used when RepoURL points at a Git
  // repository.
  //
  // +kubebuilder:validation:Optional
  optional string chart = 2 [(gogoproto.customname) = "Chart", (gogoproto.nullable) = false];

  // UpdateTargetRevision is a bool indicating whether the source should be
  // updated such that its TargetRevision field points at the most recently git
  // commit (if RepoURL references a git repository) or chart version (if
  // RepoURL references a chart repository).
  optional bool updateTargetRevision = 3 [(gogoproto.customname) = "UpdateTargetRevision", (gogoproto.nullable) = false];

  // Kustomize describes updates to the source's Kustomize-specific attributes.
  optional ArgoCDKustomize kustomize = 4 [(gogoproto.customname) = "Kustomize"];

  // Helm describes updates to the source's Helm-specific attributes.
  optional ArgoCDHelm helm = 5 [(gogoproto.customname) = "Helm"];
}

// BookkeeperPromotionMechanism describes how to use Bookkeeper to incorporate
// newly observed materials into a Stage.
message BookkeeperPromotionMechanism {
}

// Chart describes a specific version of a Helm chart.
message Chart {
  // RepoURL specifies the remote registry in which this chart is located.
  optional string registryURL = 1 [(gogoproto.customname) = "RegistryURL", (gogoproto.nullable) = false];

  // Name specifies the name of the chart.
  optional string name = 2 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // Version specifies a particular version of the chart.
  optional string version = 3 [(gogoproto.customname) = "Version", (gogoproto.nullable) = false];
}

// ChartSubscription defines a subscription to a Helm chart repository.
message ChartSubscription {
  // RegistryURL specifies the URL of a Helm chart registry. It may be a classic
  // chart registry (using HTTP/S) OR an OCI registry. This field is required.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.]+)(:[\d]+)?(/.*)*$`
  optional string registryURL = 1 [(gogoproto.customname) = "RegistryURL", (gogoproto.nullable) = false];

  // Name specifies a Helm chart to subscribe to within the Helm chart registry
  // specified by the RegistryURL field. This field is required.
  //
  // +kubebuilder:validation:MinLength=1
  optional string name = 2 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // SemverConstraint specifies constraints on what new chart versions are
  // permissible. This field is optional. When left unspecified, there will be
  // no constraints, which means the latest version of the chart will always be
  // used. Care should be taken with leaving this field unspecified, as it can
  // lead to the unanticipated rollout of breaking changes.
  //
  // +kubebuilder:validation:Optional
  optional string semverConstraint = 3 [(gogoproto.customname) = "SemverConstraint", (gogoproto.nullable) = false];
}

// GitCommit describes a specific commit from a specific Git repository.
message GitCommit {
  // RepoURL is the URL of a Git repository.
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // ID is the ID of a specific commit in the Git repository specified by
  // RepoURL.
  optional string id = 2 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // Branch denotes the branch of the repository where this commit was found.
  optional string branch = 3 [(gogoproto.customname) = "Branch", (gogoproto.nullable) = false];

  // HealthCheckCommit is the ID of a specific commit. When specified,
  // assessments of Stage health will used this value (instead of ID) when
  // determining if applicable sources of Argo CD Application resources
  // associated with the Stage are or are not synced to this commit. Note that
  // there are cases (as in that of Bookkeeper being utilized as a promotion
  // mechanism) wherein the value of this field may differ from the commit ID
  // found in the ID field.
  optional string healthCheckCommit = 4 [(gogoproto.customname) = "HealthCheckCommit", (gogoproto.nullable) = false];
}

// GitRepoUpdate describes updates that should be applied to a Git repository
// (using various configuration management tools) to incorporate newly observed
// materials into a Stage.
message GitRepoUpdate {
  // RepoURL is the URL of the repository to update. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^((https?://)|([\w-]+@))([\w\d\.]+)(:[\d]+)?/(.*)$`
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // ReadBranch specifies a particular branch of the repository from which to
  // locate contents that will be written to the branch specified by the
  // WriteBranch field. This field is optional. In cases where a
  // StageStage includes a GitCommit, that commit's ID will supersede the
  // value of this field. Therefore, in practice, this field is only used to
  // clarify what branch of a repository can be treated as a source of manifests
  // or other configuration when a Stage has no subscription to that
  // repository.
  //
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Pattern=`^(\w+([-/]\w+)*)?$`
  optional string readBranch = 2 [(gogoproto.customname) = "ReadBranch", (gogoproto.nullable) = false];

  // WriteBranch specifies the particular branch of the repository to be
  // updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
  optional string writeBranch = 3 [(gogoproto.customname) = "WriteBranch", (gogoproto.nullable) = false];

  // Bookkeeper describes how to use Bookkeeper to incorporate newly observed
  // materials into the Stage. This is mutually exclusive with the Kustomize and
  // Helm fields.
  optional BookkeeperPromotionMechanism bookkeeper = 4 [(gogoproto.customname) = "Bookkeeper"];

  // Kustomize describes how to use Kustomize to incorporate newly observed
  // materials into the Stage. This is mutually exclusive with the Bookkeeper
  // and Helm fields.
  optional KustomizePromotionMechanism kustomize = 5 [(gogoproto.customname) = "Kustomize"];

  // Helm describes how to use Helm to incorporate newly observed materials into
  // the Stage. This is mutually exclusive with the Bookkeeper and Kustomize
  // fields.
  optional HelmPromotionMechanism helm = 6 [(gogoproto.customname) = "Helm"];
}

// GitSubscription defines a subscription to a Git repository.
message GitSubscription {
  // URL is the repository's URL. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^((https?://)|([\w-]+@))([\w\d\.]+)(:[\d]+)?/(.*)$`
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // Branch references a particular branch of the repository. This is a required
  // field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
  optional string branch = 2 [(gogoproto.customname) = "Branch", (gogoproto.nullable) = false];
}

// Health describes the health of a Stage.
message Health {
  // Status describes the health of the Stage.
  optional string status = 1 [(gogoproto.casttype) = "HealthState", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // Issues clarifies why a Stage in any state other than Healthy is in that
  // state. This field will always be the empty when a Stage is Healthy.
  repeated string issues = 2 [(gogoproto.customname) = "Issues"];
}

// HelmChartDependencyUpdate describes how a specific Helm chart that is used
// as a subchart of an umbrella chart can be updated.
message HelmChartDependencyUpdate {
  // RegistryURL along with Name identify a subchart of the umbrella chart at
  // ChartPath whose version should be updated.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.]+)(:[\d]+)?(/.*)*$`
  optional string registryURL = 1 [(gogoproto.customname) = "RegistryURL", (gogoproto.nullable) = false];

  // Name along with RegistryURL identify a subchart of the umbrella chart at
  // ChartPath whose version should be updated.
  //
  // +kubebuilder:validation:MinLength=1
  optional string name = 2 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // ChartPath is the path to an umbrella chart.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string chartPath = 3 [(gogoproto.customname) = "ChartPath", (gogoproto.nullable) = false];
}

// HelmImageUpdate describes how a specific image version can be incorporated
// into a specific Helm values file.
message HelmImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(([\w\d\.-]+)(:[\d]+)?/)?[a-z0-9-]+(/[a-z0-9-]+)*$`
  optional string image = 1 [(gogoproto.customname) = "Image", (gogoproto.nullable) = false];

  // ValuesFilePath specifies a path to the Helm values file that is to be
  // updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string valuesFilePath = 2 [(gogoproto.customname) = "ValuesFilePath", (gogoproto.nullable) = false];

  // Key specifies a key within the Helm values file that is to be updated. This
  // is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string key = 3 [(gogoproto.customname) = "Key", (gogoproto.nullable) = false];

  // Value specifies the new value for the specified key in the specified Helm
  // values file. Valid values are "Image", which replaces the value of the
  // specified key with the entire <image name>:<tag>, or "Tag" which replaces
  // the value of the specified with just the new tag. This is a required field.
  optional string value = 4 [(gogoproto.casttype) = "ImageUpdateValueType", (gogoproto.customname) = "Value", (gogoproto.nullable) = false];
}

// HelmPromotionMechanism describes how to use Helm to incorporate newly
// observed materials into a Stage.
message HelmPromotionMechanism {
  // Images describes how specific image versions can be incorporated into Helm
  // values files.
  repeated HelmImageUpdate images = 1 [(gogoproto.customname) = "Images", (gogoproto.nullable) = false];

  // Charts describes how specific chart versions can be incorporated into an
  // umbrella chart.
  repeated HelmChartDependencyUpdate charts = 2 [(gogoproto.customname) = "Charts", (gogoproto.nullable) = false];
}

// Image describes a specific version of a container image.
message Image {
  // RepoURL describes the repository in which the image can be found.
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // Tag identifies a specific version of the image in the repository specified
  // by RepoURL.
  optional string tag = 2 [(gogoproto.customname) = "Tag", (gogoproto.nullable) = false];
}

// ImageSubscription defines a subscription to an image repository.
message ImageSubscription {
  // RepoURL specifies the URL of the image repository to subscribe to. The
  // value in this field MUST NOT include an image tag. This field is required.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(([\w\d\.-]+)(:[\d]+)?/)?[a-z0-9-]+(/[a-z0-9-]+)*$`
  optional string repoURL = 1 [(gogoproto.customname) = "RepoURL", (gogoproto.nullable) = false];

  // UpdateStrategy specifies the rules for how to identify the newest version
  // of the image specified by the RepoURL field. This field is optional. When
  // left unspecified, the field is implicitly treated as if its value were
  // "SemVer".
  //
  // +kubebuilder:default=SemVer
  optional string updateStrategy = 2 [(gogoproto.casttype) = "ImageUpdateStrategy", (gogoproto.customname) = "UpdateStrategy", (gogoproto.nullable) = false];

  // SemverConstraint specifies constraints on what new image versions are
  // permissible. This value in this field only has any effect when the
  // UpdateStrategy is SemVer or left unspecified (which is implicitly the same
  // as SemVer). This field is also optional. When left unspecified, (and the
  // UpdateStrategy is SemVer or unspecified), there will be no constraints,
  // which means the latest semantically tagged version of an image will always
  // be used. Care should be taken with leaving this field unspecified, as it
  // can lead to the unanticipated rollout of breaking changes. Refer to Image
  // Updater documentation for more details.
  //
  // +kubebuilder:validation:Optional
  optional string semverConstraint = 3 [(gogoproto.customname) = "SemverConstraint", (gogoproto.nullable) = false];

  // AllowTags is a regular expression that can optionally be used to limit the
  // image tags that are considered in determining the newest version of an
  // image. This field is optional.
  //
  // +kubebuilder:validation:Optional
  optional string allowTags = 4 [(gogoproto.customname) = "AllowTags", (gogoproto.nullable) = false];

  // IgnoreTags is a list of tags that must be ignored when determining the
  // newest version of an image. No regular expressions or glob patterns are
  // supported yet. This field is optional.
  //
  // +kubebuilder:validation:Optional
  repeated string ignoreTags = 5 [(gogoproto.customname) = "IgnoreTags"];

  // Platform is a string of the form <os>/<arch> that limits the tags that can
  // be considered when searching for new versions of an image. This field is
  // optional. When left unspecified, it is implicitly equivalent to the
  // OS/architecture of the Kargo controller. Care should be taken to set this
  // value correctly in cases where the image referenced by this
  // ImageRepositorySubscription will run on a Kubernetes node with a different
  // OS/architecture than the Kargo controller. At present this is uncommon, but
  // not unheard of.
  //
  // +kubebuilder:validation:Optional
  optional string platform = 6 [(gogoproto.customname) = "Platform", (gogoproto.nullable) = false];
}

// KustomizeImageUpdate describes how to run `kustomize edit set image`
// for a given image.
message KustomizeImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1 [(gogoproto.customname) = "Image", (gogoproto.nullable) = false];

  // Path specifies a path in which the `kustomize edit set image` command
  // should be executed. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string path = 2 [(gogoproto.customname) = "Path", (gogoproto.nullable) = false];
}

// KustomizePromotionMechanism describes how to use Kustomize to incorporate
// newly observed materials into a Stage.
message KustomizePromotionMechanism {
  // Images describes images for which `kustomize edit set image` should be
  // executed and the paths in which those commands should be executed.
  //
  // +kubebuilder:validation:MinItems=1
  repeated KustomizeImageUpdate images = 1 [(gogoproto.customname) = "Images", (gogoproto.nullable) = false];
}

// Promotion represents a request to transition a particular Stage into a
// particular state.
message Promotion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  // Spec describes the desired transition of a specific Stage into a specific
  // StageState.
  //
  // +kubebuilder:validation:Required
  optional PromotionSpec spec = 2 [(gogoproto.customname) = "Spec"];

  // Status describes the current state of the transition represented by this
  // Promotion.
  optional PromotionStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// PromotionList contains a list of Promotion
message PromotionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Promotion items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// PromotionMechanisms describes how to incorporate newly observed materials
// into a Stage.
message PromotionMechanisms {
  // GitRepoUpdates describes updates that should be applied to Git repositories
  // to incorporate newly observed materials into the Stage. This field is
  // optional, as such actions are not required in all cases.
  repeated GitRepoUpdate gitRepoUpdates = 1 [(gogoproto.customname) = "GitRepoUpdates", (gogoproto.nullable) = false];

  // ArgoCDAppUpdates describes updates that should be applied to Argo CD
  // Application resources to incorporate newly observed materials into the
  // Stage. This field is optional, as such actions are not required in all
  // cases. Note that all updates specified by the GitRepoUpdates field, if any,
  // are applied BEFORE these.
  repeated ArgoCDAppUpdate argoCDAppUpdates = 2 [(gogoproto.customname) = "ArgoCDAppUpdates", (gogoproto.nullable) = false];
}

// PromotionPolicy specifies whether a given Stage is eligible for
// auto-promotion to newly discovered StageStates.
message PromotionPolicy {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  // Stage references a Stage in the same project as this PromotionPolicy to
  // which this PromotionPolicy applies.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string stage = 2 [(gogoproto.customname) = "Stage", (gogoproto.nullable) = false];

  // EnableAutoPromotion indicates whether new StageStates can automatically be
  // promoted into the Stage referenced by the Stage field. Note: There are
  // other conditions also required for an auto-promotion to occur.
  // Specifically, there must be a single source of new StageStates, so
  // regardless of the value of this field, an auto-promotion could never occur
  // for a Stage subscribed to MULTIPLE upstream Stages. This field defaults to
  // false, but is commonly set to true for Stages that subscribe to
  // repositories instead of other, upstream Stages. This allows users to define
  // Stages that are automatically updated as soon as new materials are
  // detected.
  optional bool enableAutoPromotion = 3 [(gogoproto.customname) = "EnableAutoPromotion", (gogoproto.nullable) = false];
}

// PromotionPolicyList contains a list of PromotionPolicies
message PromotionPolicyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated PromotionPolicy items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// PromotionSpec describes the desired transition of a specific Stage into a
// specific StageState.
message PromotionSpec {
  // Stage specifies the name of the Stage to which this Promotion
  // applies. The Stage referenced by this field MUST be in the same
  // namespace as the Promotion.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string stage = 1 [(gogoproto.customname) = "Stage", (gogoproto.nullable) = false];

  // State specifies the specific StageState into which the Stage referenced by
  // the Stage field should be transitioned. The State MUST be among the Stage's
  // Status.AvailableStates or the Promotion will ultimately fail.
  //
  // +kubebuilder:validation:MinLength=1
  optional string state = 2 [(gogoproto.customname) = "State", (gogoproto.nullable) = false];
}

// PromotionStatus describes the current state of the transition represented by
// a Promotion.
message PromotionStatus {
  // Phase describes where the Promotion currently is in its lifecycle.
  optional string phase = 1 [(gogoproto.casttype) = "PromotionPhase", (gogoproto.customname) = "Phase", (gogoproto.nullable) = false];

  // Error describes any errors that are preventing the Promotion controller
  // from executing this Promotion. i.e. If the Phase field has a value of
  // Failed, this field can be expected to explain why.
  optional string error = 2 [(gogoproto.customname) = "Error", (gogoproto.nullable) = false];
}

// RepoSubscriptions describes various sorts of repositories a Stage uses
// as sources of material.
message RepoSubscriptions {
  // Git describes subscriptions to Git repositories.
  repeated GitSubscription git = 1 [(gogoproto.customname) = "Git", (gogoproto.nullable) = false];

  // Images describes subscriptions to container image repositories.
  repeated ImageSubscription images = 2 [(gogoproto.customname) = "Images", (gogoproto.nullable) = false];

  // Charts describes subscriptions to Helm charts.
  repeated ChartSubscription charts = 3 [(gogoproto.customname) = "Charts", (gogoproto.nullable) = false];
}

// Stage is the Kargo API's main type.
message Stage {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  // Spec describes the sources of material used by the Stage and how
  // to incorporate newly observed materials into the Stage.
  //
  // +kubebuilder:validation:Required
  optional StageSpec spec = 2 [(gogoproto.customname) = "Spec"];

  // Status describes the most recently observed versions of this Stage's
  // sources of material as well as the Stage's current and recent states.
  optional StageStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// StageList is a list of Stage resources.
message StageList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Stage items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// StageSpec describes the sources of material used by a Stage and how to
// incorporate newly observed materials into the Stage.
message StageSpec {
  // Subscriptions describes the Stage's sources of material. This is a
  // required field.
  //
  // +kubebuilder:validation:Required
  optional Subscriptions subscriptions = 1 [(gogoproto.customname) = "Subscriptions"];

  // PromotionMechanisms describes how to incorporate newly observed materials
  // into the Stage. This is a required field.
  //
  // +kubebuilder:validation:Required
  optional PromotionMechanisms promotionMechanisms = 2 [(gogoproto.customname) = "PromotionMechanisms"];
}

// StageState is a "bill of materials" describing what is, was, or can be
// deployed to a Stage.
message StageState {
  // ID is a unique, system-assigned identifier for this state.
  optional string id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // FirstSeen represents the date/time when this StageStage first entered the
  // system. This is useful and important information because it enables the
  // controller to block auto-promotion of StageStates that are older than a
  // Stages's current state, which is a case that can arise if a Stage has
  // ROLLED BACK to an older state whilst a downstream Stage is already on to a
  // newer state.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time firstSeen = 2 [(gogoproto.customname) = "FirstSeen"];

  // Provenance describes the proximate source of this StageState. i.e. Did it
  // come directly from upstream repositories? Or an upstream Stage.
  optional string provenance = 3 [(gogoproto.customname) = "Provenance", (gogoproto.nullable) = false];

  // Commits describes specific Git repository commits that were used in this
  // state.
  repeated GitCommit commits = 4 [(gogoproto.customname) = "Commits", (gogoproto.nullable) = false];

  // Images describes container images and versions thereof that were used
  // in this state.
  repeated Image images = 5 [(gogoproto.customname) = "Images", (gogoproto.nullable) = false];

  // Charts describes Helm charts that were used in this state.
  repeated Chart charts = 6 [(gogoproto.customname) = "Charts", (gogoproto.nullable) = false];

  // Health is the StageState's last observed health. If this state is the
  // Stage's current state, this will be continuously re-assessed and
  // updated. If this StageState is a past state of the Stage, this field will
  // denote the last observed health state before transitioning into a different
  // state.
  optional Health health = 7 [(gogoproto.customname) = "Health"];
}

// StageStatus describes the most recently observed versions of a Stage's
// sources of material as well as its current and recent states.
message StageStatus {
  // AvailableStates is a stack of available StageStates, where each state is
  // essentially a "bill of materials" describing what can be automatically or
  // manually deployed to the Stage.
  repeated StageState availableStates = 1 [(gogoproto.customname) = "AvailableStates", (gogoproto.nullable) = false];

  // CurrentState is the Stage's current state -- a "bill of materials"
  // describing what is currently deployed to the Stage.
  optional StageState currentState = 2 [(gogoproto.customname) = "CurrentState"];

  // History is a stack of recent StageStates, where each state is
  // essentially a "bill of materials" describing what was deployed to the
  // Stage. By default, the last ten states are stored.
  repeated StageState history = 3 [(gogoproto.customname) = "History", (gogoproto.nullable) = false];

  // Error describes any errors that are preventing the Stage controller
  // from assessing Stage health or from polling repositories or upstream
  // Stages to discover new StageStates.
  optional string error = 4 [(gogoproto.customname) = "Error", (gogoproto.nullable) = false];
}

// StageSubscription defines a subscription to states from another Stage.
message StageSubscription {
  // Name specifies the name of a Stage.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];
}

// Subscriptions describes a Stage's sources of material.
message Subscriptions {
  // Repos describes various sorts of repositories a Stage uses as sources of
  // material. This field is mutually exclusive with the UpstreamStages field.
  optional RepoSubscriptions repos = 1 [(gogoproto.customname) = "Repos"];

  // UpstreamStages identifies other Stages as potential sources of material
  // for this Stage. This field is mutually exclusive with the Repos field.
  repeated StageSubscription upstreamStages = 2 [(gogoproto.customname) = "UpstreamStages", (gogoproto.nullable) = false];
}

