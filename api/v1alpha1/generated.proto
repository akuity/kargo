
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.akuity.kargo.api.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/akuity/kargo/api/v1alpha1";

// AnalysisRunArgument represents an argument to be added to an AnalysisRun.
message AnalysisRunArgument {
  // Name is the name of the argument.
  //
  // +kubebuilder:validation:Required
  optional string name = 1;

  // Value is the value of the argument.
  //
  // +kubebuilder:validation:Required
  optional string value = 2;
}

// AnalysisRunMetadata contains optional metadata that should be applied to all
// AnalysisRuns.
message AnalysisRunMetadata {
  // Additional labels to apply to an AnalysisRun.
  map<string, string> labels = 1;

  // Additional annotations to apply to an AnalysisRun.
  map<string, string> annotations = 2;
}

// AnalysisRunReference is a reference to an AnalysisRun.
message AnalysisRunReference {
  // Namespace is the namespace of the AnalysisRun.
  optional string namespace = 1;

  // Name is the name of the AnalysisRun.
  optional string name = 2;

  // Phase is the last observed phase of the AnalysisRun referenced by Name.
  optional string phase = 3;
}

// AnalysisTemplateReference is a reference to an AnalysisTemplate.
message AnalysisTemplateReference {
  // Name is the name of the AnalysisTemplate in the same project/namespace as
  // the Stage.
  //
  // +kubebuilder:validation:Required
  optional string name = 1;
}

// ApprovedStage describes a Stage for which Freight has been (manually)
// approved.
message ApprovedStage {
}

// ArgoCDAppHealthStatus describes the health of an ArgoCD Application.
message ArgoCDAppHealthStatus {
  optional string status = 1;

  optional string message = 2;
}

// ArgoCDAppStatus describes the current state of a single ArgoCD Application.
message ArgoCDAppStatus {
  // Namespace is the namespace of the ArgoCD Application.
  optional string namespace = 1;

  // Name is the name of the ArgoCD Application.
  optional string name = 2;

  // HealthStatus is the health of the ArgoCD Application.
  optional ArgoCDAppHealthStatus healthStatus = 3;

  // SyncStatus is the sync status of the ArgoCD Application.
  optional ArgoCDAppSyncStatus syncStatus = 4;
}

// ArgoCDAppSyncStatus describes the sync status of an ArgoCD Application.
message ArgoCDAppSyncStatus {
  optional string status = 1;

  optional string revision = 2;

  repeated string revisions = 3;
}

// ArgoCDAppUpdate describes updates that should be applied to an Argo CD
// Application resources to incorporate Freight into a Stage.
message ArgoCDAppUpdate {
  // AppName specifies the name of an Argo CD Application resource to be
  // updated.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string appName = 1;

  // AppNamespace specifies the namespace of an Argo CD Application resource to
  // be updated. If left unspecified, the namespace of this Application resource
  // will use the value of ARGOCD_NAMESPACE or "argocd"
  //
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string appNamespace = 2;

  // SourceUpdates describes updates to be applied to various sources of the
  // specified Argo CD Application resource.
  repeated ArgoCDSourceUpdate sourceUpdates = 3;
}

// ArgoCDHelm describes updates to an Argo CD Application source's Helm-specific
// attributes to incorporate newly observed Freight into a Stage.
message ArgoCDHelm {
  // Images describes how specific image versions can be incorporated into an
  // Argo CD Application's Helm parameters.
  //
  // +kubebuilder:validation:MinItems=1
  repeated ArgoCDHelmImageUpdate images = 1;
}

// ArgoCDHelmImageUpdate describes how a specific image version can be
// incorporated into an Argo CD Application's Helm parameters.
message ArgoCDHelmImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1;

  // Key specifies a key within an Argo CD Application's Helm parameters that is
  // to be updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string key = 2;

  // Value specifies the new value for the specified key in the Argo CD
  // Application's Helm parameters. Valid values are:
  //
  // - ImageAndTag: Replaces the value of the specified key with
  //   <image name>:<tag>
  // - Tag: Replaces the value of the specified key with just the new tag
  // - ImageAndDigest: Replaces the value of the specified key with
  //   <image name>@<digest>
  // - Digest: Replaces the value of the specified key with just the new digest.
  //
  // This is a required field.
  optional string value = 3;
}

// ArgoCDKustomize describes updates to an Argo CD Application source's
// Kustomize-specific attributes to incorporate newly observed Freight into a
// Stage.
message ArgoCDKustomize {
  // Images describes how specific image versions can be incorporated into an
  // Argo CD Application's Kustomize parameters.
  //
  // +kubebuilder:validation:MinItems=1
  repeated ArgoCDKustomizeImageUpdate images = 1;
}

// ArgoCDKustomizeImageUpdate describes how a specific image version can be
// incorporated into an Argo CD Application's Kustomize parameters.
message ArgoCDKustomizeImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1;

  // UseDigest specifies whether the image's digest should be used instead of
  // its tag.
  //
  // +kubebuilder:validation:Optional
  optional bool useDigest = 2;
}

// ArgoCDSourceUpdate describes updates that should be applied to one of an Argo
// CD Application resource's sources.
message ArgoCDSourceUpdate {
  // RepoURL along with the Chart field identifies which of an Argo CD
  // Application's sources this update is intended for. Note: As of Argo CD 2.6,
  // Applications can use multiple sources. When the source to be updated
  // references a Helm chart repository, the values of the RepoURL and Chart
  // fields should exactly match the values of the fields of the same names in
  // the source. i.e. Do not match the values of these two fields to your
  // Warehouse; match them to the Application source you wish to update. This is
  // a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string repoURL = 1;

  // Chart along with the RepoURL field identifies which of an Argo CD
  // Application's sources this update is intended for. Note: As of Argo CD 2.6,
  // Applications can use multiple sources. When the source to be updated
  // references a Helm chart repository, the values of the RepoURL and Chart
  // fields should exactly match the values of the fields of the same names in
  // the source. i.e. Do not match the values of these two fields to your
  // Warehouse; match them to the Application source you wish to update.
  //
  // +kubebuilder:validation:Optional
  optional string chart = 2;

  // UpdateTargetRevision is a bool indicating whether the source should be
  // updated such that its TargetRevision field points at the most recently git
  // commit (if RepoURL references a git repository) or chart version (if
  // RepoURL references a chart repository).
  optional bool updateTargetRevision = 3;

  // Kustomize describes updates to the source's Kustomize-specific attributes.
  optional ArgoCDKustomize kustomize = 4;

  // Helm describes updates to the source's Helm-specific attributes.
  optional ArgoCDHelm helm = 5;
}

// Chart describes a specific version of a Helm chart.
message Chart {
  // RepoURL specifies the URL of a Helm chart repository. Classic chart
  // repositories (using HTTP/S) can contain differently named charts. When this
  // field points to such a repository, the Name field will specify the name of
  // the chart within the repository. In the case of a repository within an OCI
  // registry, the URL implicitly points to a specific chart and the Name field
  // will be empty.
  optional string repoURL = 1;

  // Name specifies the name of the chart.
  optional string name = 2;

  // Version specifies a particular version of the chart.
  optional string version = 3;
}

// ChartSubscription defines a subscription to a Helm chart repository.
message ChartSubscription {
  // RepoURL specifies the URL of a Helm chart repository. It may be a classic
  // chart repository (using HTTP/S) OR a repository within an OCI registry.
  // Classic chart repositories can contain differently named charts. When this
  // field points to such a repository, the Name field MUST also be used
  // to specify the name of the desired chart within that repository. In the
  // case of a repository within an OCI registry, the URL implicitly points to
  // a specific chart and the Name field MUST NOT be used. The RepoURL field is
  // required.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.\-]+)(:[\d]+)?(/.*)*$`
  optional string repoURL = 1;

  // Name specifies the name of a Helm chart to subscribe to within a classic
  // chart repository specified by the RepoURL field. This field is required
  // when the RepoURL field points to a classic chart repository and MUST
  // otherwise be empty.
  optional string name = 2;

  // SemverConstraint specifies constraints on what new chart versions are
  // permissible. This field is optional. When left unspecified, there will be
  // no constraints, which means the latest version of the chart will always be
  // used. Care should be taken with leaving this field unspecified, as it can
  // lead to the unanticipated rollout of breaking changes.
  // More info: https://github.com/masterminds/semver#checking-version-constraints
  //
  // +kubebuilder:validation:Optional
  optional string semverConstraint = 3;
}

// Freight represents a collection of versioned artifacts.
message Freight {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Alias is a human-friendly alias for a piece of Freight. This is an optional
  // field. A defaulting webhook will sync this field with the value of the
  // kargo.akuity.io/alias label. When the alias label is not present or differs
  // from the value of this field, the defaulting webhook will set the label to
  // the value of this field. If the alias label is present and this field is
  // empty, the defaulting webhook will set the value of this field to the value
  // of the alias label. If this field is empty and the alias label is not
  // present, the defaulting webhook will choose an available alias and assign
  // it to both the field and label.
  optional string alias = 7;

  // Warehouse is the name of the Warehouse that created this Freight. This is a
  // required field. TODO: It is not clear yet how this field should be set in
  // the case of user-defined Freight.
  //
  // +kubebuilder:validation:Required
  optional string warehouse = 8;

  // Commits describes specific Git repository commits.
  repeated GitCommit commits = 3;

  // Images describes specific versions of specific container images.
  repeated Image images = 4;

  // Charts describes specific versions of specific Helm charts.
  repeated Chart charts = 5;

  // Status describes the current status of this Freight.
  optional FreightStatus status = 6;
}

// FreightList is a list of Freight resources.
message FreightList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Freight items = 2;
}

// FreightReference is a simplified representation of a piece of Freight -- not
// a root resource type.
message FreightReference {
  // Name is system-assigned identifier that is derived deterministically from
  // the contents of the Freight. i.e. Two pieces of Freight can be compared for
  // equality by comparing their Names.
  optional string name = 1;

  // Warehouse is the name of the Warehouse that created this Freight.
  optional string warehouse = 6;

  // Commits describes specific Git repository commits.
  repeated GitCommit commits = 2;

  // Images describes specific versions of specific container images.
  repeated Image images = 3;

  // Charts describes specific versions of specific Helm charts.
  repeated Chart charts = 4;

  // VerificationInfo is information about any verification process that was
  // associated with this Freight for this Stage.
  optional VerificationInfo verificationInfo = 5;

  // VerificationHistory is a stack of recent VerificationInfo. By default,
  // the last ten VerificationInfo are stored.
  repeated VerificationInfo verificationHistory = 7;
}

// FreightStatus describes a piece of Freight's most recently observed state.
message FreightStatus {
  // VerifiedIn describes the Stages in which this Freight has been verified
  // through promotion and subsequent health checks.
  map<string, VerifiedStage> verifiedIn = 1;

  // ApprovedFor describes the Stages for which this Freight has been approved
  // preemptively/manually by a user. This is useful for hotfixes, where one
  // might wish to promote a piece of Freight to a given Stage without
  // transiting the entire pipeline.
  map<string, ApprovedStage> approvedFor = 2;
}

// GitCommit describes a specific commit from a specific Git repository.
message GitCommit {
  // RepoURL is the URL of a Git repository.
  optional string repoURL = 1;

  // ID is the ID of a specific commit in the Git repository specified by
  // RepoURL.
  optional string id = 2;

  // Branch denotes the branch of the repository where this commit was found.
  optional string branch = 3;

  // Tag denotes a tag in the repository that matched selection criteria and
  // resolved to this commit.
  optional string tag = 4;

  // HealthCheckCommit is the ID of a specific commit. When specified,
  // assessments of Stage health will used this value (instead of ID) when
  // determining if applicable sources of Argo CD Application resources
  // associated with the Stage are or are not synced to this commit. Note that
  // there are cases (as in that of Kargo Render being utilized as a promotion
  // mechanism) wherein the value of this field may differ from the commit ID
  // found in the ID field.
  optional string healthCheckCommit = 5;

  // Message is the git commit message
  optional string message = 6;

  // Author is the git commit author
  optional string author = 7;
}

message GitHubPullRequest {
}

// GitRepoUpdate describes updates that should be applied to a Git repository
// (using various configuration management tools) to incorporate Freight into a
// Stage.
message GitRepoUpdate {
  // RepoURL is the URL of the repository to update. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^https?://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$`
  optional string repoURL = 1;

  // InsecureSkipTLSVerify specifies whether certificate verification errors
  // should be ignored when connecting to the repository. This should be enabled
  // only with great caution.
  optional bool insecureSkipTLSVerify = 2;

  // ReadBranch specifies a particular branch of the repository from which to
  // locate contents that will be written to the branch specified by the
  // WriteBranch field. This field is optional. When not specified, the
  // ReadBranch is implicitly the repository's default branch AND in cases where
  // a Freight includes a GitCommit, that commit's ID will supersede the value
  // of this field. Therefore, in practice, this field is only used to clarify
  // what branch of a repository can be treated as a source of manifests or
  // other configuration when a Stage has no subscription to that repository.
  //
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Pattern=`^(\w+([-/]\w+)*)?$`
  optional string readBranch = 3;

  // WriteBranch specifies the particular branch of the repository to be
  // updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
  optional string writeBranch = 4;

  // PullRequest will generate a pull request instead of making the commit directly
  optional PullRequestPromotionMechanism pullRequest = 5;

  // Render describes how to use Kargo Render to incorporate Freight into the
  // Stage. This is mutually exclusive with the Kustomize and Helm fields.
  optional KargoRenderPromotionMechanism render = 6;

  // Kustomize describes how to use Kustomize to incorporate Freight into the
  // Stage. This is mutually exclusive with the Render and Helm fields.
  optional KustomizePromotionMechanism kustomize = 7;

  // Helm describes how to use Helm to incorporate Freight into the Stage. This
  // is mutually exclusive with the Render and Kustomize fields.
  optional HelmPromotionMechanism helm = 8;
}

// GitSubscription defines a subscription to a Git repository.
message GitSubscription {
  // URL is the repository's URL. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^https?://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$`
  optional string repoURL = 1;

  // CommitSelectionStrategy specifies the rules for how to identify the newest
  // commit of interest in the repository specified by the RepoURL field. This
  // field is optional. When left unspecified, the field is implicitly treated
  // as if its value were "NewestFromBranch".
  //
  // +kubebuilder:default=NewestFromBranch
  optional string commitSelectionStrategy = 2;

  // Branch references a particular branch of the repository. The value in this
  // field only has any effect when the CommitSelectionStrategy is
  // NewestFromBranch or left unspecified (which is implicitly the same as
  // NewestFromBranch). This field is optional. When left unspecified, (and the
  // CommitSelectionStrategy is NewestFromBranch or unspecified), the
  // subscription is implicitly to the repository's default branch.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^\w+([-/]\w+)*$`
  optional string branch = 3;

  // SemverConstraint specifies constraints on what new tagged commits are
  // considered in determining the newest commit of interest. The value in this
  // field only has any effect when the CommitSelectionStrategy is SemVer. This
  // field is optional. When left unspecified, there will be no constraints,
  // which means the latest semantically tagged commit will always be used. Care
  // should be taken with leaving this field unspecified, as it can lead to the
  // unanticipated rollout of breaking changes.
  //
  // +kubebuilder:validation:Optional
  optional string semverConstraint = 4;

  // AllowTags is a regular expression that can optionally be used to limit the
  // tags that are considered in determining the newest commit of interest. The
  // value in this field only has any effect when the CommitSelectionStrategy is
  // Lexical, NewestTag, or SemVer. This field is optional.
  //
  // +kubebuilder:validation:Optional
  optional string allowTags = 5;

  // IgnoreTags is a list of tags that must be ignored when determining the
  // newest commit of interest. No regular expressions or glob patterns are
  // supported yet. The value in this field only has any effect when the
  // CommitSelectionStrategy is Lexical, NewestTag, or SemVer. This field is
  // optional.
  //
  // +kubebuilder:validation:Optional
  repeated string ignoreTags = 6;

  // InsecureSkipTLSVerify specifies whether certificate verification errors
  // should be ignored when connecting to the repository. This should be enabled
  // only with great caution.
  optional bool insecureSkipTLSVerify = 7;
}

// Health describes the health of a Stage.
message Health {
  // Status describes the health of the Stage.
  optional string status = 1;

  // Issues clarifies why a Stage in any state other than Healthy is in that
  // state. This field will always be the empty when a Stage is Healthy.
  repeated string issues = 2;

  // ArgoCDApps describes the current state of any related ArgoCD Applications.
  repeated ArgoCDAppStatus argoCDApps = 3;
}

// HelmChartDependencyUpdate describes how a specific Helm chart that is used
// as a subchart of an umbrella chart can be updated.
message HelmChartDependencyUpdate {
  // Repository along with Name identifies a subchart of the umbrella chart at
  // ChartPath whose version should be updated. The values of both fields should
  // exactly match the values of the fields of the same names in a dependency
  // expressed in the Chart.yaml of the umbrella chart at ChartPath. i.e. Do not
  // match the values of these two fields to your Warehouse; match them to the
  // Chart.yaml. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(((https?)|(oci))://)([\w\d\.\-]+)(:[\d]+)?(/.*)*$`
  optional string repository = 1;

  // Name along with Repository identifies a subchart of the umbrella chart at
  // ChartPath whose version should be updated. The values of both fields should
  // exactly match the values of the fields of the same names in a dependency
  // expressed in the Chart.yaml of the umbrella chart at ChartPath. i.e. Do not
  // match the values of these two fields to your Warehouse; match them to the
  // Chart.yaml. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string name = 2;

  // ChartPath is the path to an umbrella chart.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string chartPath = 3;
}

// HelmImageUpdate describes how a specific image version can be incorporated
// into a specific Helm values file.
message HelmImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(\w+([\.-]\w+)*(:[\d]+)?/)?(\w+([\.-]\w+)*)(/\w+([\.-]\w+)*)*$`
  optional string image = 1;

  // ValuesFilePath specifies a path to the Helm values file that is to be
  // updated. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string valuesFilePath = 2;

  // Key specifies a key within the Helm values file that is to be updated. This
  // is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string key = 3;

  // Value specifies the new value for the specified key in the specified Helm
  // values file. Valid values are:
  //
  // - ImageAndTag: Replaces the value of the specified key with
  //   <image name>:<tag>
  // - Tag: Replaces the value of the specified key with just the new tag
  // - ImageAndDigest: Replaces the value of the specified key with
  //   <image name>@<digest>
  // - Digest: Replaces the value of the specified key with just the new digest.
  //
  // This is a required field.
  optional string value = 4;
}

// HelmPromotionMechanism describes how to use Helm to incorporate Freight into
// a Stage.
message HelmPromotionMechanism {
  // Images describes how specific image versions can be incorporated into Helm
  // values files.
  repeated HelmImageUpdate images = 1;

  // Charts describes how specific chart versions can be incorporated into an
  // umbrella chart.
  repeated HelmChartDependencyUpdate charts = 2;
}

// Image describes a specific version of a container image.
message Image {
  // RepoURL describes the repository in which the image can be found.
  optional string repoURL = 1;

  // GitRepoURL specifies the URL of a Git repository that contains the source
  // code for the image repository referenced by the RepoURL field if Kargo was
  // able to infer it.
  optional string gitRepoURL = 2;

  // Tag identifies a specific version of the image in the repository specified
  // by RepoURL.
  optional string tag = 3;

  // Digest identifies a specific version of the image in the repository
  // specified by RepoURL. This is a more precise identifier than Tag.
  optional string digest = 4;
}

// ImageSubscription defines a subscription to an image repository.
message ImageSubscription {
  // RepoURL specifies the URL of the image repository to subscribe to. The
  // value in this field MUST NOT include an image tag. This field is required.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=`^(\w+([\.-]\w+)*(:[\d]+)?/)?(\w+([\.-]\w+)*)(/\w+([\.-]\w+)*)*$`
  optional string repoURL = 1;

  // GitRepoURL optionally specifies the URL of a Git repository that contains
  // the source code for the image repository referenced by the RepoURL field.
  // When this is specified, Kargo MAY be able to infer and link to the exact
  // revision of that source code that was used to build the image.
  //
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:Pattern=`^https?://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$`
  optional string gitRepoURL = 2;

  // ImageSelectionStrategy specifies the rules for how to identify the newest version
  // of the image specified by the RepoURL field. This field is optional. When
  // left unspecified, the field is implicitly treated as if its value were
  // "SemVer".
  //
  // +kubebuilder:default=SemVer
  optional string imageSelectionStrategy = 3;

  // SemverConstraint specifies constraints on what new image versions are
  // permissible. The value in this field only has any effect when the
  // ImageSelectionStrategy is SemVer or left unspecified (which is implicitly
  // the same as SemVer). This field is also optional. When left unspecified,
  // (and the ImageSelectionStrategy is SemVer or unspecified), there will be no
  // constraints, which means the latest semantically tagged version of an image
  // will always be used. Care should be taken with leaving this field
  // unspecified, as it can lead to the unanticipated rollout of breaking
  // changes. Refer to Image Updater documentation for more details.
  // More info: https://github.com/masterminds/semver#checking-version-constraints
  //
  // +kubebuilder:validation:Optional
  optional string semverConstraint = 4;

  // AllowTags is a regular expression that can optionally be used to limit the
  // image tags that are considered in determining the newest version of an
  // image. This field is optional.
  //
  // +kubebuilder:validation:Optional
  optional string allowTags = 5;

  // IgnoreTags is a list of tags that must be ignored when determining the
  // newest version of an image. No regular expressions or glob patterns are
  // supported yet. This field is optional.
  //
  // +kubebuilder:validation:Optional
  repeated string ignoreTags = 6;

  // Platform is a string of the form <os>/<arch> that limits the tags that can
  // be considered when searching for new versions of an image. This field is
  // optional. When left unspecified, it is implicitly equivalent to the
  // OS/architecture of the Kargo controller. Care should be taken to set this
  // value correctly in cases where the image referenced by this
  // ImageRepositorySubscription will run on a Kubernetes node with a different
  // OS/architecture than the Kargo controller. At present this is uncommon, but
  // not unheard of.
  //
  // +kubebuilder:validation:Optional
  optional string platform = 7;

  // InsecureSkipTLSVerify specifies whether certificate verification errors
  // should be ignored when connecting to the repository. This should be enabled
  // only with great caution.
  optional bool insecureSkipTLSVerify = 8;
}

// KargoRenderImageUpdate describes how an image can be incorporated into a
// Stage using Kargo Render.
message KargoRenderImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1;

  // UseDigest specifies whether the image's digest should be used instead of
  // its tag.
  //
  // +kubebuilder:validation:Optional
  optional bool useDigest = 2;
}

// KargoRenderPromotionMechanism describes how to use Kargo Render to
// incorporate Freight into a Stage.
message KargoRenderPromotionMechanism {
  // Images describes how images can be incorporated into a Stage using Kargo
  // Render. If this field is omitted, all images in the Freight being promoted
  // will be passed to Kargo Render in the form <image name>:<tag>. (e.g. Will
  // not use digests by default.)
  //
  // +kubebuilder:validation:Optional
  repeated KargoRenderImageUpdate images = 1;
}

// KustomizeImageUpdate describes how to run `kustomize edit set image`
// for a given image.
message KustomizeImageUpdate {
  // Image specifies a container image (without tag). This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string image = 1;

  // Path specifies a path in which the `kustomize edit set image` command
  // should be executed. This is a required field.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[\w-\.]+(/[\w-\.]+)*$
  optional string path = 2;

  // UseDigest specifies whether the image's digest should be used instead of
  // its tag.
  //
  // +kubebuilder:validation:Optional
  optional bool useDigest = 3;
}

// KustomizePromotionMechanism describes how to use Kustomize to incorporate
// Freight into a Stage.
message KustomizePromotionMechanism {
  // Images describes images for which `kustomize edit set image` should be
  // executed and the paths in which those commands should be executed.
  //
  // +kubebuilder:validation:MinItems=1
  repeated KustomizeImageUpdate images = 1;
}

// Project is a resource type that reconciles to a specially labeled namespace
// and other TODO: TBD project-level resources.
message Project {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec describes a Project.
  optional ProjectSpec spec = 2;

  // Status describes the Project's current status.
  optional ProjectStatus status = 3;
}

// ProjectList is a list of Project resources.
message ProjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Project items = 2;
}

// ProjectSpec describes a Project.
message ProjectSpec {
  // PromotionPolicies defines policies governing the promotion of Freight to
  // specific Stages within this Project.
  repeated PromotionPolicy promotionPolicies = 1;
}

// ProjectStatus describes a Project's current status.
message ProjectStatus {
  // Phase describes the Project's current phase.
  optional string phase = 1;

  // Message is a display message about the Project, including any errors
  // preventing the Project from being reconciled. i.e. If the Phase field has a
  // value of CreationFailed, this field can be expected to explain why.
  optional string message = 2;
}

// Promotion represents a request to transition a particular Stage into a
// particular Freight.
message Promotion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec describes the desired transition of a specific Stage into a specific
  // Freight.
  //
  // +kubebuilder:validation:Required
  optional PromotionSpec spec = 2;

  // Status describes the current state of the transition represented by this
  // Promotion.
  optional PromotionStatus status = 3;
}

message PromotionInfo {
  // Name is the name of the Promotion
  optional string name = 1;

  // Freight is the freight being promoted
  optional FreightReference freight = 2;
}

// PromotionList contains a list of Promotion
message PromotionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Promotion items = 2;
}

// PromotionMechanisms describes how to incorporate Freight into a Stage.
message PromotionMechanisms {
  // GitRepoUpdates describes updates that should be applied to Git repositories
  // to incorporate Freight into the Stage. This field is optional, as such
  // actions are not required in all cases.
  repeated GitRepoUpdate gitRepoUpdates = 1;

  // ArgoCDAppUpdates describes updates that should be applied to Argo CD
  // Application resources to incorporate Freight into the Stage. This field is
  // optional, as such actions are not required in all cases. Note that all
  // updates specified by the GitRepoUpdates field, if any, are applied BEFORE
  // these.
  repeated ArgoCDAppUpdate argoCDAppUpdates = 2;
}

// PromotionPolicy defines policies governing the promotion of Freight to a
// specific Stage.
message PromotionPolicy {
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string stage = 1;

  // AutoPromotionEnabled indicates whether new Freight can automatically be
  // promoted into the Stage referenced by the Stage field. Note: There are may
  // be other conditions also required for an auto-promotion to occur. This
  // field defaults to false, but is commonly set to true for Stages that
  // subscribe to Warehouses instead of other, upstream Stages. This allows
  // users to define Stages that are automatically updated as soon as new
  // artifacts are detected.
  optional bool autoPromotionEnabled = 2;
}

// PromotionSpec describes the desired transition of a specific Stage into a
// specific Freight.
message PromotionSpec {
  // Stage specifies the name of the Stage to which this Promotion
  // applies. The Stage referenced by this field MUST be in the same
  // namespace as the Promotion.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string stage = 1;

  // Freight specifies the piece of Freight to be promoted into the Stage
  // referenced by the Stage field.
  //
  // +kubebuilder:validation:MinLength=1
  optional string freight = 2;
}

// PromotionStatus describes the current state of the transition represented by
// a Promotion.
message PromotionStatus {
  // Phase describes where the Promotion currently is in its lifecycle.
  optional string phase = 1;

  // Message is a display message about the promotion, including any errors
  // preventing the Promotion controller from executing this Promotion.
  // i.e. If the Phase field has a value of Failed, this field can be expected
  // to explain why.
  optional string message = 2;

  // Metadata holds arbitrary metadata set by promotion mechanisms
  // (e.g. for display purposes, or internal bookkeeping)
  map<string, string> metadata = 3;
}

// PullRequestPromotionMechanism describes how to generate a pull request against the write branch during promotion
// Attempts to infer the git provider from well-known git domains.
message PullRequestPromotionMechanism {
  // GitHub indicates git provider is GitHub
  optional GitHubPullRequest github = 1;
}

// RepoSubscription describes a subscription to ONE OF a Git repository, a
// container image repository, or a Helm chart repository.
message RepoSubscription {
  // Git describes a subscriptions to a Git repository.
  optional GitSubscription git = 1;

  // Image describes a subscription to container image repository.
  optional ImageSubscription image = 2;

  // Chart describes a subscription to a Helm chart repository.
  optional ChartSubscription chart = 3;
}

// Stage is the Kargo API's main type.
message Stage {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec describes sources of Freight used by the Stage and how to incorporate
  // Freight into the Stage.
  //
  // +kubebuilder:validation:Required
  optional StageSpec spec = 2;

  // Status describes the Stage's current and recent Freight, health, and more.
  optional StageStatus status = 3;
}

// StageList is a list of Stage resources.
message StageList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Stage items = 2;
}

// StageSpec describes the sources of Freight used by a Stage and how to
// incorporate Freight into the Stage.
message StageSpec {
  // Shard is the name of the shard that this Stage belongs to. This is an
  // optional field. If not specified, the Stage will belong to the default
  // shard. A defaulting webhook will sync this field with the value of the
  // kargo.akuity.io/shard label. When the shard label is not present or differs
  // from the value of this field, the defaulting webhook will set the label to
  // the value of this field. If the shard label is present and this field is
  // empty, the defaulting webhook will set the value of this field to the value
  // of the shard label.
  optional string shard = 4;

  // Subscriptions describes the Stage's sources of Freight. This is a required
  // field.
  //
  // +kubebuilder:validation:Required
  optional Subscriptions subscriptions = 1;

  // PromotionMechanisms describes how to incorporate Freight into the Stage.
  // This is an optional field as it is sometimes useful to aggregates available
  // Freight from multiple upstream Stages without performing any actions. The
  // utility of this is to allow multiple downstream Stages to subscribe to a
  // single upstream Stage where they may otherwise have subscribed to multiple
  // upstream Stages.
  optional PromotionMechanisms promotionMechanisms = 2;

  // Verification describes how to verify a Stage's current Freight is fit for
  // promotion downstream.
  optional Verification verification = 3;
}

// StageStatus describes a Stages's current and recent Freight, health, and
// more.
message StageStatus {
  // Phase describes where the Stage currently is in its lifecycle.
  optional string phase = 1;

  // CurrentFreight is a simplified representation of the Stage's current
  // Freight describing what is currently deployed to the Stage.
  optional FreightReference currentFreight = 2;

  // History is a stack of recent Freight. By default, the last ten Freight are
  // stored.
  repeated FreightReference history = 3;

  // Health is the Stage's last observed health.
  optional Health health = 8;

  // Message describes any errors that are preventing the Stage controller
  // from assessing Stage health or from finding new Freight.
  optional string message = 9;

  // ObservedGeneration represents the .metadata.generation that this Stage
  // status was reconciled against.
  optional int64 observedGeneration = 6;

  // CurrentPromotion is a reference to the currently Running promotion.
  optional PromotionInfo currentPromotion = 7;
}

// StageSubscription defines a subscription to Freight from another Stage.
message StageSubscription {
  // Name specifies the name of a Stage.
  //
  // +kubebuilder:validation:MinLength=1
  // +kubebuilder:validation:Pattern=^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
  optional string name = 1;
}

// Subscriptions describes a Stage's sources of Freight.
message Subscriptions {
  // Warehouse is a subscription to a Warehouse. This field is mutually
  // exclusive with the UpstreamStages field.
  optional string warehouse = 1;

  // UpstreamStages identifies other Stages as potential sources of Freight
  // for this Stage. This field is mutually exclusive with the Repos field.
  repeated StageSubscription upstreamStages = 2;
}

// Verification describes how to verify that a Promotion has been successful
// using Argo Rollouts AnalysisTemplates.
message Verification {
  // AnalysisTemplates is a list of AnalysisTemplates from which AnalysisRuns
  // should be created to verify a Stage's current Freight is fit to be promoted
  // downstream.
  repeated AnalysisTemplateReference analysisTemplates = 1;

  // AnalysisRunMetadata is contains optional metadata that should be applied to
  // all AnalysisRuns.
  optional AnalysisRunMetadata analysisRunMetadata = 2;

  // Args lists arguments that should be added to all AnalysisRuns.
  repeated AnalysisRunArgument args = 3;
}

// VerificationInfo contains information about the currently running
// Verification process.
message VerificationInfo {
  // ID is the identifier of the Verification process.
  optional string id = 4;

  // Phase describes the current phase of the Verification process. Generally,
  // this will be a reflection of the underlying AnalysisRun's phase, however,
  // there are exceptions to this, such as in the case where an AnalysisRun
  // cannot be launched successfully.
  optional string phase = 1;

  // Message may contain additional information about why the verification
  // process is in its current phase.
  optional string message = 2;

  // AnalysisRun is a reference to the Argo Rollouts AnalysisRun that implements
  // the Verification process.
  optional AnalysisRunReference analysisRun = 3;
}

// VerifiedStage describes a Stage in which Freight has been verified.
message VerifiedStage {
}

// Warehouse is a source of Freight.
message Warehouse {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec describes sources of artifacts.
  //
  // +kubebuilder:validation:Required
  optional WarehouseSpec spec = 2;

  // Status describes the Warehouse's most recently observed state.
  optional WarehouseStatus status = 3;
}

// WarehouseList is a list of Warehouse resources.
message WarehouseList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Warehouse items = 2;
}

// WarehouseSpec describes sources of versioned artifacts to be included in
// Freight produced by this Warehouse.
message WarehouseSpec {
  // Shard is the name of the shard that this Warehouse belongs to. This is an
  // optional field. If not specified, the Warehouse will belong to the default
  // shard. A defaulting webhook will sync this field with the value of the
  // kargo.akuity.io/shard label. When the shard label is not present or differs
  // from the value of this field, the defaulting webhook will set the label to
  // the value of this field. If the shard label is present and this field is
  // empty, the defaulting webhook will set the value of this field to the value
  // of the shard label.
  optional string shard = 2;

  // Subscriptions describes sources of artifacts to be included in Freight
  // produced by this Warehouse.
  //
  // +kubebuilder:validation:MinItems=1
  repeated RepoSubscription subscriptions = 1;
}

// WarehouseStatus describes a Warehouse's most recently observed state.
message WarehouseStatus {
  // Message describes any errors that are preventing the Warehouse controller
  // from polling repositories to discover new Freight.
  optional string message = 3;

  // ObservedGeneration represents the .metadata.generation that this Warehouse
  // was reconciled against.
  optional int64 observedGeneration = 2;
}

